<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>自己満足プログラミング</title>
    <description>Reinventing the wheel.</description>
    <link>https://happyclam.github.io/</link>
    <atom:link href="https://happyclam.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 19 May 2024 17:52:06 +0900</pubDate>
    <lastBuildDate>Sun, 19 May 2024 17:52:06 +0900</lastBuildDate>
    <generator>Jekyll v3.9.4</generator>
    
      <item>
        <title>固定ギア（ピスト）の感想</title>
        <description>&lt;h3 id=&quot;乗ってみる前の想像と違ったこともある&quot;&gt;乗ってみる前の想像と違ったこともある&lt;/h3&gt;
&lt;p&gt;　固定ギア（ピスト）の記事を２つ（&lt;a href=&quot;/miscellaneous/2024-03-10/stroll01&quot;&gt;「固定ギア（ピスト）に乗ってみたい」&lt;/a&gt;、&lt;a href=&quot;/miscellaneous/2024-03-16/stroll02&quot;&gt;「Fuji Stroll、さっそくカスタマイズ」&lt;/a&gt;）書きましたが、実際に２ヶ月ほどピストバイク（Fuji Stroll）乗ってみた感想を書いてみようと思います。自分は自転車業界とは利害関係はありませんし、固定ギアが世間で流行って欲しいと思っているわけでもないので、ネガティブな面も合わせて思ったことや体験したことを書いてみようと思います。&lt;/p&gt;

&lt;h3 id=&quot;ブレーキは必須&quot;&gt;ブレーキは必須&lt;/h3&gt;
&lt;p&gt;　自分が固定ギアに乗ってみたいと思ったのは、&lt;a href=&quot;/miscellaneous/2024-03-10/stroll01&quot;&gt;「固定ギア（ピスト）に乗ってみたい」&lt;/a&gt;という記事で紹介した動画のように、ブレーキ無しのピストバイクで下り坂を下る様が「すげ〜」、「かっこいい〜」、「やってみたい」というものだったので、もしかしたら固定ギアに乗り慣れてくるとブレーキは使わなくなるのではないかと思っていました。法律上ブレーキを付けなくてはいけないだけで、ピストに慣れてくれば「使わなくても済むようになるのかも」と勘違いしてたんです。でも実際はスキッドはブレーキの代わりにはならないし、急な危険回避には絶対にブレーキが必要です。この点は、「なんだ、やはりブレーキは必要なのか」と、過剰に期待しすぎていたのが悪いのですが、少し残念な気がしました。&lt;br /&gt;
　まだスキッドはうまくありませんが、スキッドってやろうと思ってやるものなんですよねぇ、急ブレーキが必要な場面でスキッドでは止まれません、急な危険回避のためには使えません。自分がまだ未熟だからそうなのではなく、今後も急ブレーキの代わりにスキッドを使うなんてことはないでしょう。&lt;br /&gt;
　ちなみにバースピンとかバックサークルとか、曲芸的なトリックには今の所全く興味が湧きません。今後は分かりませんが…。&lt;/p&gt;

&lt;h3 id=&quot;急ブレーキを体験&quot;&gt;急ブレーキを体験&lt;/h3&gt;
&lt;p&gt;　自転車乗っていて急ブレーキをかける機会はそれほどないと思いますが、早くも体験しました。交差点を直進していたところ黄色信号になったタイミングで、対抗の右折車が突っ込んできてお互いにブレーキをかけて、衝突まであと数十センチの距離まで接近したことが有ります。この時相手に「直進車優先だろ〜」（道路交通法37条）と文句を言う気持ちなんて起きなくて、「お〜、きれいにスキッドが決まった〜」と妙に冷静でした:sweat_smile:&lt;br /&gt;
　スキッドは急ブレーキの代わりにはなりませんが、急ブレーキかけた時は自然とミッドスキッド状態になるみたいです。&lt;/p&gt;

&lt;h3 id=&quot;ピストはダイエットにいいかも&quot;&gt;ピストはダイエットにいいかも&lt;/h3&gt;
&lt;p&gt;　まだ一日で最高で50Km程しか乗ったことがないのですが、その日は疲れました。ロードやミニベロ（IDIOM2）で50Kmなんて走ったうちには入らないぐらいに思っているのですが、ピスト（Stroll）だと疲れるので今の所50Kmまでにしようと思っています。50Km以上遠出をするつもりならミニベロ使おうと思っていますが、ピストは乗っているだけで楽しいので、最近はミニペロは放ったらかしでピストで近場ばかり乗り回しています。&lt;br /&gt;
　巷では「自転車ダイエット」って標語を見かけますが、運動効率の非常に高い乗り物である自転車をダイエット目的で使うなんておかしいと思っていました。でも、ピストなら長距離乗らなくても結構疲れるのでダイエットに効くのではないかと思っています。長距離乗ればかなり疲れますし、スキッドの練習やスタンディングの練習をしているだけでも意外と疲れます。&lt;/p&gt;

&lt;h3 id=&quot;縁石に注意&quot;&gt;縁石に注意&lt;/h3&gt;
&lt;p&gt;　フリーギアなら車道と歩道の間にある縁石を避けるために左側のペダルを上にした状態で車道側の車と縁石の間を惰性で進んでいくということがあると思いますが、ピストではペダルは常に回っているので左側のペダルを上にしたままでは進めないことが分かっていても、つい車幅感覚を見誤って縁石にペダルを何回か擦りました。その時はズズッと車体がズレる程度で済みましたが、右側の停車中の車にぶつかりそうになったことも有ります。&lt;br /&gt;
　車道左側が狭い時は無理に車道を走らずにすぐに歩道を走るようになりました。ロードバイク乗っている時は「ロードバイクで歩道を走るのは負け」みたいな意識があったのですが、なんかピストではそれほどスピードを出さないこともあって歩道を走ることが増えました。&lt;/p&gt;

&lt;h3 id=&quot;ストラップは付けたほうがいい&quot;&gt;ストラップは付けたほうがいい&lt;/h3&gt;
&lt;p&gt;　ペダルを後ろに踏んで減速することが出来ます。&lt;a href=&quot;/miscellaneous/2024-03-16/stroll02&quot;&gt;以前の記事&lt;/a&gt;にも書きましたが、下り坂で一度ペダルから足が離れるとペダルだけグルグル回ってフリーギアのようにすぐにはペダルに足を戻すことが出来ません。スキッドもそうですが、ストラップを付けているとブレーキを使わずに速度をコントロールできます。&lt;br /&gt;
　でも、歩道を歩行者の速度に合わせてポタポタと走っている時は敢えてストラップから足を外すときも多いです。すぐに地面に足が着けれるようにするためです。歩行者の不意の動きに対応してブレーキかけてすぐに足をストラップから抜いて着地することも出来ますが、ストラップから足を抜くのに失敗して一度コケてしまいました。それ以来、人が多い歩道では敢えてストラップから足を外してます（主に片足だけ）。そのおかげで走りながらストラップを嵌めるのにも慣れてきました。&lt;br /&gt;
　ストラップから足を抜いてストラップがペダルの下側にある状態だと、ストラップが地面に軽く擦るのですがこれは仕方ないのでしょう。&lt;/p&gt;

&lt;h3 id=&quot;山は登れない&quot;&gt;山は登れない&lt;/h3&gt;
&lt;p&gt;　自転車で山を登るのは結構好きなのですが、現在のStrollでは山に登るどころかちょっとした高地に行くだけでもうお腹いっぱいって感じで、山に登る手前（大阪で言えば箕面近辺）までしか行く気がしません。山も登ってみるつもりで自転車購入時に軽めのコグ（17T）を選んだのですが、このギアではちょっと無理そうです。いずれ今の反対側についているフリーギアも山登り用の固定ギア（Strollは19Tまでしか選べない？）にして、山の頂上に行ったところで後輪を反転させて平地用のコグに切り替えて降りてこようかなんて考えていますが、ちょっと面倒くさいですね。&lt;/p&gt;

&lt;h3 id=&quot;下りのカーブが怖い&quot;&gt;下りのカーブが怖い&lt;/h3&gt;
&lt;p&gt;　フリーギアならカーブの外側のペダルを下にして外足に荷重をかけてカーブを曲がれば内側のペダルを地面に擦る心配はありませんが、ピストバイクだと常にペダルが回るのでカーブの内側のペダルを地面に擦らないかいつも心配です。昔、250ccのオートバイに乗っていたことがあるのですが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;リーンイン&lt;/code&gt;と言われる姿勢でカーブを曲がることがあります。オートバイの場合は主にタイヤのグリップ力を上げるために&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;リーンイン&lt;/code&gt;の姿勢を取るのだと思うのですが、ピストバイクの場合はペダルを地面に擦らないようにするために同じような感じでやってます。ペダルを地面に擦らないかヒヤヒヤしながらカーブを曲がるので自然とスピードも落ちます。やはり&lt;a href=&quot;/miscellaneous/2024-03-10/stroll01&quot;&gt;以前の記事&lt;/a&gt;で紹介した動画のように下りカーブはスキッドを駆使して曲がるのが本来の曲がり方なのでしょうか？無茶苦茶難しいですよね:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stroll_inclination.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stroll_inclination.png&quot; alt=&quot;Stroll ペダルを擦る角度&quot; width=&quot;320&quot; height=&quot;389&quot; title=&quot;Stroll ペダルを擦る角度&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　上の写真はスタンドを使わずにペダルを地面に接地させてペダルだけでStrollを自立させている状態です。カーブで車体をこれだけ傾けるだけでペダルを擦るってことです。&lt;br /&gt;
　&lt;a href=&quot;https://www.fujibikes.jp/2020/products/stroll/&quot;&gt;ここ&lt;/a&gt;でStrollのジオメトリーを確認したところ、フレームサイズに関わらずクランク長は170mmのようですが、ちょっと長いんじゃないでしょうか？昔乗っていたARAYAの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Raleigh CRF&lt;/code&gt;というロードバイクは470mmのフレームサイズだけ165mmのクランク長で他のフレームサイズは170mmでした。一般的にピストバイクはクランク長が短めになっていると聞いたので、ロードバイク（CRF）よりクランクが長いってのがちょっと気になっていて、いつか160mmのクランクに変えようかと思っています。170mmから160mmに変えてもわずか1cmの違いなので、違いを感じるのかどうか分かりませんが、カーブでペダルを擦りにくくする気休めにはなるでしょう。それにストラップを足から外してもストラップが地面を擦ることはなくなるかもしれません。&lt;br /&gt;
　自転車って凝りだすとこうやって少しずつお金がかかるんですよねぇ:sweat_smile:&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;　フリーギアのロードバイク（今はロードバイクは持っていないのでIDIOM2がロードバイク代わりです）に比べたら、疲れる、危ない、遅いって感じですが、それでも今はピストに乗っていたいって感じです。フリーギアに比べて不便だと思う反面、ピストは乗りこなすための乗車スキルが必要になるので、上達して行く過程を楽しむっていう面があると思います。向上心を刺激するんですね。だから自転車の実用的な利点しか興味がない人にとっては、ピストバイクは必要ないものだと思います。&lt;br /&gt;
　フリーギアの自転車をオートマチックの自動車に、ピストをマニュアル操作の自動車に例える人もいますが、自動車の運転より奥が深そうです。自動車の運転なんてすぐに慣れてしまって、運転するだけで楽しめる時期っていうのはすぐに過ぎ去ってしまいますが、ピストはもっと長く楽しめそうです。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 19 May 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2024-05-19/stroll03</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2024-05-19/stroll03</guid>
        
        <category>bicycle</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>広告収益の不明瞭さが気になる</title>
        <description>&lt;h3 id=&quot;広告ビジネスへの不信感&quot;&gt;広告ビジネスへの不信感&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/miscellaneous/2024-05-04/app_private&quot;&gt;前回の記事&lt;/a&gt;で「無料アプリで広告を出すより、安価な有料アプリにすべきだった」と書きました。有料アプリで公開したほうが、「無料でアプリを使っているにも関わらず批判ばかりする所謂アンチ勢力を避けることが出来る」なんて意見も耳にしますが、自分としてはアンチを避けるためというような理由ではなく、５年程度やってみたから分かったことですが広告表示で収益を上げるというビジネスモデル自体がいろいろ不明瞭な点が多く納得できないからというのが理由です。有料アプリであればアプリを購入した人が確実に存在するので分かりやすいですが、アプリ広告が何回見られたかとか広告が何回クリックされたかとか本当のところは開発者には分からないので、Youtubeなんかも同じですが、そういう不明瞭な評価が自分にとって納得しづらいという理由で有料アプリにした方がよかったなぁと思っています。&lt;br /&gt;
　どう感じるかはこの記事を読む人次第ですが、自分が体験した不思議な事象をいくつか書いてみます。&lt;/p&gt;

&lt;h3 id=&quot;ダウンロード数が増えない不思議&quot;&gt;ダウンロード数が増えない不思議&lt;/h3&gt;
&lt;p&gt;　この記事を書く切っ掛けにもなったのですが、最近当ブログに流入する検索ワードの順位が大幅に変わりました。&lt;a href=&quot;/software/2023-11-07/karah_problem&quot;&gt;以前の記事&lt;/a&gt;に書いたように当ブログに流入してくる検索ワードは圧倒的に「マンカラ」関係が多かったのですが、最近「消える まるばつ」がトップになりました。&lt;/p&gt;

&lt;div style=&quot;width:330px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/site_ranking0.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/site_ranking0.png&quot; alt=&quot;検索ワードランキング&quot; width=&quot;330&quot; height=&quot;336&quot; title=&quot;検索ワードランキング&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　iOSアプリで&lt;a href=&quot;https://apps.apple.com/pl/app/%E3%82%B5%E3%83%89%E3%83%B3%E3%83%87%E3%82%B9%E3%81%BE%E3%82%8B%E3%81%B0%E3%81%A4%E3%82%B2%E3%83%BC%E3%83%A0/id6448230478&quot;&gt;「サドンデスまるばつ」&lt;/a&gt;というアプリがリリースされたのが原因のようで、それに伴って以前公開していた&lt;a href=&quot;https://happyclam.github.io/project/2017-07-11/tictactoe-van&quot;&gt;「消える三目並べ」というアプリの記事&lt;/a&gt;へのアクセスが急上昇したようです。&lt;/p&gt;

&lt;div style=&quot;width:570px; margin: 0 auto;&quot;&gt;
&lt;div style=&quot;float:left; margin: 0px 20px 0px;&quot;&gt;
&lt;a href=&quot;/images/site_ranking1.png&quot;&gt;&lt;img width=&quot;216&quot; height=&quot;504&quot; src=&quot;https://happyclam.github.io/images/site_ranking1.png&quot; alt=&quot;先月のランキング&quot; title=&quot;先月のランキング&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/images/site_ranking2.png&quot;&gt;&lt;img width=&quot;216&quot; height=&quot;504&quot; src=&quot;https://happyclam.github.io/images/site_ranking2.png&quot; alt=&quot;今月のランキング&quot; title=&quot;今月のランキング&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;　上の画像は先月と今月の当ブログへの検索流入ワードランキングです。以前の自分なら「よし、この波に乗って『消える三目並べ』アプリをリニューアルしてみるか！」なんて考えたかもしれませんが、アプリの記事へのアクセスが必ずしもアプリのダウンロードには繋がらないことを経験しているので静観しているところです。&lt;br /&gt;
　と言うのも、下の画像が&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;マンカラアプリ&lt;/a&gt;のアクティブユーザー数の推移のグラフですが、最高で２０人ぐらいで推移していて、当ブログで最も参照されている記事で紹介しているアプリにも関わらず、ほぼ最もアクティブユーザー数が少ないアプリになってしまっています。「検索で辿り着いた人がわざわざアプリをダウンロードしないよ」という意見もあると思いますが、関心を持って辿り着いた記事で紹介しているアプリなら「一度ダウンロードして試してみようか」とならないですかねぇ:thinking:それに、いきなり急上昇した「消える三目並べ」と違って、マンカラの記事はもう何年も当ブログでトップのアクセス数なので増えていってもいいと思うのですが不思議です:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:360px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/mancala_graph.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/mancala_graph.png&quot; alt=&quot;マンカラアプリ アクティブユーザー数&quot; width=&quot;360&quot; height=&quot;493&quot; title=&quot;マンカラアプリ アクティブユーザー数&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;マンカラアプリ&lt;/a&gt;は５段階評価で５の評価を２つ貰っていますが、レビューコメントが無いのでGoogle Play上では表示されていません。自分がマンカラというゲームを初めて知った時は何種類もマンカラアプリをダウンロードしまくったのでなんか納得できないんですよねぇ:sob:&lt;/p&gt;

&lt;h3 id=&quot;ユーザー数が急上昇して急降下する不思議&quot;&gt;ユーザー数が急上昇して急降下する不思議&lt;/h3&gt;
&lt;p&gt;　今度は自分のアプリの中でもっともアクティブユーザー数が多い&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;のアクティブユーザー数の推移です。自分のアプリの中の稼ぎ頭です:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:360px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/55shogi_graph.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/55shogi_graph.png&quot; alt=&quot;５五将棋アプリ アクティブユーザー数&quot; width=&quot;360&quot; height=&quot;477&quot; title=&quot;５五将棋アプリ アクティブユーザー数&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　たしかリリースして数カ月後のことだったと思いますが、いきなりユーザー数が急上昇してその後何かの間違いだったかのように急降下して、未だにその時のユーザー数を超えていません。この時、アプリ広告は既に付けていましたが広告収入の急上昇はありませんでした。さっぱり原因はわかりません。不思議だと思いませんか？:sweat_smile:&lt;/p&gt;

&lt;h3 id=&quot;広告収入が急上昇して急降下する不思議&quot;&gt;広告収入が急上昇して急降下する不思議&lt;/h3&gt;
&lt;p&gt;　今度は&lt;a href=&quot;/miscellaneous/2024-05-04/app_private&quot;&gt;前回の記事&lt;/a&gt;で事情を説明したように、現在非公開になっている&lt;ruby&gt;禽将棋&lt;rt&gt;とりしょうぎ&lt;/rt&gt;&lt;/ruby&gt;アプリに関するグラフです。&lt;/p&gt;

&lt;div style=&quot;width:360px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/torishogi_graph.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/torishogi_graph.png&quot; alt=&quot;禽将棋アプリ アクティブユーザー数&quot; width=&quot;360&quot; height=&quot;477&quot; title=&quot;禽将棋アプリ アクティブユーザー数&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/torishogi_graph2.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/torishogi_graph2.png&quot; alt=&quot;禽将棋アプリ 広告収入&quot; width=&quot;480&quot; height=&quot;386&quot; title=&quot;禽将棋アプリ 広告収入&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;のケースと違って、アプリのダウンロード数は増えてないのにリリースしてすぐに一日だけ広告収入だけが急上昇しました。ダウンロード数が全然増えていないのに一日600円も広告収入を貰えて、その後はグラフの通り僅かな収益で推移していました。これは極少数のユーザーが一日だけハードに使いまくった可能性はあり得ますが、当時はインタースティシャル広告を付けておらずバナー広告だけだったし、バナー広告だけで一日600円って、ユーザー数も数人だったのでこれも不思議なんですよねぇ:sweat_smile:&lt;/p&gt;

&lt;h3 id=&quot;実態の分からない広告収益&quot;&gt;実態の分からない広告収益&lt;/h3&gt;
&lt;p&gt;　以上、見てきたように広告収入なんてかなりいい加減なものだと思っています。極一部のユーザーによる恣意的な操作も出来るでしょうし、それをやっているのがgoogleならマッチポンプで問題だと思いますが、アプリの宣伝のためにgoogleにコストを支払ってランキング上位に表示させてダウンロード数を増やすことには別に問題はありません。疑問があればもしかしたらgoogle側に情報公開を請求できるのかもしれませんが、その情報自体の真贋も自分自身では確かめようがないのでやろうとは思いません。&lt;br /&gt;
　ということで、広告収入を当てにして無料アプリとして公開するのではなく、有料アプリとしてに公開する方が何かと納得できるのではないかという体験者からの一つの見解でした。&lt;br /&gt;
　&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 12 May 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2024-05-12/app_advertising</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2024-05-12/app_advertising</guid>
        
        <category>cordova</category>
        
        <category>android</category>
        
        <category>coffeescript</category>
        
        <category>flutter</category>
        
        <category>google</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>アプリを非公開にする理由</title>
        <description>&lt;h3 id=&quot;広告停止されてても来る警告メール&quot;&gt;広告停止されてても来る警告メール&lt;/h3&gt;
&lt;p&gt;　2023年のgoogleの新しい規制（「2023年8月31日までにAndroid 13に対応していないアプリの更新を停止」）のため、対応が面倒なので自分で非公開にしたアプリも有りますが、それとは別に非公開にはしてないけど、一年ほど前からAdMobの広告表示が停止されているアプリも３つ（&lt;a href=&quot;https://play.google.com/store/apps/details?id=torishogi.io.github.happyclam&quot;&gt;禽将棋アプリ&lt;/a&gt;、&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi33.io.github.happyclam&quot;&gt;３三将棋アプリ&lt;/a&gt;、&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi77.io.github.happyclam&quot;&gt;７七将棋アプリ&lt;/a&gt;）あって、何度も警告メールが来るのでアプリを非公開にすることにしました。既に広告停止されてるのでAdMobには関係ないと思うのですが、そうはいかないようです。&lt;br /&gt;
　この記事を読んでいる方の中にも、前述の３つのアプリを使っていて広告が表示されなくなったことに気づいていた人はいると思います。ユーザーから見れば「広告停止されて収益にならないから非公開にしたのだろう」と思う人もいると思うので、そうではないことを書いておこうと思います。&lt;/p&gt;

&lt;h3 id=&quot;admobからのメールの内容&quot;&gt;AdMobからのメールの内容&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;問題の概要
アプリ ID: torishogi.io.github.happyclam
必要なご対応: アプリに変更を加えてポリシー違反を解消された場合、あるいは違反判定が誤りと思われる場合は、AdMob ポリシー センターにアクセスして違反を確認し、再審査のリクエストを行ってください。
同様の事態が再発することを避けるため、他のアプリケーションについても AdMob プログラム ポリシーの遵守状況を確認することをおすすめいたします。また、Google AdMob チームは、違反が繰り返される場合にいつでもアカウントを無効化できる権利を有している点に注意してください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　上記は&lt;ruby&gt;禽将棋&lt;rt&gt;とりしょうぎ&lt;/rt&gt;&lt;/ruby&gt;アプリに対する文面ですが、禽将棋アプリはもう数年前から更新していなくてその当時は問題なかったのに一年ほど前からAdMobのポリシーが変更になったようで&lt;strong&gt;ポリシー違反&lt;/strong&gt;として広告が表示されなくなっていました。広告が表示されないのでこちらにはお金は一銭も入ってこないのですが、広告無しの方がユーザーは喜ぶだろうし、アプリを使いたい人もいるだろうと思い放置していた訳です。&lt;/p&gt;

&lt;h3 id=&quot;とにかく時間と手間を取られる&quot;&gt;とにかく時間と手間を取られる&lt;/h3&gt;
&lt;p&gt;　こちらとしては「広告停止にしたんだからそれでいいんじゃないの？」とAdMobに言いたいのですが、「Google AdMob チームは、違反が繰り返される場合にいつでもアカウントを無効化できる権利を有している点に注意してください」という脅し文句が気になるところです。googleのアカウントが停止されるとgmailも使えなくなるし色々面倒なので対処することにしました。&lt;br /&gt;
　AdMob側に確認したいのですが、問い合わせのリンクを辿っても途中でエラーが出て問い合わせできません。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/admob_inquiry.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/admob_inquiry.png&quot; alt=&quot;AdMob問い合わせ画面&quot; width=&quot;320&quot; height=&quot;240&quot; title=&quot;AdMob問い合わせ画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　そこで取り敢えず&lt;a href=&quot;https://play.google.com/store/apps/details?id=torishogi.io.github.happyclam&quot;&gt;禽将棋アプリ&lt;/a&gt;の広告ユニットを削除してgoogle-consoleで非公開設定にし、&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi33.io.github.happyclam&quot;&gt;３三将棋アプリ&lt;/a&gt;をgoogle-consoleで非公開設定にしてAdMobに審査を出したところ、&lt;a href=&quot;https://play.google.com/store/apps/details?id=torishogi.io.github.happyclam&quot;&gt;禽将棋アプリ&lt;/a&gt;だけ警告が消えました。どうやら広告ユニットを削除すればよかったようです。それが分かったので&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi33.io.github.happyclam&quot;&gt;３三将棋アプリ&lt;/a&gt;を再度公開しようとすると、今度はgoogle側の前述の規制に引っかかって再公開は出来なくなりました。&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi77.io.github.happyclam&quot;&gt;７七将棋アプリ&lt;/a&gt;に関しては広告ユニットだけを削除して公開状態を維持しています。&lt;br /&gt;
　Amazonで公開している&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;も似たような状況でどう対応したらいいのかよく分からず更新したくても出来ない状況です。とにかく時間と手間を取られるんですよねぇ。大昔にAppleにもお金払ってアプリを公開した経験もありますが、Appleの要求に答える運用コストに嫌気が差して一年で止めた経験も有ります。&lt;/p&gt;

&lt;h3 id=&quot;広告に金を掛けないアプリを排除したい&quot;&gt;広告に金を掛けないアプリを排除したい？&lt;/h3&gt;
&lt;p&gt;　前回の記事で書いたように、&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;に関してはgoogleが一方的に削除したのですが、そんなことばかりしていると開発者からの反発もあるので、開発者自らが非公開にするように持っていこうという意志をひしひしと感じます。自分はお金を払ってアプリの宣伝とかはしていないので、おそらく広告宣伝業で金儲けしているgoogleとしては気に入らないでしょう。よく有料の「google広告」へのお誘いメールが来ますが、自分が「google広告」のユーザーだったら対応も変わってくるのでしょうか？:sweat_smile:GooglePlayのサイトでアプリが検索上位に来るようにしたければ、ユーザーに支持されるアプリかどうかとは関係なく広告宣伝費をかけなければならないシステムになっているのは事実なので、そのような勘繰りをされても仕方ないでしょう。&lt;br /&gt;
　それにしてもgoogle広告を使って収益を上げることに成功した話も聞きますが、googleに支払う費用もバカにならないので結局利益は上がっていないというような話も聞きます。個人アプリ開発者の本音を聞いてみたいところです。googleとしてはいろいろな規制を設けるのはあくまでも「ユーザーのため」という建前で通しているようです。今回の件にしても広告ユニットを削除しただけで問題はなくなったのだから、無料アプリだからとか広告に金をかけないから冷遇しているわけではないとは言えそうです（規制の変更のたびに開発者は手間と時間を取られますが…）。自分からすれば「なかなか尻尾を出しやがらないなぁ」って感じですけど:sweat_smile:それに&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;の削除に関しては今でも納得していませんけど…。&lt;/p&gt;

&lt;h3 id=&quot;有料アプリとして公開すべきだった&quot;&gt;有料アプリとして公開すべきだった？&lt;/h3&gt;
&lt;p&gt;　今にして思えば、たとえ僅かな料金（100円とか）であっても有料にして広告表示無しにすべきだったかなぁとも思うのですが、どちらが良かったかは分かりません。ただ、現状ではGooglePlayの規約で、既に無料アプリとして公開されているアプリを有料に変更することは出来ないようなので、有料アプリにしたければ新規アプリとして作成しなければなりません。でも、&lt;a href=&quot;https://forest.watch.impress.co.jp/docs/serial/yajiuma/1546061.html&quot;&gt;前回の記事でも紹介したニュース&lt;/a&gt;のように個人が新規でGooglePlayアプリを公開するのは非常にハードルが高そうです。なので、それだけが理由ではありません（開発も大変だし…）が、当ブログで５五将棋アプリの思考ルーチンをC++で書き直していつかリリースしたいと書いてました（有料にしたかった）が諦めることにしました。&lt;a href=&quot;https://forest.watch.impress.co.jp/docs/serial/yajiuma/1546061.html&quot;&gt;あのニュース&lt;/a&gt;でアプリ公開を諦めた個人開発者は多いのではないでしょうか:cry:Android自体はOSSなのだからgoogle以外の配信プラットフォームが出てきてもよさそうな気もしますが、現実には出てこないでしょうね。&lt;br /&gt;
　結果的に非公開になった&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi33.io.github.happyclam&quot;&gt;３三将棋アプリ&lt;/a&gt;は近いうちにPWAとして公開するかもしれません。&lt;a href=&quot;https://play.google.com/store/apps/details?id=torishogi.io.github.happyclam&quot;&gt;禽将棋アプリ&lt;/a&gt;に関しては自分のアプリよりAIの出来がいい&lt;a href=&quot;https://www.pychess.org/variants/torishogi&quot;&gt;代替サイト&lt;/a&gt;が既に存在するので、非公開のまま放置しようと思っています。&lt;br /&gt;
　以上、今回はアプリユーザーと当ブログへ寄付してくださった方への現状報告でした。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 04 May 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2024-05-04/app_private</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2024-05-04/app_private</guid>
        
        <category>cordova</category>
        
        <category>android</category>
        
        <category>coffeescript</category>
        
        <category>google</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>チェスAIとテスト駆動開発</title>
        <description>&lt;h3 id=&quot;ステイルメイトという特殊なルール&quot;&gt;ステイルメイトという特殊なルール&lt;/h3&gt;
&lt;p&gt;　以前の記事（&lt;a href=&quot;/software/2019-10-27/stalemate&quot;&gt;「将棋の評価関数とチェスの評価関数-1」&lt;/a&gt;、&lt;a href=&quot;/software/2019-11-02/stalemate2&quot;&gt;「将棋の評価関数とチェスの評価関数-2」&lt;/a&gt;、&lt;a href=&quot;/software/2019-11-09/stalemate3&quot;&gt;「将棋の評価関数とチェスの評価関数-3」&lt;/a&gt;）で自作の将棋AIをチェスAIに書き換える作業をしようとして、チェスのステイルメイトという特殊なルールに対応するために将棋AIを書き換える必要が出てきたことを書きましたが、分かりづらかったと思うので実際の開発の過程でどういう作業が必要になったか、辿った経緯をもう少し詳しく書こうと思います。&lt;br /&gt;
　そしてこの開発を通じて、テスト駆動開発という開発手法の有用性を身を以て感じたということを書いてみます。&lt;/p&gt;

&lt;h3 id=&quot;２種類の詰み判定ゲーム終了判定メソッド&quot;&gt;２種類の詰み判定（ゲーム終了判定）メソッド&lt;/h3&gt;
&lt;p&gt;　詰み判定（ゲーム終了判定）のやり方が２通りあって、チェスのステイルメイトのルールに対応するにはやり方を変えなければならなかったということは&lt;a href=&quot;/software/2019-10-27/stalemate&quot;&gt;以前の記事&lt;/a&gt;に書いたとおりですが、なぜ「相手玉を取ったらゲーム終了」という将棋では問題がなかった方法を、チェスだと変える必要が出てきたのでしょうか。&lt;br /&gt;
　ゲームの局面（ゲーム木）を辿っていって（先読みしていって）、先手が着手したAという局面に行き着いたとします。その局面から後手の手番でまたB1、B2、B3…と幾つもの局面が枝分かれしていくわけですが、その後手の着手したBの全ての局面でもう一手先のCの局面で相手玉（後手玉）を取ることが出来ることが分かって初めて評価値が最大値（先手勝ち）になる訳ですが、この相手玉を取ることが出来ると判明したCの局面の中には後手が非合法手を着手したケースも混じっているわけです。非合法手というのは角の効き筋を止めていた味方の駒を動かしたケース（王手放置）や、後手玉が先手の駒の効いている場所に動いたケース（自爆）です。将棋なら合法手であっても非合法手であっても、後手玉を取ってしまえばいいのでCの局面で先手勝ちの評価は変わりません。しかし、チェスの場合はBの局面で非合法手しか着手できなかった場合は引き分け（ステイルメイト）と判定しなければなりません。将棋では局面Bで選んだ後手の手が合法手だろうが非合法手だろうが、Cの局面で先手が玉を取れれば先手勝ちと判断出来るのに対して、チェスの場合はBの局面で非合法手しかない場合はステイルメイト、合法手と非合法手が混じっている場合（＝合法手は存在するけど後手玉が取られる）は先手の勝ちと場合分けする必要があるということです。つまり、局面Bから先読みして後手玉が取れるから先手勝ちと判断することは出来ないので、一手先読みするのではなく局面Bの段階で手番と駒の効きの情報を使って後手に非合法手しか存在しない（ステイルメイト）かどうかを判断する必要があります。と言うことでチェスではプログラムを書き換える必要がありました。&lt;br /&gt;
　将棋の場合は「相手玉を取ったらゲーム終了」とするやり方と「手番と局面情報からゲーム終了判定する」やり方、どちらのやり方を採用しても対応できるので、将棋のソースコードを使って比較してみます。&lt;br /&gt;
　現在&lt;a href=&quot;https://github.com/happyclam/shogi33simple&quot;&gt;github&lt;/a&gt;に公開している３三将棋（簡易版）の詰み判定メソッド(check_tumiメソッド)は以下のようになっています。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    check_tumi = (board) -&amp;gt;
        first = 0; second = 0
        kings = (v for v in board.pieces when v.kind() == &apos;Ou&apos; &amp;amp;&amp;amp; v.turn == Const.FIRST)
        switch kings.length
            when 2
                return Const.MAX_VALUE
            when 0
                return Const.MIN_VALUE
            else
                for v in board.pieces
                    first += v.omomi() if v.turn == Const.FIRST
                    second += v.omomi() if v.turn == Const.SECOND
                return (first - second)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　先手の玉が２枚あれば先手が勝ちの評価値、０枚なら後手の勝ちの評価値を返して、それ以外は局面の静的評価値を返してゲームを続行します。&lt;br /&gt;
　つまり玉が取られたかどうかでゲームの終了判定をしています。&lt;br /&gt;
　一方で３三将棋を除く将棋関連アプリとチェスアプリでは以下のようになっています。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    check_tumi: (turn, utifudume_flg = null) -&amp;gt;
        #：
        #　前処理省略        
        #：        
        
        # 先手が王手掛かっていて指したのが先手なら後手勝ち
        if f_oute &amp;amp;&amp;amp; turn == Const.FIRST
            return [true, Const.MIN_VALUE]
        # 後手が王手掛かっていて指したのが後手なら先手勝ち
        else if s_oute &amp;amp;&amp;amp; turn == Const.SECOND
            return [true, Const.MAX_VALUE]
        # 先手玉が動けなくて王手が掛かっていたら後手勝ち
        else if f_canmove == false &amp;amp;&amp;amp; f_oute
            # 後手が王手放置していて指したのが後手なら先手勝ち
            if s_oute &amp;amp;&amp;amp; turn == Const.SECOND
                return [true, Const.MAX_VALUE]
            else if utifudume_flg
                return [true, Const.UTIFUDUME]
            else
                return [true, Const.CHECKMATE]
        # 後手玉が動けなくて王手が掛かっていたら先手勝ち
        else if s_canmove == false &amp;amp;&amp;amp; s_oute
            # 先手が王手放置していて指したのが先手なら後手勝ち
            if f_oute &amp;amp;&amp;amp; turn == Const.FIRST
                return [true, Const.MIN_VALUE]
            else if utifudume_flg
                return [true, Const.UTIFUDUME]
            else
                return [true, Const.CHECKMATE]
        # 上記条件に当てはまらなければ、ゲーム継続で評価値を返す
        for v in @pieces
            first += v.omomi() if v.turn == Const.FIRST
            second += v.omomi() if v.turn == Const.SECOND
        return [false, (first - second)]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;　チェスの場合はこのソースに加えてステイルメイトのケース（else if文）を追加しており、打ち歩詰めのif文はありません、でもその他の部分は将棋と同じです。&lt;br /&gt;
　現在の手番と局面の情報だけを使ってゲーム終了したかを判断し、ゲーム終了していなければ局面の静的評価値を返します。玉を取る一手前の局面でゲームの終了判定をしようとすると前述のソースとはかなり違ってくることが分かると思います。それにしても10個足らずの条件分岐（if文）で済んだのは予想外に少なかったなぁと思ってます。&lt;br /&gt;
　実際の開発の順番としては、まず将棋（３三将棋アプリ以外）の詰み判定（ゲーム終了判定）を書き換えてテストした後、それをチェスアプリに適応しました。なぜ３三将棋は変更しなかったかについては&lt;a href=&quot;/software/2019-11-09/stalemate3&quot;&gt;以前の記事&lt;/a&gt;で書いたように局面の評価より深く読むことに注力したかったからです。&lt;br /&gt;
　もうアプリをリリースしてから何年も経つので、このコード自体には問題（バグ）はないと思っています。ただ、ここにソースを載せていないステイルメイトの判定部分に関しては、まだちょっと不安があったりするのですが、それに関しては別の記事を書くかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;演繹法と帰納法&quot;&gt;演繹法と帰納法&lt;/h3&gt;
&lt;p&gt;　将棋というゲームが終了したかどうかを判断する場合、一番単純なやり方としては、頭金で詰んだケース、吊るし桂で詰んだケース等、詰みの形を一つ一つ定義して行き、それ以外はゲーム継続とするやり方を思いつきますが、そんなことをしていけばif文が幾つになるか見当もつかない程大変な作業を強いられます。とても人間が出来る作業ではないと思います。でも、機械学習型のAIの場合はその作業をやっているわけです。一つ一つの詰みのケースを学習して帰納的に法則性を見出してゲームが終了したかどうかを判断するわけです。&lt;br /&gt;
　では、自分は人間なんだからもっと演繹的にゲーム終了の条件を定義してみようと思って、上の10個足らずのif文からなるゲーム終了条件をパッと思いつく人がいるでしょうか？頭金や吊るし桂の詰み形をどんどん抽象化していき、頭の中だけでその条件文を構成できる人は少ないと思います。自分の場合もいきなり上で書いた10個足らずの条件文を思いついたわけではなく、一つ一つテストしていきながら条件を付け加えたり削除したりを繰り返しながら所謂スパイラルモデルで作り上げた感じです。決してウォーターフォールモデルのように上から下に流れ作業のように開発が進んだわけではありません。徐々に抽象度を上げていくという感じではなく、アイデアを出しては試していくの繰り返しという感じでした。将棋の世界に&lt;strong&gt;直感精読&lt;/strong&gt;という言葉がありますが、この言葉プログラミングにも通じると思います。論理的思考というのは&lt;strong&gt;精読&lt;/strong&gt;の部分に当たりますが、アイデアを出す&lt;strong&gt;直感&lt;/strong&gt;の部分が結構大事だと思っています。将棋では&lt;strong&gt;「見えないと読めない」&lt;/strong&gt;なんて言葉もありますよね。いくら局面を先に読んでいく力があっても、手が見えないと好手は指せません。&lt;/p&gt;

&lt;h3 id=&quot;プログラミングは設計行為&quot;&gt;プログラミングは設計行為&lt;/h3&gt;
&lt;p&gt;　TDD（テスト駆動開発）とはアジャイル開発における一つの開発手法とされていて、全開発工程の後半にテスト工程を設けるウォータフォールモデルとは全然違う代物です。まずテストを書いて実行し、リファクタリングしてまたテストの繰り返しです。ソフトウェア開発に於いて、巷ではいきなりコードを書き出す人を批判する人がいますが、コードを書きながら設計しているので極々自然な成り行きだと思います。業務に精通しているから設計書を書ける訳ではなく、将棋に精通しているからと言ってコンピュータへの指示書をいきなり書ける訳でもないのです。やってみなければ分からないという部分を、効率よく実装する手段としてTDDは非常に優れていると思います。誤解のないように付け加えておきますが、将棋のプログラムを作る際は、将棋に精通している人の方がそうじゃない人よりも効率良く作れるとは思っています。そういう人でも試行錯誤が必要だってことです。&lt;br /&gt;
　ただテスト駆動開発と言っても、先程の例で言えば、頭金の詰み判定のテストを書く、吊るし桂の詰み判定のテストを書くというのは設計行為とは言えないでしょう。これは所謂普通のテストであって、TDD（テスト駆動開発）とはもっと上流工程にテストを活用していくと言うことだと思います。メディアや情報誌に振り回されるのではなく、実体験としてアジャイル開発をやってみる人が増えることを望んでます。&lt;br /&gt;
　それとTDDは、効率よく設計・開発を進められるだけではなく、何か新しい機能を追加する際にも「以前は上手く動いていたのに、おかしくなった〜」という所謂デグレード（リグレッション）の防止にも書き溜めたテストが役立ちます。実際に将棋関連アプリを「相手玉を取ったらゲーム終了」というロジックで作っていたテストを、「手番と局面情報からゲーム終了判定する」ロジックに書き換えた後も、書き換える前に使っていたテストスクリプトをそのまま動作確認に使えました。&lt;br /&gt;
　&lt;a href=&quot;/project/2020-08-10/mancalanuts&quot;&gt;現在リリース中のマンカラアプリ&lt;/a&gt;は結構長い期間バグのあるバージョンがリリースされていたのですが、これはDartからC++に書き換える時にテストコードを省略したために起きたことです:sweat_smile:現在は&lt;a href=&quot;http://opencv.jp/googletestdocs/primer.html#primer-where-to-go&quot;&gt;GoogleTest&lt;/a&gt;を導入して、C++でもテストコードを書いているので今後は大丈夫だと思います:sweat_smile:&lt;/p&gt;

&lt;h3 id=&quot;スマホアプリについて&quot;&gt;スマホアプリについて&lt;/h3&gt;
&lt;p&gt;　もう何年も前の話ですが、&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;現在Amazonで公開しているチェスアプリ&lt;/a&gt;は以前はGoogle Playにも公開していましたが、よく分からない理由でGoogleから削除されました。また、&lt;a href=&quot;https://play.google.com/store/apps/details?id=chess66.io.github.happyclam&quot;&gt;現在Google Playで公開しているミニチェスアプリ&lt;/a&gt;は、これもよく分からない理由でAmazonの審査で落とされました。&lt;br /&gt;
　去年は&lt;a href=&quot;https://forest.watch.impress.co.jp/docs/serial/yajiuma/1546061.html&quot;&gt;こういうニュース&lt;/a&gt;もありましたし、AmazonもGoogleもAppleもアプリ公開のプラットフォーム利用に対する規制が数年前よりさらに強くなってきてる気がするので、全部PWA（Progressive Web Apps）化しようかなんて考えていますが、スマホアプリでさえそれほど多くの利用者がいるわけでもないのに、PWA化してもユーザーが増えることはないでしょう。&lt;br /&gt;
　でも自分のアプリの多くはJavaScript製なのでPWA化＝ソース公開にもなるのでニーズがあるかもしれませんし、PWA化すればスマホよりハイスペックなPCで動かせるのでソースを書き換えて読みの深さの数値を変えたりするとスマホより深く読めるようになったりします。もちろんユーザーがダウンロードして自分用に作り変えることも出来ます。自分でも少し試したりしたのですが、PWA化したらその辺りの話も書いてみようと思います。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 07 Apr 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/software/2024-04-07/tdd</link>
        <guid isPermaLink="true">https://happyclam.github.io/software/2024-04-07/tdd</guid>
        
        <category>coffeescript</category>
        
        <category>javascript</category>
        
        <category>shogi</category>
        
        <category>chess</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Fuji Stroll、さっそくカスタマイズ</title>
        <description>&lt;h3 id=&quot;予定通りブルホーンに&quot;&gt;予定通りブルホーンに&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/miscellaneous/2024-03-10/stroll01&quot;&gt;前回の記事&lt;/a&gt;で固定ギアに初めて乗って転倒したことを書きましたが、家で自転車をよく見るとハンドルグリップが破けてハンドルバーが一部剥き出しになってました。いずれはブルホーンハンドルに交換するつもりだったのですが、丁度いい機会だから早速交換したのでその顛末を書きます。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
&lt;div style=&quot;float:left; margin: 0px 0px 0px&quot;&gt;
&lt;a href=&quot;/images/palm.png&quot;&gt;&lt;img width=&quot;120&quot; height=&quot;160&quot; src=&quot;https://happyclam.github.io/images/palm.png&quot; alt=&quot;擦り傷&quot; title=&quot;擦り傷&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div style=&quot;float:left; margin: 0px 5px 0px&quot;&gt;
&lt;a href=&quot;/images/glove.png&quot;&gt;&lt;img width=&quot;120&quot; height=&quot;160&quot; src=&quot;https://happyclam.github.io/images/glove.png&quot; alt=&quot;血が滲んだグローブ&quot; title=&quot;血が滲んだグローブ&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/images/bargrip.png&quot;&gt;&lt;img width=&quot;120&quot; height=&quot;160&quot; src=&quot;https://happyclam.github.io/images/bargrip.png&quot; alt=&quot;破れたハンドルバーグリップ&quot; title=&quot;破れたハンドルバーグリップ&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;left&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;自転車購入時に付けたもの&quot;&gt;自転車購入時に付けたもの&lt;/h3&gt;
&lt;p&gt;　FujiのStrollはペダルはデフォルトで付属していますので、あとは購入時にRITEWAYのキックスタンドとFuji製の固定ギア(17T)を付けてもらいました。Strollはチェーンステイ部分に最初からキックスタンド取り付け用の穴があいているので、それを利用しない手はないですね。固定ギア（コグ）の方はネジ切り式ではないようで、Amazonとかでコグを買って自分で交換するようなことは出来ない？みたいです。ロード用のスプロケット外す工具なんかとも少し違う工具が要るみたいだし、自分でメンテする気はなくなりました。&lt;br /&gt;
　コグの歯数は15Tから18Tまで選べるようですが軽めの17Tにしました。スキッドポイントが多い点でも奇数の17Tが良いみたいですが、軽めのギアでどれぐらい坂道を登れるのか、どれぐらいの山に登ることが出来るのかに興味があったので軽めにしたのですが、街なかにある歩道橋を登ってみた感じでは、とても山を登るなんて無理だなぁって感想です。でも、いつかは試してみると思います:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stroll_stand.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stroll_stand.png&quot; alt=&quot;RITEWAY キックスタンド&quot; width=&quot;240&quot; height=&quot;320&quot; title=&quot;キックスタンド&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;フラットバーが嫌なわけではないけど&quot;&gt;フラットバーが嫌なわけではないけど&lt;/h3&gt;
&lt;p&gt;　購入時はStrollに元から付いているフラットバーハンドルもカッコイイと思っていたのですが、京都で購入して大阪までフリーギアのまま乗って帰ってきた（約30km）時に、なぜか手のひらが痛くなりました。昔IDIOM2をフラットバーで乗っていた時も手のひらが痛くなった記憶があるので、もしかしたら肩幅より広く手を広げて前傾になるのは手のひら（人差し指の付け根辺り）への負荷が大きくなるんじゃないか？なんて思ってます。上の写真の手のひらを負傷した時も、どこかに打ち付けて負傷したのではなく、グローブとハンドルグリップのブツブツとの摩擦で擦りむけたのだと思います。なので買ったばかりの自転車ですが、480mmという長いフラットバーは止めて交換することにしました。&lt;br /&gt;
　購入したのは&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/3a3efda0.4effcd55.3a3efda1.db6e6e2e/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fspoke-seya%2Fpa-nitto-4582350836073%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;NITTOのRB-006(380mm)&lt;/a&gt;ショートブルホーンハンドルで、シンプルでわずかに両肩下がりなのが気に入りました。ロードもミニベロも380mm使ってたし、幅広のハンドルより自分には合ってそうで、大阪市内まで出かけてトータル50km程乗りましたが手は痛くならず快適でした。&lt;/p&gt;

&lt;h3 id=&quot;ブルホーンはトラック競技が発祥&quot;&gt;ブルホーンはトラック競技が発祥&lt;/h3&gt;
&lt;p&gt;　諸説あるようですが、ブルホーンハンドルはトラック競技から生まれたそうです。トラック内で使用される自転車は、誰かが急ブレーキを掛けたりすると危険なのでブレーキは付いていませんが、ブルホーンハンドルも本来ブレーキを使わない人達が使いだしたそうです。&lt;br /&gt;
　私は&lt;a href=&quot;/miscellaneous/2020-05-16/bicycle01&quot;&gt;以前の記事&lt;/a&gt;でブルホーンハンドルの角の部分を握りながらフルブレーキ出来るようにIDIOM2をカスタムしたことを書きましたが、そういう使い方のほうが邪道だったわけですね。街乗りに使うのならこのStrollも角の部分にブレーキを移動した方が使いやすいかもしれません（ブレーキレバーの交換が必要）が、とりあえずピスト仕様で今のままハンドルバー部分に置いて使おうと思います。そしてなるべくブレーキを使わなくて済むぐらいピストバイクを乗りこなせるようになれるのが理想です。でも実際街なかでピストに乗っている人によると、スキッドはブレーキの代わりにはならないしブレーキも頻繁に使うそうなのであくまでも理想ですね。&lt;br /&gt;
　あと、ブルホーンバーの角の部分を握っていたほうがスキッドもやり易いそうなので、主に河川敷の自転車道などの安全なところで練習しようと思ってます。&lt;/p&gt;

&lt;h3 id=&quot;スレッドステムはハンドル交換が面倒&quot;&gt;スレッドステムはハンドル交換が面倒&lt;/h3&gt;
&lt;p&gt;　「スレッドステム ハンドル 通らない」とかで検索すると苦労話がいろいろ出てきますが、ロード系のアヘッドステムと違ってスレッドステムの場合はハンドル径が合っていても取り付けできないハンドルがあるようです。事前にそのことを知っていたのでカーブが少なくてシンプルなハンドルを選んだのですが、それでも初めてのスレッドステムのハンドル交換は手間取りました。&lt;br /&gt;
　まずハンドルの中心部までステムに差し込みます。中心部（クランプ径25.4φ）は太くなっているのでハンドルを押し込んでもステムの穴に入りません。下の写真のようにマイナスドライバーをステムの開口部に差し込みながら、梃子の原理を使ってグイッとステムの穴を広げてハンドルを回しながら押し込んでいきます。この時ハンドルをグリグリと左右に回すのではなく、回しやすい方向がある（たまたま？）と思いますので一方向にグルグルと回転させながら差し込むようにするとゆっくり入っていきました。ハンドル中心部にギザギザの滑り止めの溝が切ってありますが、この溝は一方向に引っかかるようになっている？みたいで、グルグルと同じ方向に回して押し込むのがコツみたいです。私は最初グリグリと回す方向を変えながら押し込んだせいで写真のようにNITTOのロゴの周りに細かな傷が付いてしまいました。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
&lt;div style=&quot;float:left; margin: 0px 0px 0px&quot;&gt;
&lt;a href=&quot;/images/stem00.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/stem00.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div style=&quot;float:left; margin: 0px 5px 0px&quot;&gt;
&lt;a href=&quot;/images/stem01.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/stem01.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/images/stem02.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/stem02.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;left&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;やはりストラップも付けてみる&quot;&gt;やはりストラップも付けてみる&lt;/h3&gt;
&lt;p&gt;　ストラップ付ける気はなかったのですが長い下りを走っている時に、ブレーキを使わずに足の力で減速（エンジンブレーキみたいなものですね）してみようと思い足を踏ん張ろうとするのですが、ペダルの力に負けて全然出来ません。そして、ペダルが回る力に負けて足からペダルが外れて、片足が宙に浮いたままペダルがグルグルと回る状態になります。ブレーキがあるので減速してまたペダルに足を乗せることは出来るのですが、片足しかペダルに乗っていない状態ってのは非常に不安定で、その状態の時に道路に段差でもあれば転倒するかもしれません。これは危険だなぁと感じたのでこれからはストラップでペダルに足を固定することにしました。トリックをするためだけではなく、ピストに乗るときはペダルに足を固定していた方が安全なのかもしれません。ペダルストラップ使えば減速もやり易くなるでしょうし、様子見ながら慣れていこうと思います。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/strap.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/strap.png&quot; alt=&quot;Wellgo W-8 ストラップ&quot; width=&quot;320&quot; height=&quot;240&quot; title=&quot;Wellgo W-8 ストラップ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　通販でペダルストラップ（&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/3a9f3c76.2839d84a.3a9f3c77.bedae183/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fmcycle%2Ff4580131470645%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;Wellgoの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W-8&lt;/code&gt;&lt;/a&gt;）を購入したのですが、Strollに付いていたペダル（Wellgoの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C128DJ&lt;/code&gt;）には付けられないようです。ストラップを通す穴が片側にしかありませんし、その穴も小さすぎてストラップが通りません:cry:自転車購入時に店の人に確認したときは「ストラップ付けられます」と返事をもらってたのですが、普通のママチャリ自転車屋さんだったのでよく分かってなかったのかもしれません。&lt;br /&gt;
　仕方がないので&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/3a9f3a95.dd7add01.3a9f3a96.316d307a/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fzitensyadepo%2Fmks-sylvan-gordito-sv%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MKS(三ヶ島製作所)SYLVAN Gordito&lt;/code&gt;&lt;/a&gt;と&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/1b4d49cd.6bbf085f.1b4d49ce.c5e66119/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Faris%2Fmks-spin-2%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MKS(三ヶ島製作所)蹴返しパーツ SPIN-2(スピン2)&lt;/code&gt;&lt;/a&gt;を購入して自分で付けました。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
&lt;div style=&quot;float:left; margin: 0px 0px 0px&quot;&gt;
&lt;a href=&quot;/images/wellgo.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/wellgo.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div style=&quot;float:left; margin: 0px 5px 0px&quot;&gt;
&lt;a href=&quot;/images/gordito.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/gordito.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/images/grease.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/grease.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　グレードアップしていくのは嬉しいのですが、自転車って凝りだすと意外とお金がかかるんですよねぇ:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:240px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/spin2.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/spin2.png&quot; alt=&quot;Gordito &amp;amp; SPIN-2&quot; width=&quot;240&quot; height=&quot;320&quot; title=&quot;Gordito &amp;amp; SPIN-2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;いずれはリアバスケットも付ける予定&quot;&gt;いずれはリアバスケットも付ける予定&lt;/h3&gt;
&lt;p&gt;　現在買い物に使っているマークローザに何かトラブルが起きたら引退させて、このStrollにリアバスケットを付けて買い物に使おうと思ってます。リアバスケットは&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/3a468d0b.3450311a.3a468d0c.2e57a6ed/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fauc-cycle-parts%2Fra2101-4%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;RITEWAY(ライトウェイ) のリアバスケット&lt;/a&gt;を予定しています。ネットで調べるとStrollへの取り付け実績もあるようなので大丈夫でしょう。リアバスケット付ける頃にはスタンディングやスキッドを自在に出来るようになっていればいいなぁと思ってます。買い物用のカゴ付き実用車でトリックを決めるのもアリだと思います:smile:&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stroll_custom.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stroll_custom.png&quot; alt=&quot;STROLL Custom&quot; width=&quot;320&quot; height=&quot;240&quot; title=&quot;Stroll Custom&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stroll_custom2.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stroll_custom2.png&quot; alt=&quot;STROLL Custom&quot; width=&quot;240&quot; height=&quot;320&quot; title=&quot;Stroll Custom&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 16 Mar 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2024-03-16/stroll02</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2024-03-16/stroll02</guid>
        
        <category>bicycle</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>固定ギア（ピスト）に乗ってみたい</title>
        <description>&lt;h3 id=&quot;買い物用ママチャリの代替車&quot;&gt;買い物用ママチャリの代替車&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/miscellaneous/2021-12-05/minivelo&quot;&gt;以前の記事&lt;/a&gt;でクロスバイクを買うつもりだと書きましたが、「IDIOM2で登れない坂」の件は、結局スプロケットを交換（12-25Tから11-28Tに交換）することで解決したので新しい自転車の購買欲は失せていました。&lt;br /&gt;
　でも今度は、現在買い物に使っているママチャリ（ブリジストンのマークローザ）が変速機が壊れたまま数年使っていて、そろそろ代替車を買おうかと考えているうちに変速機使ってないのならシングルギアでいいじゃないか？となり、シングルギアなら一度固定ギア（ピスト）を試してみるのもいいかも？となり、youtubeでピストの動画を見ていたらピストに乗りたくなってきたので買うことにしました。&lt;br /&gt;
　私がピスト乗ってみたいと思うきっかけとなった動画は、例えば以下のような動画です。自分が全く知らなかった世界です。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/EtahPk4PfmY?si=nqFVsfMODZ-qAAox&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;自転車買うときはサイズが大事&quot;&gt;自転車買うときはサイズが大事&lt;/h3&gt;
&lt;p&gt;　今使っているマークローザは15年前に買ったもので年式によって違うのですが、フレームサイズが確か450mmのものです。スレッドステムを交換してハンドルを下げてカスタムしているのですが、最近まで乗っていた470mmのロードバイクよりサイズ的には楽で自分に合ってるなぁと感じていました。ピストを買うと決めても何を買うかとなったときに、自分の場合は小さなフレームサイズが用意されている車種に限定されます。&lt;br /&gt;
　最初は今のママチャリと同じ26インチタイヤで尚且つホリゾンタルフレームの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TOKYOBIKEのMONO&lt;/code&gt;が候補になったのですが、実物を見てみると細くて小さなフレームで26インチだとなんだか子ども用の自転車に見えるんですよねぇ。700Cの自転車にすれば今持っているタイヤチューブのストックも流用出来るし26インチと違ってタイヤの種類も色々選べるので、ホリゾンタルフレームには惹かれるものの思い直して700Cのバイクから候補を探すことにしました。&lt;br /&gt;
　次に見つけた候補&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CinelliのTutto&lt;/code&gt;は小さいサイズがありませんし、460mmサイズがある&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All CityのBig Block&lt;/code&gt;もいいなぁと思ったのですが、固定ギアを試してみたい、買い物用に使いたいというだけの自分にはどちらも値段が高過ぎて買う気になれません。いずれリアキャリアを付けるつもりなのでフレームにダボ穴があることも条件です。ということで430mmサイズがある&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FujiのStroll&lt;/code&gt;に行き着きました。470mmのロードバイクが少し大きいと感じて、450mmで26インチタイヤのマークローザが楽だと感じていた自分には丁度いいサイズかなぁと思ってます。&lt;br /&gt;
　聞いた話では&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;股下長 - 250mm = シートポスト長(CC)&lt;/code&gt;になるフレームサイズがちょうど良いらしいです。自分の場合430mmのStorollだと若干小さめとなりますが、少し小さめのフレームの方が乗りやすいとも聞きます。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stroll_2023.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stroll_2023.png&quot; alt=&quot;STROLL 2023&quot; width=&quot;320&quot; height=&quot;240&quot; title=&quot;Stroll 2023&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;fuji-strollはフリップフロップハブ&quot;&gt;Fuji Strollはフリップフロップハブ&lt;/h3&gt;
&lt;p&gt;　上に挙げた候補の車種は全てフリップフロップというハブが採用されていて、２種類のコグを取り付けて後輪を外して向きをひっくり返して取り付ければ固定ギアとフリーギアを切り替えるなんて使い方が出来ます。自転車のカスタムをいろいろやりましたが、フリーギアしか触ったことがない自分はそういうハブが存在することも知りませんでした。自転車は奥が深いですねぇ、固定ギアとフリーギアを簡単に切り替えられると知ったことも固定ギアを試してみようと思った動機の一つです。固定ギアの自転車を買ってみて自分には合わないと感じた場合に、すぐに今まで使っていた自転車と同じフリーギアに戻せる点は購入の動機になりますよねぇ。FujiのStrollはデフォルトではフリーギアしか付いていませんが、このフリップフロップハブが採用されていることが購入の決め手になりました。あとは3000円程度の固定ギア（コグ）を購入するだけで済みます。&lt;/p&gt;

&lt;div style=&quot;width:400px; margin: 0 auto;&quot;&gt;
&lt;div style=&quot;float:left; margin: 0px 0px 0px&quot;&gt;
&lt;a href=&quot;/images/rench.png&quot;&gt;&lt;img width=&quot;120&quot; height=&quot;160&quot; src=&quot;https://happyclam.github.io/images/rench.png&quot; alt=&quot;15mmBox レンチ&quot; title=&quot;15mm Boxレンチ&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div style=&quot;float:left; margin: 0px 5px 0px&quot;&gt;
&lt;a href=&quot;/images/free_gear.png&quot;&gt;&lt;img width=&quot;120&quot; height=&quot;160&quot; src=&quot;https://happyclam.github.io/images/free_gear.png&quot; alt=&quot;フリーギア 16T&quot; title=&quot;フリーギア 16T&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/images/fixed_gear.png&quot;&gt;&lt;img width=&quot;120&quot; height=&quot;160&quot; src=&quot;https://happyclam.github.io/images/fixed_gear.png&quot; alt=&quot;固定ギア 17T&quot; title=&quot;固定ギア 17T&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;left&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;初乗車でいきなりピストの洗礼を受ける&quot;&gt;初乗車でいきなりピストの洗礼を受ける&lt;/h3&gt;
&lt;p&gt;　とりあえず購入時のフリーギアで河川敷まで行ってから固定ギアに切り替えて練習することにしました。固定ギアで走り出して特に問題は無さそうだなと、たぶん20Km/hぐらいスピード出していたと思いますが、止まろうとしたら右前方に投げ出される感じで転倒してしまいました:sweat_smile:&lt;br /&gt;
　何が起こったか分からないって感じでしたが、止まるために軽くブレーキを握って足の回転を止めたのでしょう、足を止めてもペダルは動き続けるので止めた足をペダルが持ち上げて前方にぶっ飛んだ感じです。どこで打撲したのか分からないのですが、グローブをしていたのに軽く手を擦りむいてハンドルも曲がってしまいました。ブレーキ掛けてもすぐに足の回転を止めてはいけません。頭では分かっていたつもりなんですが…。&lt;br /&gt;
　前輪を両足に挟んでハンドルの曲がりを直していると、通りがかった見知らぬおばちゃんが「大丈夫？」と声を掛けてきました、転倒現場を見られていたようです。「大丈夫です」と笑って答えておきましたが、固定ギアの自転車に乗ってるなんて想像もしてないであろうおばちゃんには「なんてドン臭い人だろう」と思われたことでしょう:sweat_smile:でも、車道で試さなくてよかったと思うとともに、今は転倒シーンを動画に残しておきたかったなぁなんて思ってます（自分が見たい）。みなさんもピスト初めて乗るときは車道は避けましょう。そして停車の感覚が身に付くまではスピードを出さないことですね。&lt;/p&gt;

&lt;h3 id=&quot;徐々に分かってきた&quot;&gt;徐々に分かってきた&lt;/h3&gt;
&lt;p&gt;　その後一時間ぐらい慎重に乗りながら、上り坂や下り坂を試してみたり&lt;strong&gt;クロス降り（左足をペダルに置いたまま左ペダルが上昇するタイミングで右足でフレームを跨いで降車）&lt;/strong&gt;と言われる降り方を練習してました。Youtubeで見たときは&lt;strong&gt;クロス降り&lt;/strong&gt;なんてすぐ出来ると思っていたのですが練習が必要でした。&lt;strong&gt;スキッド(後輪をスライドさせてブレーキング)&lt;/strong&gt;も最初は全く出来る気がしませんでしたが、ブレーキを使えばそれっぽいことが出来ると分かってきました。街なかでノーブレーキピストなんて言うものが存在するのだからブレーキは使わないものだと思っていたのですが、ペダルが足を持ち上げる力が予想以上に強くてとてもブレーキ無しではペダルを後方に踏むなんて自分には無理な気がしました。前輪ブレーキを使って減速すると同時にペダルを後方に踏んで後輪をズッズッーっと短く滑らせることは何回か出来ましたが、ブレーキを使っていては&lt;strong&gt;スキッド&lt;/strong&gt;とは言えないでしょうね:sweat_smile:もう少し固定ギアに慣れてペダルにストラップを付けて前足でペダルを持ち上げる動作も加えれば可能なのかもしれませんが、ビンディングとかストラップって、何か危ない気がするんですよねぇ。転倒した時も、もし足をペダルに固定していたら骨折してたかもしれないと思うと、怖いのでとりあえず今のところはストラップは使わないつもりです。でも使うとしたらトゥークリップやビンディングではなくストラップにしようと思ってます、一番簡単に足が抜けそうですし。&lt;/p&gt;

&lt;h3 id=&quot;ピストバイクは休めない&quot;&gt;ピストバイクは休めない&lt;/h3&gt;
&lt;p&gt;　とりあえず&lt;strong&gt;クロス降り&lt;/strong&gt;が出来るようになったので満足して帰ることにしました。&lt;strong&gt;クロス降り&lt;/strong&gt;気に入りました。ただ自転車を降りるというだけの動作なのに、フリーギアとは違った難しさや面白さがあります。私もそうですが、ピストバイク乗る人は実用性よりも、こういう難しさを克服したときの達成感とか未知なものへの好奇心・探究心を満たすことを優先しているのではないでしょうか？&lt;br /&gt;
　帰路につく時にフリーギアに戻すかどうか迷いましたが、フリーギアに戻してそれに慣れてしまうと次固定ギアにした時に今回の二の舞になるかもしれないし、フリーギアに戻すと一回固定ギアを体験しただけで音を上げてピストを諦めてしまうような感じでなんだか悔しい気がしたので、しばらく固定ギアに慣れるためにそのまま固定ギアで帰路につきました。この「出来ないと悔しい」と言う感じ、プログラミングに通じるものがあると思います。&lt;br /&gt;
　家までの道中なにが辛かったかといえばピストバイクは一瞬たりとも休めないってことです。フリーギアなら足が疲れたと感じたときや、おしりが少し痛いと感じた時に漕ぐのを止めてペダルの上で立ち上がりサドルからおしりを離して惰性で進むことがあると思いますが、それが出来ないのが一番つらかったです。常にペダルを回していなければならず、おしりをサドルから離したければ立ち漕ぎを強いられ汗で密着したパンツを摘んでシワを直そうと思ったら片手離して立ち漕ぎを継続しなければなりません（そんなの無理）。河川敷から家までわずか数キロなのに２回自転車を降りて歩いて休憩しました。よく100キロ以上のロングライドに出かけてた自分にとっては、数キロで休憩なんて考えられないことです。ピストはやはり短距離競技用だなぁと痛感しました。競輪選手が乗っている自転車ですからねぇ。&lt;br /&gt;
　買い物・街乗りに使うだけなら短距離用で問題ないので、とりあえずもう少し固定ギアで様子を見ようと思ってます。また進展があれば記事を書こうと思います。&lt;/p&gt;

&lt;h3 id=&quot;ピストでおならは出来ない&quot;&gt;ピストでおならは出来ない？&lt;/h3&gt;
&lt;p&gt;　あと、「ピストバイク乗っているとおならは出来ない」と聞いたことがあります。googleで検索しても回答は得られなかったのですが、Twitterで検索すると何人かが「ピストでおならをするのは難しい」とか「おならしたら転けそうになった」という呟きを見かけたので、そういうことなんでしょう。出来ないってことはないみたいですね。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 10 Mar 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2024-03-10/stroll01</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2024-03-10/stroll01</guid>
        
        <category>bicycle</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>一回休み（パス）があるゲームでのαβ法</title>
        <description>&lt;h3 id=&quot;気になっていたこと&quot;&gt;気になっていたこと&lt;/h3&gt;
&lt;p&gt;　以前&lt;a href=&quot;/software/2020-06-07/mancala&quot;&gt;「マンカラは先手必勝？後手必勝？」&lt;/a&gt;という記事の中で、&lt;a href=&quot;https://www.amazon.co.jp/HTML5-CoffeeScriptで作る最強の三目並べプログラム-MIN-MAX法からαβ法へ-happyclam-ebook/dp/B01D1IJ0S0/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1473938717&quot;&gt;自分が書いた本（「HTML5+CoffeeScriptで作る最強の三目並べプログラム」）&lt;/a&gt;を紹介して、「マンカラは三目並べと違ってパス（一回休み）があるので少しコードを変更する必要がある」と書いたまま詳細は説明してなかったことが気になってたので書くことにしました。本を買って頂いた方にとっては今更な感じはありますが、マンカラの&lt;a href=&quot;https://github.com/happyclam/mancala_karah&quot;&gt;ソースコード&lt;/a&gt;を元に説明しようと思います。&lt;/p&gt;

&lt;h3 id=&quot;αβ法の実装手順&quot;&gt;αβ法の実装手順&lt;/h3&gt;
&lt;p&gt;　当ブログも昔は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;αβ法&lt;/code&gt;で検索すると&lt;a href=&quot;/software/2014-09-16/ab_method&quot;&gt;この記事&lt;/a&gt;が上位に表示されていたのですが、今は他にもっと丁寧な説明のあるサイトが増えたので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;圏外&lt;/code&gt;になってるみたいですね:sweat_smile:でもαβ法の解説に納得出来てもいざコードを書こうとすると出来ないという意見も見かけます。&lt;a href=&quot;https://www.amazon.co.jp/HTML5-CoffeeScriptで作る最強の三目並べプログラム-MIN-MAX法からαβ法へ-happyclam-ebook/dp/B01D1IJ0S0/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1473938717&quot;&gt;この本&lt;/a&gt;では３つのソースコードを用意して、この手順でソースを変更していけばαβ法が実装できますよという例を示しましたが、ここでマンカラを例にして簡単におさらいします。&lt;br /&gt;
　まず、前提として先手は大きい値が有利、後手は小さい値が有利（逆でも可）という静的評価関数を用意します。静的評価関数はマンカラの場合なら&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(先手のストア内の豆の数 - 後手のストア内の豆の数)&lt;/code&gt;になります。&lt;br /&gt;
　その後以下のように局面の先読みを行う関数を実装します。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;１つの階層におけるすべての着手を試して静的評価を行い、先手なら一番大きい後手なら一番小さい評価値を得る着手とその時の評価値を返す関数を作る。&lt;/li&gt;
  &lt;li&gt;1で作った関数をゲームが終了するか指定された手数（読みの深さ）に達することを終了条件とする再帰関数に書き換える
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&amp;gt;ミニマックス法完成&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;2で作った関数に下層ノードに評価値を渡すための引数（閾値）を追加して、その閾値と現在の階層の評価値を比較して読みを中断（枝刈り、αβカット）してリターンするか、読みを続けるかの条件を書き加える
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&amp;gt;αβ法完成&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;3で作った関数に先手、後手、先手という風に順番に着手したのか、先手、先手、先手と連続着手したのか区別するための引数を追加して、αβカットをしている部分に連続着手した場合はαβカットをしないように条件を書き加える&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;　この4.の作業をすれば、&lt;strong&gt;一回休み（パス）があるゲームでのαβ法が完成します&lt;/strong&gt;。要は先手か後手が連続着手した場合は何回連続であってもすべて無視して一回の着手と考えて、その最後の一回の評価値と閾値を比較してαβカットを行うようにすればいいだけです。&lt;/p&gt;

&lt;h3 id=&quot;実際のコード&quot;&gt;実際のコード&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;https://github.com/happyclam/mancala_karah&quot;&gt;githubのレポジトリ内のソースコード&lt;/a&gt;は&lt;a href=&quot;/software/2020-06-07/mancala&quot;&gt;以前の記事&lt;/a&gt;で使ったコードと大体同じなのですが、&lt;a href=&quot;/software/2020-06-07/mancala&quot;&gt;以前の記事&lt;/a&gt;では先手必勝か後手必勝かを確認するためのものだったので、そのままでは先手あるいは後手の負けが確定したときに最善手を逃します。「勝ちあるいは負けが確定した時点で最善かどうかに拘らず読みを打ち切ってReturn」するようになってました。&lt;br /&gt;
　でも、&lt;a href=&quot;https://github.com/happyclam/mancala_karah&quot;&gt;ここで解説するコード&lt;/a&gt;は、&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;実際のアプリ（マンカラナッツ）&lt;/a&gt;で使ってるコードと同じで負けが確定しても最善で負けるようになってます。&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;マンカラナッツ&lt;/a&gt;では&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C++&lt;/code&gt;で作成していますがそれの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dart&lt;/code&gt;版です。&lt;/p&gt;

&lt;p&gt;　マンカラのゲーム盤は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;board&lt;/code&gt;変数で表され、14要素の固定長配列になってます。&lt;/p&gt;

&lt;div style=&quot;float:left; margin: 0px 0px 0px&quot;&gt;
    &lt;table&gt;
    &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot; align=&quot;center&quot;&gt;&lt;br /&gt;後手のストア&lt;br /&gt; 0&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;13&amp;nbsp;&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;12&amp;nbsp;&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;11&amp;nbsp;&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;10&amp;nbsp; &lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;&amp;nbsp;9&amp;nbsp;&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;&amp;nbsp;8&amp;nbsp;&lt;/td&gt;
    &lt;td rowspan=&quot;2&quot; align=&quot;center&quot;&gt;&lt;br /&gt;先手のストア&lt;br /&gt; 7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;&amp;nbsp;1&amp;nbsp;&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;&amp;nbsp;2&amp;nbsp;&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;&amp;nbsp;3&amp;nbsp;&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;&amp;nbsp;4&amp;nbsp;&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;&amp;nbsp;5&amp;nbsp;&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;&amp;nbsp;&amp;nbsp;6&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;all&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　マンカラのルールを実装している部分は省略して先読みを行うAI部分だけ、行番号を付けて解説します。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;01---  List think(List board, Player oppo, int limit, int pre_value, bool pre_turn){
02---    List result =  List&amp;lt;int&amp;gt;.filled(2, 0, growable: false);
03---    int moved = 0;
04---    int score = 0;
05---    int ret = 0;
06---    int lastscore = (this.turn == FIRST) ? SECOND_WIN : FIRST_WIN;
07---    int lastposi = -1;
08---    var goal = (this.turn == FIRST) ? FIRST_GOAL : DENTS;
09---    var start = (this.turn == FIRST) ? FIRST_START : SECOND_START;

10---    List temp = [0,0,0,0,0,0,0,0,0,0,0,0,0,0];
11---    for (var i = start; i &amp;lt; goal; i++){
12---      temp = List.from(board);
13---      if (temp[i] == 0) continue;
14---      moved = karahaMove(temp, i, this.turn);
15---      ret = gameEnd(temp);
16---      if (ret == ONGAME &amp;amp;&amp;amp; limit &amp;gt; 0){
17---        if (moved == FIRST_GOAL || moved == SECOND_GOAL){
18---          result = this.think(temp, oppo, limit - 1, lastscore, false);
19---        } else {
20---          result = oppo.think(temp, this, limit - 1, lastscore, true);
21---        }
22---        score = result[0];
23---      } else {
24---        score = evaluate(temp);
25---        lastscore = score;
26---        lastposi = i;
27---        break;
28---      }
29---      if ((score &amp;gt;= lastscore &amp;amp;&amp;amp; this.turn == FIRST) || (score &amp;lt;= lastscore &amp;amp;&amp;amp; this.turn == SECOND)){
30---        lastscore = score;
31---        lastposi = i;
32---      }
33---      if (pre_turn == true &amp;amp;&amp;amp; ((pre_value &amp;lt; score &amp;amp;&amp;amp; this.turn == FIRST) || (pre_value &amp;gt; score &amp;amp;&amp;amp; this.turn == SECOND))) {
34---        break;
35---      }
36---    }
37---    result[0] = lastscore;
38---    result[1] = lastposi;
39---    return result;
40---  }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;01: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;戻り値&lt;/code&gt;:[評価値, 着手]の2要素の配列&lt;br /&gt;
    &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;board&lt;/code&gt;:マンカラのBoardオブジェクト＝要素数14の固定長配列です&lt;br /&gt;
    &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oppo&lt;/code&gt;:対戦相手のPlayerオブジェクト&lt;br /&gt;
    &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt;:何手先まで読むのか（読みの深さ）の制限値、0になれば先読みを止める&lt;br /&gt;
    &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_value&lt;/code&gt;:αβカットの閾値（下層ノードに伝える評価値）&lt;br /&gt;
    &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_turn&lt;/code&gt;:連続着手か交互の着手かのフラグ（Falseなら連続着手なのでαβカットは行わない）&lt;/li&gt;
  &lt;li&gt;02: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result&lt;/code&gt;:戻り値&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[評価値, 着手]&lt;/code&gt;の2要素の配列&lt;/li&gt;
  &lt;li&gt;03: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moved&lt;/code&gt;:着手後に最後に豆を巻き終わった位置、自分のストアで豆を巻き終わったら連続で着手可能&lt;/li&gt;
  &lt;li&gt;04: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;score&lt;/code&gt;:同じ階層での一手毎の評価値を格納&lt;/li&gt;
  &lt;li&gt;05: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt;:ゲーム継続中（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ONGAME&lt;/code&gt;）かどうかを格納&lt;/li&gt;
  &lt;li&gt;06: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastscore&lt;/code&gt;:最終的な評価値を格納。最初の比較時に必ず値が代入されるように先手の時は最小値、後手の時は最大値で初期化しておく&lt;/li&gt;
  &lt;li&gt;07: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastposi&lt;/code&gt;:最終的に選ばれた着手を格納&lt;/li&gt;
  &lt;li&gt;08: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;goal&lt;/code&gt;:Board配列の添字。先手、後手、それぞれの着手の末端。先手なら6、後手なら13&lt;/li&gt;
  &lt;li&gt;09: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt;:Board配列の添字。先手、後手、それぞれの着手開始位置。先手なら1、後手なら8&lt;/li&gt;
  &lt;li&gt;10: マンカラの場合一度着手した盤面を元に戻す作業が煩雑なので、引数で渡された盤面データ（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;board&lt;/code&gt;）を元に戻すための作業用の配列を用意&lt;/li&gt;
  &lt;li&gt;11: 同じ階層で最善手を選択するためのforループ。このfor文は横（同じ手番）との比較で、再帰呼出しは上下（先手と後手）の評価値の比較、階層間の比較になります。&lt;/li&gt;
  &lt;li&gt;12: 作業用配列に盤面データをコピー&lt;/li&gt;
  &lt;li&gt;13: 穴に豆がなければ次の穴へ&lt;/li&gt;
  &lt;li&gt;14: 一手着手&lt;/li&gt;
  &lt;li&gt;15: ゲームが終了していないか確認&lt;/li&gt;
  &lt;li&gt;16: 再帰関数の終了条件を満たしていなければ（＝ゲームが終了していなくて、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt;で指定された深さまで達していなければ）、再帰呼出しして先読み。&lt;br /&gt;
    この時引数の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_value&lt;/code&gt;には、現時点でのその階層での最善手（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lastscore&lt;/code&gt;、先手なら最大評価値、後手なら最小評価値）を渡す。&lt;/li&gt;
  &lt;li&gt;18: 自分のストアで豆を巻き終われば、手番を替えずにもう一手先読み。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_turn&lt;/code&gt;引数に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;を渡して、手番が変わっていないことを下層ノードに伝える。&lt;/li&gt;
  &lt;li&gt;20: それ以外は手番を交代してもう一手先読み。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_turn&lt;/code&gt;引数に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;を渡して、手番が変わったことを下層ノードに伝える。&lt;/li&gt;
  &lt;li&gt;22: 戻ってきた評価値を格納、同じ階層での評価値の比較に使う。&lt;/li&gt;
  &lt;li&gt;24: 再帰関数の終了条件を満たしていれば（＝ゲームが終了したか、指定された深さまで読み終わったら）静的評価を行って呼び出し元にリターン&lt;/li&gt;
  &lt;li&gt;27: 戻り値（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result&lt;/code&gt;）に値をセットしてリターンするのと同じ&lt;/li&gt;
  &lt;li&gt;29: 同じ階層での評価値の比較作業。先手の場合はより大きな評価値、後手の場合はより小さな評価値を選択し、その評価値と指し手を保存。&lt;/li&gt;
  &lt;li&gt;33: 連続着手ではない時（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_turn == true&lt;/code&gt;）だけαβカット。上層から引数で渡されてきた閾値（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_value&lt;/code&gt;）と現局面の評価値を比較し、先手の場合は閾値（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_value&lt;/code&gt;）より大きな評価値だった時、後手の場合は閾値（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre_value&lt;/code&gt;）より小さな評価値だった時に読みを中断（その先を読む必要がない）して呼び出し元にリターン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　大して長くもないのでソースコードを追いかけていって、何をしているのかわからない部分は、解説を見るという感じで理解できるのではないでしょうか？&lt;/p&gt;

&lt;h3 id=&quot;αβ法の確認&quot;&gt;αβ法の確認&lt;/h3&gt;
&lt;p&gt;　実装したαβ法がうまく機能しているかどうか確認するのに一番簡単な方法は、αβ法を実装している部分をコメントアウトしてみて実装した場合と同じ出力が得られるかどうかです。計算量を削減するのがαβ法なので、ただのミニマックス法で実行した時と同じ結果が得られて尚且つ実行時間が大幅に短縮されるはずです。&lt;br /&gt;
　上のコードで33行目から35行目までをコメントアウトして&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dart mancala.dart&lt;/code&gt;を実行したところ出力結果は同じで、実行時間は２０分と４時間弱の違いがありました。&lt;/p&gt;

&lt;h5 id=&quot;αβ法無し&quot;&gt;αβ法無し&lt;/h5&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dart mancala.dart
[0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2]
=== result = 1, 6, i = 1
=== result = 4, 5, i = 2
=== result = 3, 5, i = 3
=== result = 2, 5, i = 4
=== result = 4, 5, i = 5
=== result = 5, 5, i = 6
=== result = 4, 5, i = 7
=== result = 5, 5, i = 8
=== result = 5, 5, i = 9
=== result = 4, 5, i = 10
=== result = 5, 6, i = 11
=== result = 5, 6, i = 12
=== result = 5, 5, i = 13
=== result = 5, 5, i = 14
=== result = 7, 5, i = 15
=== result = 12, 5, i = 16
=== result = 999, 5, i = 17
14208572
[999, 5]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;αβ法有り&quot;&gt;αβ法有り&lt;/h5&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dart mancala.dart
[0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2]
=== result = 1, 6, i = 1
=== result = 4, 5, i = 2
=== result = 3, 5, i = 3
=== result = 2, 5, i = 4
=== result = 4, 5, i = 5
=== result = 5, 5, i = 6
=== result = 4, 5, i = 7
=== result = 5, 5, i = 8
=== result = 5, 5, i = 9
=== result = 4, 5, i = 10
=== result = 5, 6, i = 11
=== result = 5, 6, i = 12
=== result = 5, 5, i = 13
=== result = 5, 5, i = 14
=== result = 7, 5, i = 15
=== result = 12, 5, i = 16
=== result = 999, 5, i = 17
1276771
[999, 5]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;先手必勝か後手必勝かだけを確認したい場合&quot;&gt;先手必勝か後手必勝かだけを確認したい場合&lt;/h3&gt;
&lt;p&gt;　前述しましたが、最善手に拘らずに先手必勝なのか、後手必勝なのかだけを調べたい場合は、同じ階層での評価値の比較の際に、１個差の負けでも大差の負けでも同じと考えて、先手勝ちあるいは後手勝ちの結論が出た段階ですぐに呼び出し元にReturnすればいいだけです。例えば以下のコードを32行目と33行目の間に入れれば、&lt;strong&gt;指定された読みの深さ内で&lt;/strong&gt;先手勝ちあるいは後手勝ちの結論が出たことになるので、そこで探索を打ち切り呼び出し元にリターンすれば探索時間を大幅に短縮できます。&lt;br /&gt;
　ただこの時に使用する静的評価関数は単に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(先手のストア内の豆の数 - 後手のストア内の豆の数)&lt;/code&gt;とするだけではなく、ゲームが終了しているかどうかを確認して先手勝ち（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FIRST_WIN&lt;/code&gt;）、後手勝ち（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SECOND_WIN&lt;/code&gt;）の特別な値を返すようにしておく必要があります。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      if ((score &amp;gt;= FIRST_WIN &amp;amp;&amp;amp; this.turn == FIRST)||(score &amp;lt;= SECOND_WIN &amp;amp;&amp;amp; this.turn == SECOND)) {
        lastscore = score;
        lastposi = i;
        break;
      }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;　上記のコードを追加した後、豆２個のケースで試したら、自分の環境では約半分近くの時間で先手必勝を読み切れました。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 18 Nov 2023 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/software/2023-11-18/abmethod_skipped</link>
        <guid isPermaLink="true">https://happyclam.github.io/software/2023-11-18/abmethod_skipped</guid>
        
        <category>dart</category>
        
        <category>flutter</category>
        
        <category>mancala</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>カラハ問題、根強い人気？</title>
        <description>&lt;h3 id=&quot;先手必勝aiと自作aiとのマンカラ対戦&quot;&gt;先手必勝AIと自作AIとのマンカラ対戦&lt;/h3&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/ovR4V5R6Lt0?si=fhltwApvJmgzRyKO&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ブログ内トップの関心事&quot;&gt;ブログ内トップの関心事&lt;/h3&gt;
&lt;p&gt;　以前&lt;a href=&quot;/software/2020-06-07/mancala&quot;&gt;「マンカラは先手必勝？後手必勝？」&lt;/a&gt;という記事を書いてからは、当ブログに流入してくる検索ワードはずっとマンカラに関するものが一番多いです。「マンカラ 完全解析」とか「マンカラ 先手必勝」とかで検索すると未だに&lt;a href=&quot;/software/2020-06-07/mancala&quot;&gt;前述の記事&lt;/a&gt;が検索上位に表示されます。&lt;br /&gt;
　ブログもアプリも永らく放置していたのですが、googleに&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;の更新を催促されたのを機会に、久しぶりにマンカラに関して試したことを記事に書いてみようと思います。&lt;/p&gt;

&lt;h3 id=&quot;マンカラのノード数は&quot;&gt;マンカラのノード数は？&lt;/h3&gt;
&lt;p&gt;　マンカラの全ノードをメモリーに持つことが出来れば、&lt;a href=&quot;/software/2019-07-19/self-play&quot;&gt;以前の記事&lt;/a&gt;で三目並べでやったようにモンテカルロ法を使って先手必勝か後手必勝が証明できるし、全ノードを保持出来なくても工夫すれば序盤の定石データの作成等何か出来るかもと思いノード数を数えてみることにしました。&lt;br /&gt;
　やったことは以前&lt;a href=&quot;/software/2018-08-18/puzzle&quot;&gt;「BFSで将棋パズルを解く」&lt;/a&gt;に書いたのと同じ方法です。全ての指し手を一手ずつ進めて重複局面を省きながらゲーム木を作る方法なので概算ではなく正確なノード数が求まるはずです。&lt;br /&gt;
　プログラムは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dart&lt;/code&gt;で作ったのですが、まずは豆１つのケースで試したら数秒でノード数は1,182,341ノード（重複局面削除済み）と判明しましたが、豆２つでやってみると一日待って&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Out of Memory&lt;/code&gt;が出てプログラムが終了してしまいました:cold_sweat:&lt;br /&gt;
　おかしいなと思い&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psensor&lt;/code&gt;でメモリー使用状況を確認したのが以下の画像です。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/dart_memory.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/dart_memory.png&quot; alt=&quot;Dartメモリ使用状況&quot; width=&quot;480&quot; height=&quot;289&quot; title=&quot;Dartメモリ使用状況&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　&lt;a href=&quot;/software/2020-06-07/mancala&quot;&gt;以前の記事「マンカラは先手必勝？後手必勝？」&lt;/a&gt;を書いたときよりPCはハイスペックになっていて、今は128GBのメモリを積んでいるのですが、理由は分かりませんが、どうやら&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dart&lt;/code&gt;では64GB以上のメモリーを使ってくれないようです:cold_sweat:ガベージコレクションが関係しているのでしょうか？兎に角こういうことをやるのには&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dart&lt;/code&gt;(Version3.1.2)は向いてませんね。仕方なく&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C++&lt;/code&gt;で書き直して試してみると、&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/cplus_memory.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/cplus_memory.png&quot; alt=&quot;C++メモリ使用状況&quot; width=&quot;480&quot; height=&quot;289&quot; title=&quot;C++メモリ使用状況&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　それでも１５分ほどで搭載されているメモリーすべて使い切って、重複局面は排除したのですがノード数を数え切れませんでした:cold_sweat:&lt;br /&gt;
　マンカラの完全解析は意外と手強いです。作成したNodeクラスは後にプログラムで使用するつもりの余計な要素も含まれているのですが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sizeof&lt;/code&gt;で確認すると１つのNodeオブジェクトは88バイトだったので、128GBで足りないとなると&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;128GB / 88B&lt;/code&gt;で15億ノード以上あるということでしょうか？しかも豆２つでこの状況ですから三目並べと同様のアプローチは無理ですね:sweat_smile:&lt;/p&gt;

&lt;h3 id=&quot;chatgptに聞いてみる&quot;&gt;ChatGPTに聞いてみる&lt;/h3&gt;
&lt;p&gt;　無料版のChatGPT(GPT3.5)に「マンカラカラハは先手必勝のゲームと証明されていますか？」と聞いてみたところ以下の回答でした。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;マンカラ（またはカラハ）が「先手必勝」であるという一般的な証拠や公式な証明は存在しません。このゲームは非常に複雑で、初期配置やプレイヤーのスキルに依存するため、先手と後手の優劣は局面や戦術によって変化します。&lt;/p&gt;

  &lt;p&gt;マンカラは多くのバリエーションが存在し、さまざまなルールでプレイされることもあるため、先手必勝かどうかについて一般的な結論を出すことは難しいです。一部のバリエーションでは、特定の初期配置や戦術によって先手が有利になることがあるかもしれませんが、一般的なルールでのマンカラは均衡のゲームとされており、どちらが優勢であるかは状況に依存します。&lt;/p&gt;

  &lt;p&gt;したがって、特定の局面やルールにおいて先手必勝であるかどうかを証明するには、数学的な証拠や研究が必要です。一般的なマンカラゲームが先手必勝であるかどうかについての確かな証拠は提供されていないと言えます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　他にもいろいろ試しましたが、ChatGPTでは明確な回答は得られませんでした。&lt;/p&gt;

&lt;h3 id=&quot;wikipediaによると解決済みらしい&quot;&gt;Wikipediaによると解決済みらしい&lt;/h3&gt;
&lt;p&gt;　ネットを検索すると&lt;a href=&quot;https://en.wikipedia.org/wiki/Kalah&quot;&gt;Wikipediaのこの記事&lt;/a&gt;で先手必勝が確認されていると出てくるのですが、&lt;a href=&quot;https://en.wikipedia.org/wiki/Kalah&quot;&gt;この記事&lt;/a&gt;がどういう理屈で先手必勝を証明しているのか自分にはよく理解できません:sweat_smile:&lt;br /&gt;
　そこで&lt;a href=&quot;https://en.wikipedia.org/wiki/Kalah&quot;&gt;同じ記事&lt;/a&gt;内の下の方に用意してある&lt;a href=&quot;http://kalaha.krus.dk/&quot;&gt;Webゲーム&lt;/a&gt;と&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;自分のアプリ&lt;/a&gt;を対戦させてみました。「先手必勝の理屈が分からない奴は&lt;a href=&quot;http://kalaha.krus.dk/&quot;&gt;このWebゲーム&lt;/a&gt;に後手で勝ってみろ！出来ないだろ？だから先手必勝の結論に間違いないんだよ！」という理屈のようです:sweat_smile:&lt;a href=&quot;http://kalaha.krus.dk/&quot;&gt;このゲーム&lt;/a&gt;の作者の意図はそういうものではないかもしれませんが、自分はそのように解釈しました:sweat_smile:&lt;br /&gt;
　&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;自分のアプリ&lt;/a&gt;も豆６個に対応しているので、&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;自分のアプリ&lt;/a&gt;が後手で勝ったらおもしろいなぁなんて思いながら対戦させてみました。&lt;br /&gt;
　結果は&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;自分のアプリ&lt;/a&gt;の負けでした、残念:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/6x6karah_game01.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/6x6karah_game01.png&quot; alt=&quot;対先手必勝AI&quot; width=&quot;480&quot; height=&quot;234&quot; title=&quot;対先手必勝AI&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　&lt;a href=&quot;http://kalaha.krus.dk/&quot;&gt;このゲーム&lt;/a&gt;で遊ぶときは左下の&lt;button type=&quot;button&quot;&gt;Change Rules&lt;/button&gt;のボタンをクリックして、以下のようにチェックマークをOnにしないと同じルールにならない（Capture=横取りの動作が異なります）ので注意が必要です。Nintendo Switch『世界のアソビ大全51』のマンカラソフトもこれと同じルールです。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/6x6karah_game02.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/6x6karah_game02.png&quot; alt=&quot;先手必勝AIの設定&quot; width=&quot;480&quot; height=&quot;92&quot; title=&quot;先手必勝AIの設定&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　
　次に、&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;では最強に設定しても１１手読みなので１５手読みに設定してPCで試してみたのが冒頭の動画です。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/6x6karah_game03.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/6x6karah_game03.png&quot; alt=&quot;対先手必勝ゲーム-15手読み&quot; width=&quot;480&quot; height=&quot;230&quot; title=&quot;対先手必勝AI-15手読み&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　１５手読みにするとRyzen7 5700Gでも一手５分ぐらい掛かるのですが、それでもやはり勝てません。あと一個で引き分けという惜敗ですが、試しに自分の頭で考えてやってみるとゲームの最後までプレイ出来ずに途中で大差で負けます:sweat_smile:&lt;br /&gt;
&lt;a href=&quot;http://kalaha.krus.dk/&quot;&gt;このWebゲーム&lt;/a&gt;は豆６個しか試せないようですが、&lt;a href=&quot;https://en.wikipedia.org/wiki/Kalah&quot;&gt;Wikipedia&lt;/a&gt;に書いてある通り３個、４個、５個でもすべて先手必勝は間違いなさそうですね。&lt;/p&gt;

&lt;h3 id=&quot;追記2023-11-10&quot;&gt;追記（2023-11-10）&lt;/h3&gt;
&lt;p&gt;　ノード数を数える時に手番データを含めて重複局面を保存しないようにしていたのですが、手番データを含めずにノード数をカウントしたところ、豆２個でもカウント完了出来ました。先手番の局面か後手番の局面かを気にせずに豆の配置の違いだけを数えれば大幅にノード数は減りますが、データとしては使いにくいのであまり意味はありませんけど一応記しておきます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;豆１個のケース-&amp;gt;647,826ノード&lt;/li&gt;
  &lt;li&gt;豆２個のケース-&amp;gt;495,196,185ノード&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　豆の配置は同じだけど手番が違う局面というのがかなり存在するということみたいです。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Tue, 07 Nov 2023 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/software/2023-11-07/karah_problem</link>
        <guid isPermaLink="true">https://happyclam.github.io/software/2023-11-07/karah_problem</guid>
        
        <category>dart</category>
        
        <category>android</category>
        
        <category>flutter</category>
        
        <category>c++</category>
        
        <category>mancala</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>lishogi(Minishogi)に挑戦</title>
        <description>&lt;h3 id=&quot;lishogiと５五将棋アプリを対戦させてみた&quot;&gt;&lt;a href=&quot;https://lishogi.org&quot;&gt;lishogi&lt;/a&gt;と&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;を対戦させてみた&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;https://lishogi.org&quot;&gt;lishogi&lt;/a&gt;に５五将棋（Minishogi）が実装されたようです。ちょうど&lt;a href=&quot;http://happyclam.github.io/project/2020-01-02/minishogi&quot;&gt;２年前の記事&lt;/a&gt;で&lt;a href=&quot;http://hgm.nubati.net/miniShogi.html&quot;&gt;GNU mini-shogi&lt;/a&gt;のサイトで公開されているフリーソフトのPC用５五将棋エンジンと&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;と対戦させて、アプリが勝てなかったことを書きました。&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;のAI部分は２年前と同じですので、普通に考えれば前回同様アプリの惨敗になることが予想されますが、どうなったでしょうか&lt;/p&gt;

&lt;h3 id=&quot;スマホのハードウェア進化に期待&quot;&gt;スマホのハードウェア進化に期待&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;http://hgm.nubati.net/miniShogi.html&quot;&gt;GNU mini-shogi&lt;/a&gt;で公開されているフリーのPCエンジンは１対１の対戦用なので一手に数十秒使っていましたが、&lt;a href=&quot;https://lishogi.org&quot;&gt;lishogi&lt;/a&gt;は複数人が利用するWebアプリなので一人に多くのリソースを割けません、そこに勝機があるかもと思いました。&lt;br /&gt;
　また、&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;側もスマホの性能が上がったので、アプリを最強レベルに設定して何とか使える状態になってきました。&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;を既にお使いの方はご存知だと思いますが、AIを最強レベルに設定すると一手に時間がかかり過ぎるので、作った本人が言うのもなんですが、とてもAIの指し手を待ってられませんでした。自分も今まではスマホで最強レベルではほとんど使っていません。PC上でCUI環境でテストするか、PC上でエミュレータを使って遊んでいました。&lt;br /&gt;
　でも最近自分もスマホの機種変更（Xperia 10 Ⅲ、RAM6GB）をして、これなら最強レベル（瞑想モード）でも何とか使えるなと感じたので試してみることにしました。&lt;/p&gt;

&lt;h3 id=&quot;まずは最強レベルで試してみる&quot;&gt;まずは最強レベルで試してみる&lt;/h3&gt;
&lt;p&gt;　流石に最強レベルには勝てないだろうと思いながらも、まずは最強モード（YaneuraOu V6.00 レベル８）で、先手と後手一局ずつ手動で対戦してみました。持ち時間設定は最長にしました。&lt;/p&gt;

&lt;p&gt;　※以下はアプリから出力した棋譜（CSA形式）です。&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;にコピペすれば棋譜を再現出来ます。&lt;/p&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu01&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu01&quot;&gt;01. 先手:アプリ　後手:lishogi　４０手まで後手の勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+AI
N-Player
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
+
+4544KI
-4132KA
+5453FU
-5141HI
+4433KI
-2122KI
+3332KI
-3132GI
+0054KA
-2233KI
+1514HI
-0043KI
+5445KA
-3323KI
+4523KA
-3223GI
+2543KA
-0022KA
+5554OU
-2314GI
+0044KI
-4143HI
+5443OU
-0021KA
+0032KI
-0041HI
+0042HI
-2132KA
+4332OU
-0031KI
+3243OU
-3142KI
+4354OU
-4243KI
+5445OU
-4344KI
+3544GI
-4144HI
+4535OU
-0045HI
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu02&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu02&quot;&gt;02. 先手:lishogi　後手:アプリ　１９手まで先手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+Player
N-AI
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
-
+4544KI
-4132KA
+2534KA
-3142GI
+3445KA
-2122KI
+1525HI
-4243GI
+2522HI
-4344GI
+3544GI
-1122OU
+0033GI
-2231OU
+0042KI
-3121OU
+4232KI
-2111OU
+3322GI
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;　結果は２局とも&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;の完敗でした。とても勝てそうな気がしなかったので、今度はlishogiのレベルを下げてレベル５で先手と後手３局ずつ計６局対戦させてみました。&lt;/p&gt;

&lt;h3 id=&quot;lishogiをレベル５に下げて６局対戦&quot;&gt;lishogiをレベル５に下げて６局対戦&lt;/h3&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu03&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu03&quot;&gt;03. 先手:lishogi　後手:アプリ　３０手まで後手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+Player
N-AI
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
+
+4544KI
-4132KA
+2534KA
-3142GI
+5545OU
-5131HI
+1525HI
-3241KA
+3524GI
-3134HI
+4434KI
-2122KI
+2535HI
-4114KA
+0052HI
-2232KI
+3515HI
-0025KA
+2435GI
-3243KI
+1525HI
-1425UM
+0055KA
-0033HI
+3433KI
-4333KI
+5242HI
-0034KI
+3534GI
-2534UM
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu04&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu04&quot;&gt;04. 先手:lishogi　後手:アプリ　２６手まで後手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+Player
N-AI
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
+
+4544KI
-4132KA
+2534KA
-3142GI
+3425KA
-2122KI
+3524GI
-5131HI
+4445KI
-3241KA
+4534KI
-4152KA
+3423KI
-2223KI
+2552KA
-2324KI
+0044KA
-0033GI
+1545HI
-3344GI
+4544HI
-3135RY
+0045GI
-0022KA
+5243KA
-2244KA
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu05&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu05&quot;&gt;05. 先手:lishogi　後手:アプリ　２０手まで後手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+Player
N-AI
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
+
+2534KA
-4132KA
+1525HI
-5141HI
+2524HI
-2122KI
+5453FU
-2233KI
+4554KI
-3254KA
+3412KA
-3324KI
+5554OU
-0043KI
+5455OU
-0054HI
+5545OU
-5444HI
+3544GI
-4344KI
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu06&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu06&quot;&gt;06. 先手:アプリ　後手:lishogi　４６手まで後手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+AI
N-Player
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
+
+4544KI
-2122KI
+5453FU
-1213FU
+2534KA
-3142GI
+1525HI
-4253GI
+4453KI
-5153HI
+0054GI
-5352HI
+3452KA
-4152KA
+0051HI
-0041KA
+3534GI
-0031KI
+5443GI
-5243KA
+3443GI
-0033GI
+0015KA
-0024FU
+2535HI
-1121OU
+5545OU
-4123KA
+4555OU
-2332KA
+4332GI
-2232KI
+3533HI
-3233KI
+0054KA
-0043GI
+0012GI
-2112OU
+5445KA
-1222OU
+5131RY
-2231OU
+0035KI
-0044GI
+3544KI
-3344KI
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu07&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu07&quot;&gt;07. 先手:アプリ　後手:lishogi　５５手まで先手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+AI
N-Player
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
-
+4544KI
-2122KI
+5453FU
-1213FU
+2534KA
-3142GI
+1525HI
-4253GI
+4453KI
-5153HI
+0054GI
-5352HI
+3452KA
-4152KA
+0051HI
-0041KA
+3534GI
-0031KI
+5443GI
-5243KA
+3443GI
-0042FU
+2522HI
-0044GI
+5544OU
-4243FU
+4443OU
-3122KI
+5141HI
-0021HI
+0012FU
-1112OU
+0034KA
-0023FU
+0031KI
-0032GI
+3132KI
-2141HI
+3241KI
-0033HI
+4344OU
-3334HI
+4434OU
-0052KA
+3445OU
-2232KI
+0044KA
-3222KI
+0032HI
-5234KA
+4534OU
-1221OU
+3231HI
-2112OU
+0011HI
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu08&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu08&quot;&gt;08. 先手:アプリ　後手:lishogi　７３手まで先手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre style=&quot;font-size: 80%;&quot;&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+AI
N-Player
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
-
+4544KI
-2122KI
+5453FU
-1213FU
+2534KA
-3142GI
+1525HI
-4253GI
+4453KI
-5153HI
+0054GI
-5352HI
+3452KA
-4152KA
+0051HI
-0041KI
+5152HI
-0033KA
+0044KA
-3344KA
+3544GI
-4152KI
+0031KA
-0032HI
+3122KA
-3222HI
+0023KI
-0021FU
+2322KI
-2122FU
+0041HI
-0021KI
+4433GI
-0031KA
+2515HI
-0014KA
+1514HI
-1314FU
+4145RY
-0015HI
+0025KA
-3142KA
+3342GI
-5242KI
+0024KA
-0033GI
+2415KA
-1415TO
+0013HI
-0012KA
+1315HI
-2132KI
+1514HI
-3223KI
+1412HI
-1112OU
+0013FU
-1211OU
+4542RY
-0035HI
+0045KA
-3545RY
+5445GI
-0021KA
+0031HI
-2313KI
+3133RY
-0054FU
+4554GI
-1323KI
+3323RY
-2112KA
+2322RY
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;　結果はアプリの５勝１敗でレベル５なら勝てそうですが、lishogiは序盤の指し手を結構変えてくるので、余裕かましてる感じがありますね。&lt;/p&gt;

&lt;h3 id=&quot;lishogiのレベルは何が基準なのか&quot;&gt;lishogiのレベルは何が基準なのか&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;のAIレベルの違いは、主に読みの深さ（３手〜５手読み）の違いだけで、瞑想モードだけは絞り込む候補手の数を多めにしています。また、同じ局面ではほとんど同じ手を選びます（評価値が同じ場合はランダム選択にしてますが、同じ評価値になる時はあまり無いと思います）が、lishogiは結構指し手を変えてくるようです。lishogiは機械学習型のAIだと思うので、レベルの違いはどうやっているのでしょう？&lt;br /&gt;
　もしかしてレベルが高いと第１候補手、低いと第２、第３と下げているのかなとか考えましたが、それだとこの局面ではこの一手という絶対手が存在するときに困ります。第１候補手以外は自玉が詰んでしまうような局面だと、低いレベルでも第１候補手を選ばないとすぐに負けてしまうからです。おそらく&lt;a href=&quot;http://yaneuraou.yaneu.com/2020/12/20/deep-learning-shogi-features/&quot;&gt;この記事（「Deep Learning将棋は従来の将棋ソフトとここが違うぞ」）&lt;/a&gt;に書いてあるような方法で、特に評価値に大きな違いがある局面ではCPUを使った先読みの結果を優先して、それ以外の通常の指し手はGPUを使った候補手を選択しているような気がしますが、あくまで想像です。&lt;/p&gt;

&lt;h3 id=&quot;５五将棋アプリの今後&quot;&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;の今後&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/programming/2021-08-21/nodejs&quot;&gt;以前の記事&lt;/a&gt;でネットワーク対戦機能を付けるみたいなことを書きましたが、lishogiでスマホを使った５五将棋のネットワーク対戦が出来るようなのでニーズは減った気がするし、やはり運用が大変そうなので後回しにしようかと思ってます。&lt;br /&gt;
　それより今回の対戦で&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;の評価関数の出来自体はそこそこ良いんじゃないかなんて思ってまして、&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;のAI部分をC++で作り直してもっと深く読めるようにして再度対戦させてみたいと思ってます。でもそうすると、AI部分はそれほどでもないのですが、今のJavascript製のGUI部分を一から作る必要がある？ので、その作業量が大きいのでなかなか手をつける気になりません。&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;を使っていただいている方は、気長にお待ち頂きたいと思います。&lt;br /&gt;
　あと、&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;は遅過ぎて使えないと思っていた方もスマホをハイスペックなものに変える機会があれば、もう一度試して欲しいと思います。&lt;/p&gt;

&lt;p&gt;　それから&lt;a href=&quot;http://hgm.nubati.net/miniShogi.html&quot;&gt;GNU mini-shogiのサイト&lt;/a&gt;でかなり昔から公開されているフリーのPC用の５五将棋エンジンは後発の&lt;a href=&quot;https://lishogi.org&quot;&gt;lishogi&lt;/a&gt;に勝てないのか？も少し気になるのですが、どなたか試す人はいないのでしょうか？lishogiを作った人たちは絶対既に試していると思うので、勝つことは確認済みなのでしょうねぇ。暇な時に一度試してみたいと思ってます。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 02 Jan 2022 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/project/2022-01-02/lishogi</link>
        <guid isPermaLink="true">https://happyclam.github.io/project/2022-01-02/lishogi</guid>
        
        <category>coffeescript</category>
        
        <category>cordova</category>
        
        <category>android</category>
        
        <category>javascript</category>
        
        <category>shogi</category>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>ミニベロは上り坂で有利なのか？</title>
        <description>&lt;h3 id=&quot;ロードバイクで登れるけどミニベロで登れない坂がある&quot;&gt;ロードバイクで登れるけど、ミニベロで登れない坂がある&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/miscellaneous/2020-05-16/bicycle01&quot;&gt;以前の記事「ロード系ミニベロのカスタマイズ」&lt;/a&gt;が結構読まれているようなので、また自転車ネタを書いてみます。&lt;br /&gt;
　新しく自転車を買ってみようかと思っているのですが、その自転車に求める条件の一つに「近所にある山を登り切りたい」という変な拘りがあります。全国的に有名な急坂とかそういう大層なものではないのですが、&lt;a href=&quot;/miscellaneous/2020-05-16/bicycle01&quot;&gt;以前の記事&lt;/a&gt;で紹介したIDIOM2では登れないけど、今年売っ払ったロードバイクなら登れた坂というのが近所にあって、IDIOM2よりかは上り坂に強い自転車を選びたいと思ってます。&lt;br /&gt;
　そこでフロントシングルでどんなギアが用意されていればいいか考えてみました。&lt;/p&gt;

&lt;h3 id=&quot;ロードとidiom2の比較&quot;&gt;ロードとIDIOM2の比較&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ロード　　&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;　IDIOM2　&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;クランク長&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;165mm&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;165mm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;フロント&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;50-34T&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;48T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ギア&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;11-25T&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12-25T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;タイヤ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;23-700&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;28-451&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　自分が持っている2010年式IDIOM2はロード系と言われるだけあってフロントギアは大きめ（48T）ですがスプロケット（SHIMANO HG50 8S 12-25T）のレンジが狭く、ローギアがロードと同じ25Tで坂には向いていません。&lt;br /&gt;
　一般的にミニベロは上り坂で有利なんて言われたりしますが、車体の重さやクランク長の違いなどの要素もあるものの、ペダルを回す負荷を考えたら結局ギア比で決まると思います。大きな車輪を回すより小さな車輪を回す方が負荷は低くはなりますが、その分を考慮した値で比較すれば700Cも小径車も同じだと思います。700Cと451のタイヤを回す負荷を比較する場合、ギア比を掛けてやれば求められるので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;タイヤの外径×ギア比&lt;/code&gt;の値を比較すればいいはずです。&lt;br /&gt;
　タイヤの外径をタイヤサイズ表記に使われている&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;700&lt;/code&gt;や&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;451&lt;/code&gt;を使って計算してもいいのですが、700Cのタイヤのビード座直径は実際には700mmではないようですし、同じタイヤサイズでもタイヤの太さによってタイヤの高さ（外径）も変わるのでここではタイヤの外径の代わりに、タイヤ周長を使おうと思います。タイヤ周長は多くのサイクルコンピュータに予め用意されているのでタイヤの太さによる違いなども考慮されているのでより正確だと思います。それと、タイヤ外径とタイヤ周長の違いは定数である円周率（3.14）を掛けただけなので、タイヤ外径の代わりに周長を使っても問題ありません。&lt;/p&gt;

&lt;p&gt;　ここでは&lt;a href=&quot;https://www.cyclabo.com/ja/topics/vnu1m1awr7/&quot;&gt;このサイト&lt;/a&gt;からタイヤ周長の数値を引っ張ってきて、ロードとミニベロのペダルを回す負荷値（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;タイヤ周長×ギア比&lt;/code&gt;）を計算してみました。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ロード　　&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;　IDIOM2　&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;タイヤサイズ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;700x23C(ETRTO 23-622)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20x1-1/8(ETRTO 28-451)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;トップギア&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2096 * (50 / 11.0) = 9.527m&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1545 * (48 / 12.0) = 6.180m&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ローギア&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2096 * (34 / 25.0) = 2.850m&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1545 * (48 / 25.0) =  2.966m&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　IDIOM2の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.966m&lt;/code&gt;よりロードの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.850m&lt;/code&gt;の方が小さい負荷なのでロードで坂が登れたということだと思ってます。&lt;br /&gt;
　ペダルを回す負荷値なんて書きましたが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;タイヤ周長×ギア比&lt;/code&gt;というのは結局&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ペダル一漕ぎで進む距離&lt;/code&gt;のことです。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ペダル一漕ぎで進む距離&lt;/code&gt;が上り坂を克服し易さを表す指標と考えていいと思いますが、あまりそういう話を周りで聞かないので不思議です。つまり、タイヤ径が同じ自転車で上り坂の克服し易さを比較したければ&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ギア比&lt;/code&gt;を使って、タイヤ径が違う自転車で比較したければ&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ペダル一漕ぎで進む距離&lt;/code&gt;を指標として使えばいいってことです。もっとこの認識が拡がればいいのにと思ってます。&lt;/p&gt;

&lt;h3 id=&quot;一輪車は上り坂で有利&quot;&gt;一輪車は上り坂で有利？&lt;/h3&gt;
&lt;p&gt;　一輪車には乗ったことはないのですが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ペダル一漕ぎで進む距離&lt;/code&gt;が小さいほど坂が登り易いのであれば、一輪車は坂を登り易いということになりますが、どうなのでしょう？&lt;a href=&quot;https://www.youtube.com/watch?v=WhFdxguU_dY&quot;&gt;こんな動画&lt;/a&gt;を見つけましたが、斜度も分からないし何とも言えませんがスピードを無視してペダルを回せるかどうかだけを考えれば一輪車は上り坂に強いような気もします。それに一輪車のクランク長は一般的には自転車よりも短いらしいので、スピードのことは考えず登ることだけを考えて長めのクランクを付けたらさらに楽に登れそうです。&lt;br /&gt;
　でも、自転車（二輪車）であれば、やろうと思えばギア比を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;以下にすることも出来るので自転車の方が有利であることに間違いないでしょう。&lt;br /&gt;
　それと上で比較したロードとIDIOM2のクランク長は偶々同じサイズですが、クランク長まで考慮しだすと面倒なので購入する自転車を選ぶ際には今のところ無視しています。&lt;/p&gt;

&lt;h3 id=&quot;ペダルを回せるかどうかが大事&quot;&gt;ペダルを回せるかどうかが大事&lt;/h3&gt;
&lt;p&gt;　自転車で坂を登れるかどうかっていうのは第一にペダルを回せるかどうかが大事です。全く疲労していない状態でも急勾配な坂だと、力一杯ペダルを踏み込んでも全く回せないので、こういう状態だとギア比を変えるしかありません。&lt;br /&gt;
　かなり昔のことですが、男６、７人で遠乗りしたことがあって、クロスバイクやロードバイクの人達の中で私だけがミニベロのIDIOM2でした。そして上り坂になった時、私が他のメンバーをグイグイ追い抜いて先頭になって坂の中腹でみんなを待つ状態になったことがあったのですが、「気合い入ってるね」とか「速いね」とか言われたのですが、何の事は無い、自分としてはもっと軽いギアでクルクルペダルを回してゆっくり上りたいのですが、軽いギアが無いために無理やり他の人より重いギアで漕いでいただけのことです。ギア比のことに思い至っていない人だと、上り坂はミニベロが有利なんだと勘違いするかも知れません。&lt;br /&gt;
　この時は、その後山の頂上が近づくにつれて坂が急勾配になっていき、私がペダルが踏めなくなって自転車を押して歩く羽目になったのとは対照的に、軽い高級ロードバイクの人が先頭を走っていました。&lt;/p&gt;

&lt;h3 id=&quot;坂だけを考えたらクロスバイク&quot;&gt;坂だけを考えたらクロスバイク？&lt;/h3&gt;
&lt;p&gt;　冒頭に書いたIDIOM2で登れない坂を克服することを考えながら自転車を物色していると、クロスバイクの方が良さそうな気がしています。購入後にギアだけ変えるのは面倒なので、取り敢えず最初から用意されているギア比を見ているとクロスバイクの方がワイドレンジになっていて坂には有利なようですし、リアキャリアを付けたいのでダボ穴が用意されているクロスバイクになりそうです。&lt;br /&gt;
　購入したらまた記事を書いてみようと思います。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 05 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2021-12-05/minivelo</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2021-12-05/minivelo</guid>
        
        <category>bicycle</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
  </channel>
</rss>
