<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>自己満足プログラミング</title>
    <description>Reinventing the wheel.</description>
    <link>https://happyclam.github.io/</link>
    <atom:link href="https://happyclam.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 21 Mar 2022 22:01:29 +0900</pubDate>
    <lastBuildDate>Mon, 21 Mar 2022 22:01:29 +0900</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>マンカラカラハで後手でも勝てるケース</title>
        <description>&lt;h3 id=&quot;後手でも勝てるケース&quot;&gt;後手でも勝てるケース&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/software/2021-01-22/mancala_evaluate02&quot;&gt;去年の記事&lt;/a&gt;の最後に追記しましたが、&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;の設定を「やばい」（＝最強）にしていても後手で人間が勝てるケース（豆４つ）を見つけてしまいました。適当に遊んでいて見つけたぐらいですから、&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;のユーザーの中にも後手で勝てた人はいると思います。でも&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;のAIは完全に読み切っている訳では無いのでこういうことがあっても不思議はないと思っていて、豆４つのケースでは先手必勝の結論に変わりはないと思っています。１１手読みでは必勝手順を間違えてしまうことがあるということだと思います。&lt;br /&gt;
　単純な評価関数（勝ちか負けかだけを判断）でも十分強いだろうと思っていましたが、評価関数を工夫した方がいいのかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;途中の局面からなら読み切れる&quot;&gt;途中の局面からなら読み切れる&lt;/h3&gt;
&lt;p&gt;　たまたま後手で勝つことが出来た時その手順を再現出来なくて困っていたのですが、記憶を頼りに途中まで局面を進めていって、その途中の局面からプログラムで先読みさせれば勝ち（将棋で言う「詰み」）を読み切れる場合があります。そういうやり方で後手での勝ち手順を確認したので、一例として紹介したいと思います。&lt;br /&gt;
　マンカラの棋譜をどのように表現するか、標準的なものは無いと思うので、ここでは以下の表の番号に従って、指し手を表現します。&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;の画面と対比し易いように上側（Upper）を先手、下側（Lower）を後手にして、それぞれ&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L&lt;/code&gt;の次に場所を表す数字を付加して棋譜を表現しました。&lt;/p&gt;

&lt;div style=&quot;float:left; margin: 0px 0px 0px&quot;&gt;
    &lt;table&gt;
    &lt;tr&gt;
    &lt;td rowspan=&quot;2&quot; align=&quot;center&quot;&gt;&lt;br /&gt;上側のストア&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;U6&lt;/td&gt;    
    &lt;td align=&quot;center&quot;&gt;U5&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;U4&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;U3&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;U2&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;U1&lt;/td&gt;    
    &lt;td rowspan=&quot;2&quot; align=&quot;center&quot;&gt;&lt;br /&gt;下側のストア&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;L1&lt;/td&gt;    
    &lt;td align=&quot;center&quot;&gt;L2&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;L3&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;L4&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;L5&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;L6&lt;/td&gt;        
    &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;all&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;後手勝ちの棋譜の一例５１手でゲーム終了後手の勝ち&quot;&gt;後手勝ちの棋譜の一例（５１手でゲーム終了、後手の勝ち）&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;手数&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;01&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;02&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;03&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;04&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;05&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;06&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;07&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;08&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;09&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;10&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;11&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;12&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;13&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;14&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;15&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;16&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;17&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;18&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;19&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;20&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;指し手&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U3*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L2*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U6*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U2*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U6*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U6*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U1*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U6*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U4*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U5*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;手数&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;21&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;22&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;23&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;24&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;25&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;26&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;27&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;28&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;29&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;30&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;31&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;32&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;33&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;34&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;35&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;36&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;37&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;38&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;39&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;40&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;指し手&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L6!&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L2*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L6*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U4*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L5*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L6*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L6*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U6!&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L1*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L6*&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;手数&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;41&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;42&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;43&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;44&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;45&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;46&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;47&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;48&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;49&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;50&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;51&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;指し手&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L5*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L6*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L4*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L6*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;L1!&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;※指し手の最後にピッタリなら&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;、横取りなら&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt;を付加しています。
※アプリのバージョン 1.2.4&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/yabai01.png&quot;&gt;&lt;img src=&quot;/images/yabai01.png&quot; alt=&quot;AI先手&quot; width=&quot;480&quot; height=&quot;206&quot; title=&quot;AI先手&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;※画像はゲーム開始から、U3*（ピッタリ）,U6と２手進んだ局面です。&lt;/p&gt;

&lt;p&gt;　&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;は評価値が同じ場合、乱数選択させているので上記の手順通りにならないケースもありますが、２１手目ぐらいまでは毎回同じようです。そして、そこまでいけば形勢はかなり後手有利なので、序盤を上の手順通りなぞれば後手でAIに勝つことが出来ます。&lt;/p&gt;

&lt;h3 id=&quot;負ける原因は評価関数読みの深さ&quot;&gt;負ける原因は評価関数？読みの深さ？&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;が先手で負ける原因は、序盤の局面評価が単純過ぎる所為と言えますが、勝ち、負けの判定をするには今の評価関数で間違い無いので、読みが浅いのが原因とも言えます。&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;の評価関数はアプリの紹介ページにも書いていますが、&lt;br /&gt;
　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;（先手の貯蔵所に溜まった豆の数 - 後手の貯蔵所に溜まった豆の数）&lt;/code&gt;&lt;br /&gt;
となっていて、単にその局面でどちらの豆が多いかしか評価していません。１１手先を読んでその時点でどちらの豆が多いかを評価値としています。これは先読みの手数以内にゲームが終了すれば正確なものになりますが、ゲーム途中の局面の形勢判断には向いていません。マンカラカラハのルールではゲーム終了時に自陣に残った豆を全て自分の貯蔵所に入れて数えますが、ゲームが終わっていないのに貯蔵所の豆の数で優劣を判定するのはあまり良くありません。ただ１１手も先を読んでいるので、終盤は十分強いので、そういう仕様にしていました。&lt;br /&gt;
　将棋で言えば詰み判定の時に使用する評価関数のようなものなので、序盤の形勢判断に使用すると悪手を選ぶケースがあります。&lt;/p&gt;

&lt;h3 id=&quot;悪手を特定する&quot;&gt;悪手を特定する&lt;/h3&gt;
&lt;p&gt;　初手からの必勝手順を読み切るのは今までの記事で書いてきたように時間がかかりますが、上で説明したようにある程度指し手を進めた局面から先読み、ダメなら元に戻して他の手を試すっていう方法を繰り返して徐々に序盤に遡れば、どの手が悪手だったかある程度特定出来ます。将棋と違って一局面で選べる手は最大６手しか無いのでそういうやり方が可能です。&lt;br /&gt;
　自分なりに調べたところ以下の局面でAIが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U4&lt;/code&gt;（上記の棋譜の10手目、豆が７個あるところ）と指す手が悪手のようです。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/akusyu01.png&quot;&gt;&lt;img src=&quot;/images/akusyu01.png&quot; alt=&quot;AIの悪手&quot; width=&quot;480&quot; height=&quot;206&quot; title=&quot;AIの悪手&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;※上の局面は二人対戦モードにして上記の表の棋譜を再現した途中の画像です。&lt;/p&gt;

&lt;p&gt;　上の局面でAIは11手先を読んで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U4&lt;/code&gt;（豆が７つあるところ）が好手だと判断するのですが、パッと見だと&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U5&lt;/code&gt;や&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U1&lt;/code&gt;を選べば下段の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L1&lt;/code&gt;の場所にある相手の豆を１個横取り出来るのでその手の方が良さそうに思えます。実際その後の変化を調べてみると、この局面では&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U5&lt;/code&gt;を選んで相手の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L1&lt;/code&gt;の豆を一個横取りするのが最善手のようです。&lt;br /&gt;
　今の評価関数のまま何手先まで読めばその最善手が選ばれるか調べてみました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./mancala.out                                      
2,5,0,2,7,1,0,6,1,2,8,0,7,7,
=== result = 6, 1, i = 0
=== result = 4, 4, i = 1
=== result = 5, 4, i = 2
=== result = 6, 4, i = 3
=== result = 7, 4, i = 4
=== result = 10, 4, i = 5
=== result = 9, 4, i = 6
=== result = 10, 4, i = 7
=== result = 11, 4, i = 8
=== result = 10, 4, i = 9
=== result = 11, 4, i = 10
=== result = 12, 4, i = 11
=== result = 10, 4, i = 12
=== result = 10, 4, i = 13
=== result = 9, 4, i = 14
=== result = 8, 5, i = 15
=== result = 11, 5, i = 16
=== result = 12, 5, i = 17
=== result = 14, 5, i = 18
=== result = 12, 5, i = 19
=== result = 19, 5, i = 20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　&lt;a href=&quot;/software/2020-06-07/mancala&quot;&gt;以前の記事&lt;/a&gt;に書きましたが、AI（先読みメソッド）の戻り値は、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;評価値, 指し手&lt;/code&gt;となっていて&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;は読みの深さを表すループカウンターです（i=0は一手読み）。&lt;br /&gt;
　一手読み（i=0）だと当然相手の豆を横取り出来る手（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U1&lt;/code&gt;）を選びますが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U1&lt;/code&gt;を選ぶとその直後に相手に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U2&lt;/code&gt;を指されて豆３個を横取りされます。そのため２手読み以上ではずっと&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U4&lt;/code&gt;を最善手と判定しますが、１６手読みの時（i=15）に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U5&lt;/code&gt;が最善手と変わります。１６手読んでようやく最善手に辿り着くようです。でもこの辺りの読みの深さは一手読みを深くする毎に消費時間も指数関数的に増大します。２０手先まで読むのにハイスペックPC（Apple M1 Pro搭載のM1 MacBook Pro 14インチ）でも一晩掛かりますし、１６手読みでも２分ぐらいかかりますので、スマホアプリにそのまま適用するわけにはいきません。やはり今より強くするには読みの深さより、評価関数を修正するべきでしょう。&lt;br /&gt;
　あるいは時間をかけて全ての手を読んで序盤だけを定石データ化するのがいいと思いますが、今までの記事で書いているように普通のやり方で全ての手を読み切るには何ヶ月あるいは何年も掛かると思います。それか既にどこかにマンカラの定石データがあるのかも知れませんが、どうなんでしょう？&lt;/p&gt;

&lt;h3 id=&quot;他のアプリにも後手で勝てるか&quot;&gt;他のアプリにも後手で勝てるか&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/software/2021-01-22/mancala_evaluate02&quot;&gt;「マンカラは後手でも勝てるか？」の記事&lt;/a&gt;で対戦成績を紹介したように、&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;マンカラナッツ&lt;/a&gt;は後手で他のアプリに何度も勝っていますが、先手で他のアプリには負けていませんでした。その時の棋譜を保存しているわけではないのですが、新しいアプリも増えているので改めて確認してみると、&lt;a href=&quot;/software/2021-01-22/mancala_evaluate02&quot;&gt;「マンカラは後手でも勝てるか？」の記事&lt;/a&gt;で対戦させたアプリは最強レベルにすると初手に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U3&lt;/code&gt;か&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U6&lt;/code&gt;を選ぶものが多く、&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;マンカラナッツ&lt;/a&gt;が後手で勝っていたのは相手のAIが初手に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U6&lt;/code&gt;を選んだ場合がほとんどで、初手に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;U3&lt;/code&gt;（ピッタリ）を選ばれた場合には、後手を持って勝つ手順を見つけることは出来ませんでした。&lt;/p&gt;

&lt;h3 id=&quot;現状は粘りが効かない&quot;&gt;現状は粘りが効かない&lt;/h3&gt;
&lt;p&gt;　現状の&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;マンカラナッツ&lt;/a&gt;はもう一つ問題があって、先読みの過程で最善手を続けても負けることが確定すると１個差での負けでも１０個差の負けでも同じ負けと判断して、時間短縮のために先読みを省略していました。その結果もう少し僅差の負けに持ち込める場合でも大差の負けを喫するケースがあります。これは元々マンカラというゲームが先手必勝なのか後手必勝なのかを確認するために作ったアプリだったのでこういう仕様にしていたのですが、この点も改善する必要があると思っていました。&lt;br /&gt;
　&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;のユーザーの中には、終盤に&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;が自分の豆を取られる手を選んできて、「このアプリおかしい」、「バグってる」と思った方もいると思いますが、&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ&lt;/a&gt;の右上に表示している絵文字による勝ち負けの判定自体は間違っていないはずです。&lt;br /&gt;
　でもこのままだと誤解され易いので、探索時に勝ちが確定した時に評価値を最大値（先手勝ち）あるいは最小値（後手勝ち）に置き換えていたのを、評価値と勝ち負け判定の数値は別々に返すように局面の先読みメソッドを修正しました（バージョン1.3.0以降）。これでゲーム終了まで最善を尽くす（最大個数差で勝つ、あるいは最小個数差で負ける）ようになったはずです。&lt;/p&gt;

&lt;h3 id=&quot;評価関数は今のまま&quot;&gt;評価関数は今のまま？&lt;/h3&gt;
&lt;p&gt;　評価関数についてピッタリや横取りが出来る局面をプラス評価（＝相手のピッタリや横取りを防ぐマイナス評価）することなど局面評価の材料をちょっと考えてみましたが、なかなか良い案が思いつきません。「連続して着手出来る手（ピッタリ）がなるべく多い形（自分の貯蔵所から１個、２個、３個…と並ぶ形）を理想として、それとのズレを評価値にしてみてはどうか」なんて考えてみましたが、横取りされることも考慮しなければならないので静的評価のやり方がよく分かりません。こういう時こそ機械学習を使ってみたい気もしますが、将棋ほど複雑じゃないので今の評価関数で十分な気もするので、取り敢えず今の評価関数が&lt;br /&gt;
　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;（先手の貯蔵所に溜まった豆の数 - 後手の貯蔵所に溜まった豆の数）&lt;/code&gt;  &lt;br /&gt;
となっているところを、&lt;br /&gt;
　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;（先手の自陣の全ての豆の数 - 後手の自陣の全ての豆の数）&lt;/code&gt;&lt;br /&gt;
に変更して試してみました。&lt;br /&gt;
　既に書きましたが、マンカラカラハのルールではゲーム終了時に自陣に残った豆を全て自分の貯蔵所に入れて数えますので、評価関数内で貯蔵所に溜まった豆の数だけを数えるのではなく、ゲーム終了時と同じように自陣の豆全てを数えてその数が勝っている方を有利と考えてみれば何か変化があるかもと思ってやってみました。&lt;br /&gt;
　そうすると上で紹介した局面にはなりませんが、すぐに人間が後手で勝てる他の手順を見つけることが出来ました。将棋の駒得だけを考慮する評価関数のように、自陣に豆を溜め込んで中盤で相手に豆を大量に横取りされる感じです。ということでこれはすぐにボツにしましたが、序盤だけこの評価関数を使って終盤は今使用している評価関数を使う方法もアリかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;読みを一手深くしてみる&quot;&gt;読みを一手深くしてみる&lt;/h3&gt;
&lt;p&gt;　今度は「やばい」モードの時だけ試しに読みを一手深くしてみました（バージョン1.3.0以降）。古いスマホだとちょっと待たされる感じにはなりましたが、上で説明した悪手を指す局面になる前に着手を変えてきました。しばらくこれで様子を見ようと思います。&lt;br /&gt;
　当面はバージョン1.3.0を&lt;a href=&quot;https://play.google.com/apps/testing/mancala.io.github.happyclam&quot;&gt;ベータ版のまま公開&lt;/a&gt;しておきますので違いを試すことも出来ます。スマホからの場合は&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリのページ&lt;/a&gt;からダウンロード可能です。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Thu, 10 Mar 2022 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/software/2022-03-10/mancala_evaluate03</link>
        <guid isPermaLink="true">https://happyclam.github.io/software/2022-03-10/mancala_evaluate03</guid>
        
        <category>dart</category>
        
        <category>android</category>
        
        <category>flutter</category>
        
        <category>c++</category>
        
        <category>mancala</category>
        
        <category>shogi</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>lishogi(Minishogi)に挑戦</title>
        <description>&lt;h3 id=&quot;lishogiと５五将棋アプリを対戦させてみた&quot;&gt;&lt;a href=&quot;https://lishogi.org&quot;&gt;lishogi&lt;/a&gt;と&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;を対戦させてみた&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;https://lishogi.org&quot;&gt;lishogi&lt;/a&gt;に５五将棋（Minishogi）が実装されたようです。ちょうど&lt;a href=&quot;http://happyclam.github.io/project/2020-01-02/minishogi&quot;&gt;２年前の記事&lt;/a&gt;で&lt;a href=&quot;http://hgm.nubati.net/miniShogi.html&quot;&gt;GNU mini-shogi&lt;/a&gt;のサイトで公開されているフリーソフトのPC用５五将棋エンジンと&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;と対戦させて、アプリが勝てなかったことを書きました。&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;のAI部分は２年前と同じですので、普通に考えれば前回同様アプリの惨敗になることが予想されますが、どうなったでしょうか&lt;/p&gt;

&lt;h3 id=&quot;スマホのハードウェア進化に期待&quot;&gt;スマホのハードウェア進化に期待&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;http://hgm.nubati.net/miniShogi.html&quot;&gt;GNU mini-shogi&lt;/a&gt;で公開されているフリーのPCエンジンは１対１の対戦用なので一手に数十秒使っていましたが、&lt;a href=&quot;https://lishogi.org&quot;&gt;lishogi&lt;/a&gt;は複数人が利用するWebアプリなので一人に多くのリソースを割けません、そこに勝機があるかもと思いました。&lt;br /&gt;
　また、&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;側もスマホの性能が上がったので、アプリを最強レベルに設定して何とか使える状態になってきました。&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;を既にお使いの方はご存知だと思いますが、AIを最強レベルに設定すると一手に時間がかかり過ぎるので、作った本人が言うのもなんですが、とてもAIの指し手を待ってられませんでした。自分も今まではスマホで最強レベルではほとんど使っていません。PC上でCUI環境でテストするか、PC上でエミュレータを使って遊んでいました。&lt;br /&gt;
　でも最近自分もスマホの機種変更（Xperia 10 Ⅲ、RAM6GB）をして、これなら最強レベル（瞑想モード）でも何とか使えるなと感じたので試してみることにしました。&lt;/p&gt;

&lt;h3 id=&quot;まずは最強レベルで試してみる&quot;&gt;まずは最強レベルで試してみる&lt;/h3&gt;
&lt;p&gt;　流石に最強レベルには勝てないだろうと思いながらも、まずは最強モード（YaneuraOu V6.00 レベル８）で、先手と後手一局ずつ手動で対戦してみました。持ち時間設定は最長にしました。&lt;/p&gt;

&lt;p&gt;　※以下はアプリから出力した棋譜（CSA形式）です。&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;にコピペすれば棋譜を再現出来ます。&lt;/p&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu01&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu01&quot;&gt;01. 先手:アプリ　後手:lishogi　４０手まで後手の勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+AI
N-Player
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
+
+4544KI
-4132KA
+5453FU
-5141HI
+4433KI
-2122KI
+3332KI
-3132GI
+0054KA
-2233KI
+1514HI
-0043KI
+5445KA
-3323KI
+4523KA
-3223GI
+2543KA
-0022KA
+5554OU
-2314GI
+0044KI
-4143HI
+5443OU
-0021KA
+0032KI
-0041HI
+0042HI
-2132KA
+4332OU
-0031KI
+3243OU
-3142KI
+4354OU
-4243KI
+5445OU
-4344KI
+3544GI
-4144HI
+4535OU
-0045HI
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu02&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu02&quot;&gt;02. 先手:lishogi　後手:アプリ　１９手まで先手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+Player
N-AI
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
-
+4544KI
-4132KA
+2534KA
-3142GI
+3445KA
-2122KI
+1525HI
-4243GI
+2522HI
-4344GI
+3544GI
-1122OU
+0033GI
-2231OU
+0042KI
-3121OU
+4232KI
-2111OU
+3322GI
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;　結果は２局とも&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;の完敗でした。とても勝てそうな気がしなかったので、今度はlishogiのレベルを下げてレベル５で先手と後手３局ずつ計６局対戦させてみました。&lt;/p&gt;

&lt;h3 id=&quot;lishogiをレベル５に下げて６局対戦&quot;&gt;lishogiをレベル５に下げて６局対戦&lt;/h3&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu03&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu03&quot;&gt;03. 先手:lishogi　後手:アプリ　３０手まで後手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+Player
N-AI
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
+
+4544KI
-4132KA
+2534KA
-3142GI
+5545OU
-5131HI
+1525HI
-3241KA
+3524GI
-3134HI
+4434KI
-2122KI
+2535HI
-4114KA
+0052HI
-2232KI
+3515HI
-0025KA
+2435GI
-3243KI
+1525HI
-1425UM
+0055KA
-0033HI
+3433KI
-4333KI
+5242HI
-0034KI
+3534GI
-2534UM
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu04&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu04&quot;&gt;04. 先手:lishogi　後手:アプリ　２６手まで後手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+Player
N-AI
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
+
+4544KI
-4132KA
+2534KA
-3142GI
+3425KA
-2122KI
+3524GI
-5131HI
+4445KI
-3241KA
+4534KI
-4152KA
+3423KI
-2223KI
+2552KA
-2324KI
+0044KA
-0033GI
+1545HI
-3344GI
+4544HI
-3135RY
+0045GI
-0022KA
+5243KA
-2244KA
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu05&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu05&quot;&gt;05. 先手:lishogi　後手:アプリ　２０手まで後手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+Player
N-AI
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
+
+2534KA
-4132KA
+1525HI
-5141HI
+2524HI
-2122KI
+5453FU
-2233KI
+4554KI
-3254KA
+3412KA
-3324KI
+5554OU
-0043KI
+5455OU
-0054HI
+5545OU
-5444HI
+3544GI
-4344KI
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu06&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu06&quot;&gt;06. 先手:アプリ　後手:lishogi　４６手まで後手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+AI
N-Player
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
+
+4544KI
-2122KI
+5453FU
-1213FU
+2534KA
-3142GI
+1525HI
-4253GI
+4453KI
-5153HI
+0054GI
-5352HI
+3452KA
-4152KA
+0051HI
-0041KA
+3534GI
-0031KI
+5443GI
-5243KA
+3443GI
-0033GI
+0015KA
-0024FU
+2535HI
-1121OU
+5545OU
-4123KA
+4555OU
-2332KA
+4332GI
-2232KI
+3533HI
-3233KI
+0054KA
-0043GI
+0012GI
-2112OU
+5445KA
-1222OU
+5131RY
-2231OU
+0035KI
-0044GI
+3544KI
-3344KI
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu07&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu07&quot;&gt;07. 先手:アプリ　後手:lishogi　５５手まで先手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+AI
N-Player
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
-
+4544KI
-2122KI
+5453FU
-1213FU
+2534KA
-3142GI
+1525HI
-4253GI
+4453KI
-5153HI
+0054GI
-5352HI
+3452KA
-4152KA
+0051HI
-0041KA
+3534GI
-0031KI
+5443GI
-5243KA
+3443GI
-0042FU
+2522HI
-0044GI
+5544OU
-4243FU
+4443OU
-3122KI
+5141HI
-0021HI
+0012FU
-1112OU
+0034KA
-0023FU
+0031KI
-0032GI
+3132KI
-2141HI
+3241KI
-0033HI
+4344OU
-3334HI
+4434OU
-0052KA
+3445OU
-2232KI
+0044KA
-3222KI
+0032HI
-5234KA
+4534OU
-1221OU
+3231HI
-2112OU
+0011HI
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;cp_actab&quot;&gt;
    &lt;input id=&quot;kifu08&quot; type=&quot;radio&quot; name=&quot;kifu&quot; /&gt;
    &lt;label for=&quot;kifu08&quot;&gt;08. 先手:アプリ　後手:lishogi　７３手まで先手勝ち&lt;/label&gt;
    &lt;div class=&quot;cp_actab-content&quot;&gt;
    &lt;p&gt;
        &lt;pre style=&quot;font-size: 80%;&quot;&gt;&lt;code&gt;&apos; #５五将棋 https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam 
&apos;No. 0
&apos;
V2.2
N+AI
N-Player
P1-HI-KA-GI-KI-OU
P2 *  *  *  * -FU
P3 *  *  *  *  * 
P4+FU *  *  *  * 
P5+OU+KI+GI+KA+HI
-
+4544KI
-2122KI
+5453FU
-1213FU
+2534KA
-3142GI
+1525HI
-4253GI
+4453KI
-5153HI
+0054GI
-5352HI
+3452KA
-4152KA
+0051HI
-0041KI
+5152HI
-0033KA
+0044KA
-3344KA
+3544GI
-4152KI
+0031KA
-0032HI
+3122KA
-3222HI
+0023KI
-0021FU
+2322KI
-2122FU
+0041HI
-0021KI
+4433GI
-0031KA
+2515HI
-0014KA
+1514HI
-1314FU
+4145RY
-0015HI
+0025KA
-3142KA
+3342GI
-5242KI
+0024KA
-0033GI
+2415KA
-1415TO
+0013HI
-0012KA
+1315HI
-2132KI
+1514HI
-3223KI
+1412HI
-1112OU
+0013FU
-1211OU
+4542RY
-0035HI
+0045KA
-3545RY
+5445GI
-0021KA
+0031HI
-2313KI
+3133RY
-0054FU
+4554GI
-1323KI
+3323RY
-2112KA
+2322RY
        &lt;/code&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;　結果はアプリの５勝１敗でレベル５なら勝てそうですが、lishogiは序盤の指し手を結構変えてくるので、余裕かましてる感じがありますね。&lt;/p&gt;

&lt;h3 id=&quot;lishogiのレベルは何が基準なのか&quot;&gt;lishogiのレベルは何が基準なのか&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;のAIレベルの違いは、主に読みの深さ（３手〜５手読み）の違いだけで、瞑想モードだけは絞り込む候補手の数を多めにしています。また、同じ局面ではほとんど同じ手を選びます（評価値が同じ場合はランダム選択にしてますが、同じ評価値になる時はあまり無いと思います）が、lishogiは結構指し手を変えてくるようです。lishogiは機械学習型のAIだと思うので、レベルの違いはどうやっているのでしょう？&lt;br /&gt;
　もしかしてレベルが高いと第１候補手、低いと第２、第３と下げているのかなとか考えましたが、それだとこの局面ではこの一手という絶対手が存在するときに困ります。第１候補手以外は自玉が詰んでしまうような局面だと、低いレベルでも第１候補手を選ばないとすぐに負けてしまうからです。おそらく&lt;a href=&quot;http://yaneuraou.yaneu.com/2020/12/20/deep-learning-shogi-features/&quot;&gt;この記事（「Deep Learning将棋は従来の将棋ソフトとここが違うぞ」）&lt;/a&gt;に書いてあるような方法で、特に評価値に大きな違いがある局面ではCPUを使った先読みの結果を優先して、それ以外の通常の指し手はGPUを使った候補手を選択しているような気がしますが、あくまで想像です。&lt;/p&gt;

&lt;h3 id=&quot;５五将棋アプリの今後&quot;&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;の今後&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/programming/2021-08-21/nodejs&quot;&gt;以前の記事&lt;/a&gt;でネットワーク対戦機能を付けるみたいなことを書きましたが、lishogiでスマホを使った５五将棋のネットワーク対戦が出来るようなのでニーズは減った気がするし、やはり運用が大変そうなので後回しにしようかと思ってます。&lt;br /&gt;
　それより今回の対戦で&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;の評価関数の出来自体はそこそこ良いんじゃないかなんて思ってまして、&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;のAI部分をC++で作り直してもっと深く読めるようにして再度対戦させてみたいと思ってます。でもそうすると、AI部分はそれほどでもないのですが、今のJavascript製のGUI部分を一から作る必要がある？ので、その作業量が大きいのでなかなか手をつける気になりません。&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;を使っていただいている方は、気長にお待ち頂きたいと思います。&lt;br /&gt;
　あと、&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;は遅過ぎて使えないと思っていた方もスマホをハイスペックなものに変える機会があれば、もう一度試して欲しいと思います。&lt;/p&gt;

&lt;p&gt;　それから&lt;a href=&quot;http://hgm.nubati.net/miniShogi.html&quot;&gt;GNU mini-shogiのサイト&lt;/a&gt;でかなり昔から公開されているフリーのPC用の５五将棋エンジンは後発の&lt;a href=&quot;https://lishogi.org&quot;&gt;lishogi&lt;/a&gt;に勝てないのか？も少し気になるのですが、どなたか試す人はいないのでしょうか？lishogiを作った人たちは絶対既に試していると思うので、勝つことは確認済みなのでしょうねぇ。暇な時に一度試してみたいと思ってます。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 02 Jan 2022 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/project/2022-01-02/lishogi</link>
        <guid isPermaLink="true">https://happyclam.github.io/project/2022-01-02/lishogi</guid>
        
        <category>coffeescript</category>
        
        <category>cordova</category>
        
        <category>android</category>
        
        <category>javascript</category>
        
        <category>shogi</category>
        
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>ミニベロは上り坂で有利なのか？</title>
        <description>&lt;h3 id=&quot;ロードバイクで登れるけどミニベロで登れない坂がある&quot;&gt;ロードバイクで登れるけど、ミニベロで登れない坂がある&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/miscellaneous/2020-05-16/bicycle01&quot;&gt;以前の記事「ロード系ミニベロのカスタマイズ」&lt;/a&gt;が結構読まれているようなので、また自転車ネタを書いてみます。&lt;br /&gt;
　新しく自転車を買ってみようかと思っているのですが、その自転車に求める条件の一つに「近所にある山を登り切りたい」という変な拘りがあります。全国的に有名な急坂とかそういう大層なものではないのですが、&lt;a href=&quot;/miscellaneous/2020-05-16/bicycle01&quot;&gt;以前の記事&lt;/a&gt;で紹介したIDIOM2では登れないけど、今年売っ払ったロードバイクなら登れた坂というのが近所にあって、IDIOM2よりかは上り坂に強い自転車を選びたいと思ってます。&lt;br /&gt;
　そこでフロントシングルでどんなギアが用意されていればいいか考えてみました。&lt;/p&gt;

&lt;h3 id=&quot;ロードとidiom2の比較&quot;&gt;ロードとIDIOM2の比較&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ロード　　&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;　IDIOM2　&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;クランク長&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;165mm&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;165mm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;フロント&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;50-34T&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;48T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ギア&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;11-25T&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12-25T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;タイヤ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;23-700&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;28-451&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　自分が持っている2010年式IDIOM2はロード系と言われるだけあってフロントギアは大きめ（48T）ですがスプロケット（SHIMANO HG50 8S 12-25T）のレンジが狭く、ローギアがロードと同じ25Tで坂には向いていません。&lt;br /&gt;
　一般的にミニベロは上り坂で有利なんて言われたりしますが、車体の重さやクランク長の違いなどの要素もあるものの、ペダルを回す負荷を考えたら結局ギア比で決まると思います。大きな車輪を回すより小さな車輪を回す方が負荷は低くはなりますが、その分を考慮した値で比較すれば700Cも小径車も同じだと思います。700Cと451のタイヤを回す負荷を比較する場合、ギア比を掛けてやれば求められるので&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;タイヤの外径×ギア比&lt;/code&gt;の値を比較すればいいはずです。&lt;br /&gt;
　タイヤの外径をタイヤサイズ表記に使われている&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;700&lt;/code&gt;や&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;451&lt;/code&gt;を使って計算してもいいのですが、700Cのタイヤのビード座直径は実際には700mmではないようですし、同じタイヤサイズでもタイヤの太さによってタイヤの高さ（外径）も変わるのでここではタイヤの外径の代わりに、タイヤ周長を使おうと思います。タイヤ周長は多くのサイクルコンピュータに予め用意されているのでタイヤの太さによる違いなども考慮されているのでより正確だと思います。それと、タイヤ外径とタイヤ周長の違いは定数である円周率（3.14）を掛けただけなので、タイヤ外径の代わりに周長を使っても問題ありません。&lt;/p&gt;

&lt;p&gt;　ここでは&lt;a href=&quot;https://www.cyclabo.com/ja/topics/vnu1m1awr7/&quot;&gt;このサイト&lt;/a&gt;からタイヤ周長の数値を引っ張ってきて、ロードとミニベロのペダルを回す負荷値（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;タイヤ周長×ギア比&lt;/code&gt;）を計算してみました。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ロード　　&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;　IDIOM2　&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;タイヤサイズ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;700x23C(ETRTO 23-622)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20x1-1/8(ETRTO 28-451)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;トップギア&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2096 * (50 / 11.0) = 9.527m&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1545 * (48 / 12.0) = 6.180m&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ローギア&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2096 * (34 / 25.0) = 2.850m&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1545 * (48 / 25.0) =  2.966m&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　IDIOM2の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.966m&lt;/code&gt;よりロードの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.850m&lt;/code&gt;の方が小さい負荷なのでロードで坂が登れたということだと思ってます。&lt;br /&gt;
　ペダルを回す負荷値なんて書きましたが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;タイヤ周長×ギア比&lt;/code&gt;というのは結局&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ペダル一漕ぎで進む距離&lt;/code&gt;のことです。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ペダル一漕ぎで進む距離&lt;/code&gt;が上り坂を克服し易さを表す指標と考えていいと思いますが、あまりそういう話を周りで聞かないので不思議です。もっとこの認識が拡がればいいのにと思ってます。&lt;/p&gt;

&lt;h3 id=&quot;一輪車は上り坂で有利&quot;&gt;一輪車は上り坂で有利？&lt;/h3&gt;
&lt;p&gt;　一輪車には乗ったことはないのですが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ペダル一漕ぎで進む距離&lt;/code&gt;が小さいほど坂が登り易いのであれば、一輪車は坂を登り易いということになりますが、どうなのでしょう？&lt;a href=&quot;https://www.youtube.com/watch?v=WhFdxguU_dY&quot;&gt;こんな動画&lt;/a&gt;を見つけましたが、斜度も分からないし何とも言えませんがスピードを無視してペダルを回せるかどうかだけを考えれば一輪車は上り坂に強いような気もします。それに一輪車のクランク長は一般的には自転車よりも短いらしいので、スピードのことは考えず登ることだけを考えて長めのクランクを付けたらさらに楽に登れそうです。&lt;br /&gt;
　でも、自転車（二輪車）であれば、やろうと思えばギア比を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;以下にすることも出来るので自転車の方が有利であることに間違いないでしょう。&lt;br /&gt;
　それと上で比較したロードとIDIOM2のクランク長は偶々同じサイズですが、クランク長まで考慮しだすと面倒なので購入する自転車を選ぶ際には今のところ無視しています。&lt;/p&gt;

&lt;h3 id=&quot;ペダルを回せるかどうかが大事&quot;&gt;ペダルを回せるかどうかが大事&lt;/h3&gt;
&lt;p&gt;　自転車で坂を登れるかどうかっていうのは第一にペダルを回せるかどうかが大事です。全く疲労していない状態でも急勾配な坂だと、力一杯ペダルを踏み込んでも全く回せないので、こういう状態だとギア比を変えるしかありません。&lt;br /&gt;
　かなり昔のことですが、男６、７人で遠乗りしたことがあって、クロスバイクやロードバイクの人達の中で私だけがミニベロのIDIOM2でした。そして上り坂になった時、私が他のメンバーをグイグイ追い抜いて先頭になって坂の中腹でみんなを待つ状態になったことがあったのですが、「気合い入ってるね」とか「速いね」とか言われたのですが、何の事は無い、自分としてはもっと軽いギアでクルクルペダルを回してゆっくり上りたいのですが、軽いギアが無いために無理やり他の人より重いギアで漕いでいただけのことです。ギア比のことに思い至っていない人だと、上り坂はミニベロが有利なんだと勘違いするかも知れません。&lt;br /&gt;
　この時は、その後山の頂上が近づくにつれて坂が急勾配になっていき、私がペダルが踏めなくなって自転車を押して歩く羽目になったのとは対照的に、軽い高級ロードバイクの人が先頭を走っていました。&lt;/p&gt;

&lt;h3 id=&quot;坂だけを考えたらクロスバイク&quot;&gt;坂だけを考えたらクロスバイク？&lt;/h3&gt;
&lt;p&gt;　冒頭に書いたIDIOM2で登れない坂を克服することを考えながら自転車を物色していると、クロスバイクの方が良さそうな気がしています。購入後にギアだけ変えるのは面倒なので、取り敢えず最初から用意されているギア比を見ているとクロスバイクの方がワイドレンジになっていて坂には有利なようですし、リアキャリアを付けたいのでダボ穴が用意されているクロスバイクになりそうです。&lt;br /&gt;
　購入したらまた記事を書いてみようと思います。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 05 Dec 2021 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2021-12-05/minivelo</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2021-12-05/minivelo</guid>
        
        <category>bicycle</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>M1 Macbook ProのCPU性能</title>
        <description>&lt;h3 id=&quot;macbook12インチでスマホアプリ開発してた人&quot;&gt;Macbook12インチでスマホアプリ開発してた人&lt;/h3&gt;
&lt;p&gt;&lt;span id=&quot;back1&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　リリース済みのアプリの多くはCordova製なので、最初はブラウザさえあれば開発出来るものでした。でも途中からアプリにファイル保存機能を付けたり、Firebaseの機能を使い始めるとエミュレータを使った開発が必要になって来て、非力なMacbook12で開発作業をするのは苦行に近いものでした&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;br /&gt;
　で、ようやく以前から欲しかったMacbookProを購入し、別世界を体感しています。&lt;/p&gt;

&lt;div style=&quot;width:640px; margin: 0 auto;&quot;&gt;
&lt;div style=&quot;float:left; margin: 0px 20px 0px;&quot;&gt;
&lt;a href=&quot;/images/macbook_pro1.png&quot;&gt;&lt;img width=&quot;240&quot; height=&quot;183&quot; src=&quot;/images/macbook_pro1.png&quot; alt=&quot;Macbook Pro 2021 表&quot; title=&quot;M1 Macbook Pro 14インチ 表&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/images/macbook_pro2.png&quot;&gt;&lt;img width=&quot;240&quot; height=&quot;186&quot; src=&quot;/images/macbook_pro2.png&quot; alt=&quot;Macbook Pro 2021 裏&quot; title=&quot;M1 Macbook Pro 14インチ 裏&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;all&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;width:640px; margin: 0 auto;&quot;&gt;
&lt;div style=&quot;float:left; margin: 0px 20px 0px;&quot;&gt;
&lt;a href=&quot;/images/macbook_comp1.png&quot;&gt;&lt;img width=&quot;240&quot; height=&quot;181&quot; src=&quot;/images/macbook_comp1.png&quot; alt=&quot;Macbook12との比較 上&quot; title=&quot;Macbook12との比較 真上から&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/images/macbook_comp2.png&quot;&gt;&lt;img width=&quot;240&quot; height=&quot;126&quot; src=&quot;/images/macbook_comp2.png&quot; alt=&quot;Macbook12との比較 横&quot; title=&quot;Macbook12との比較 側面&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;all&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　Macbook12と比較するとかなり大きく、重い（1.6Kg）ので持ち歩く気にはなりません。&lt;/p&gt;

&lt;h3 id=&quot;cpu性能比較１&quot;&gt;CPU性能比較１&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/software/2020-09-19/js_dart_cpp&quot;&gt;以前の記事&lt;/a&gt;で２×６列のマンカラカラハで先手必勝を読み切るまでに要する時間を３つのプログラミング言語（Dart,TypeScript,C++）で比較しましたが、今回は同じC++のソースを使ってCPUによる比較をしてみたいと思います。Intelの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Core i7-2600K&lt;/code&gt;とARM系&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apple M1 Pro&lt;/code&gt;、４コアと１０コア、比較の基準がバラバラですが、単に自分が持っているPCでどれだけ性能が上がったか知りたいだけです。&lt;br /&gt;
　まずは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Core i7-2600K&lt;/code&gt;（Ubuntu機）側から。&lt;a href=&quot;/software/2020-09-19/js_dart_cpp&quot;&gt;前回の記事&lt;/a&gt;と出力内容が違うのは、&lt;a href=&quot;/software/2020-09-19/js_dart_cpp&quot;&gt;前回の記事&lt;/a&gt;にも書いた通りバグがあったためです。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./mancala.out
0,2,2,2,2,2,2,0,2,2,2,2,2,2,
=== result = 4, 5, i = 1
=== result = 3, 5, i = 2
=== result = 1, 6, i = 3
=== result = 3, 5, i = 4
=== result = 5, 5, i = 5
=== result = 4, 5, i = 6
=== result = 5, 5, i = 7
=== result = 4, 5, i = 8
=== result = 4, 5, i = 9
=== result = 5, 6, i = 10
=== result = 5, 6, i = 11
=== result = 5, 5, i = 12
=== result = 5, 5, i = 13
=== result = 5, 5, i = 14
=== result = 6, 5, i = 15
=== result = 12, 5, i = 16
=== result = 999, 5, i = 17
467263.232000[ms]
999, 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span id=&quot;back2&quot;&gt;&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;　&lt;a href=&quot;/software/2020-09-19/js_dart_cpp&quot;&gt;前回の記事&lt;/a&gt;より実行時間が短縮しているのもバグを修正した所為で、前回と同じPCで実行しています。&lt;br /&gt;
　続いて、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apple M1 Pro&lt;/code&gt;側です。初めてのARMベースのCPUということでコンパイルするのも一手間&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;だったのですが、&lt;a href=&quot;https://zenn.dev/ress/articles/069baf1c305523dfca3d&quot;&gt;この記事&lt;/a&gt;を参考にして解決できました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./mancala.out 
0,2,2,2,2,2,2,0,2,2,2,2,2,2,
=== result = 4, 5, i = 1
=== result = 3, 5, i = 2
=== result = 1, 6, i = 3
=== result = 3, 5, i = 4
=== result = 5, 5, i = 5
=== result = 4, 5, i = 6
=== result = 5, 5, i = 7
=== result = 4, 5, i = 8
=== result = 4, 5, i = 9
=== result = 5, 6, i = 10
=== result = 5, 6, i = 11
=== result = 5, 5, i = 12
=== result = 5, 5, i = 13
=== result = 5, 5, i = 14
=== result = 6, 5, i = 15
=== result = 12, 5, i = 16
=== result = 999, 5, i = 17
274362.594000[ms]
999, 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　同じ結果を得るのに要した時間は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Core i7-2600K&lt;/code&gt;が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;467秒&lt;/code&gt;だったのに対して、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apple M1 Pro&lt;/code&gt;では&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;274秒&lt;/code&gt;でした。
　ちなみに実行結果の最後の行、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;999, 5&lt;/code&gt;は、以下の表の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;の位置を先手が初手に選べば、先手が勝てることを意味しています。２×６列のマンカラカラハは先手必勝のゲームです、詳しくは&lt;a href=&quot;/software/2020-06-07/mancala&quot;&gt;こちらの記事&lt;/a&gt;に書いています。&lt;/p&gt;

&lt;div style=&quot;float:left; margin: 0px 15px 0px&quot;&gt;
    &lt;table&gt;
    &lt;tr&gt;
    &lt;td rowspan=&quot;4&quot; align=&quot;center&quot;&gt;0↓&lt;/td&gt;
    &lt;td colspan=&quot;6&quot; align=&quot;center&quot;&gt;後手&lt;/td&gt;    
    &lt;td rowspan=&quot;4&quot; align=&quot;center&quot;&gt;7↑&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;13&lt;br /&gt;←&lt;/td&gt;    
    &lt;td align=&quot;center&quot;&gt;12&lt;br /&gt;←&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;11&lt;br /&gt;←&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;10&lt;br /&gt;←&lt;/td&gt;    
    &lt;td align=&quot;center&quot;&gt;9&lt;br /&gt;←&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;8&lt;br /&gt;←&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td colspan=&quot;6&quot; align=&quot;center&quot;&gt;先手&lt;/td&gt;    
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt;1&lt;br /&gt;→&lt;/td&gt;    
    &lt;td align=&quot;center&quot;&gt;2&lt;br /&gt;→&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;3&lt;br /&gt;→&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;4&lt;br /&gt;→&lt;/td&gt;    
    &lt;td align=&quot;center&quot;&gt;&lt;font color=&quot;red&quot;&gt;5&lt;/font&gt;&lt;br /&gt;→&lt;/td&gt;
    &lt;td align=&quot;center&quot;&gt;6&lt;br /&gt;→&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;all&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　３×６列や４×６列のカラハでどうなるのか確認したいところですが、CPUがそこそこ速くなったぐらいでは結果を得るのに数ヶ月以上掛かると思われるので他の工夫が必要だと思ってます。&lt;/p&gt;

&lt;p&gt;　ついでにMacbook12インチでも試してみました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;% ./mancala.out
0,2,2,2,2,2,2,0,2,2,2,2,2,2,
=== result = 4, 5, i = 1
=== result = 3, 5, i = 2
=== result = 1, 6, i = 3
=== result = 3, 5, i = 4
=== result = 5, 5, i = 5
=== result = 4, 5, i = 6
=== result = 5, 5, i = 7
=== result = 4, 5, i = 8
=== result = 4, 5, i = 9
=== result = 5, 6, i = 10
=== result = 5, 6, i = 11
=== result = 5, 5, i = 12
=== result = 5, 5, i = 13
=== result = 5, 5, i = 14
=== result = 6, 5, i = 15
=== result = 12, 5, i = 16
=== result = 999, 5, i = 17
440331.482000[ms]
999, 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;440秒&lt;/code&gt;ということで意外だったのですが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Core i7-2600K&lt;/code&gt;（Ubuntu機）よりMacbook12インチ（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intel Core M-5Y51&lt;/code&gt;）の方が速いんですね。普段メインで使っていたUbuntu機の方が断然レスポンスが良いと感じていたのはメモリ（12GB）の差でしょうか？Macbook12インチ（メモリ8GB）もメモリ増設していればそこそこ開発用として使えていたのかも知れません。&lt;br /&gt;
　ちょっと気になったので検索したら&lt;a href=&quot;https://www.cpu-monkey.com/ja/compare_cpu-intel_core_m_5y51-454-vs-intel_core_i7_2600k-6&quot;&gt;こんなページ&lt;/a&gt;がありました。シングルコアで比較すると結構いい勝負しているようです。それでもCoreMの方が速いというのはやはり合点がいかないのですが、Ubuntu機の方は他の多くのプログラムが動いている中で試していたのでその所為だと思われます。&lt;/p&gt;

&lt;h3 id=&quot;cpu性能比較２&quot;&gt;CPU性能比較２&lt;/h3&gt;
&lt;p&gt;　話が逸れましたがもう一つ、&lt;a href=&quot;/software/2018-10-27/unpromote&quot;&gt;以前の記事&lt;/a&gt;で「歩不成の詰将棋」を読み切るのに２週間掛かったことを紹介しましたが、この時使ったスクリプトを今回購入したMacbook Proで実行してみました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ coffee game.coffee 
hmmxxxggggkkkkyyyffffffffffff
 9 8 7 6 5 4 3 2 1
| | | | | |f|T| |y|1
| | | | | | | | | |2
| | | | |H| |F|o| |3
| | | | | |X| |f|f|4
| | | | | | | | | |5
| | | | | | | | | |6
| | | | | | | | | |7
| | | | | | | | | |8
|O| | | | | | | | |9
F
first: i = 1, kind = Hi, temp = [{&quot;turn&quot;:-1,&quot;status&quot;:0,&quot;posi&quot;:[5,3],&quot;id&quot;:&quot;q6owepmi&quot;},[5,2],-589,1,{&quot;koma&quot;:{&quot;turn&quot;:-1,&quot;status&quot;:0,&quot;posi&quot;:[9,9],&quot;id&quot;:&quot;ribd4do4&quot;},&quot;posi&quot;:[9,8],&quot;score&quot;:-614,&quot;status&quot;:0}]
first: i = 2, kind = Fu, temp = [{&quot;turn&quot;:-1,&quot;status&quot;:0,&quot;posi&quot;:[3,3],&quot;id&quot;:&quot;g8a244eb&quot;},[3,2],-532,1,{&quot;koma&quot;:{&quot;turn&quot;:-1,&quot;status&quot;:0,&quot;posi&quot;:[5,3],&quot;id&quot;:&quot;q6owepmi&quot;},&quot;posi&quot;:[5,2],&quot;score&quot;:-542,&quot;status&quot;:1}]
first: i = 4, kind = Fu, temp = [{&quot;turn&quot;:-1,&quot;status&quot;:0,&quot;posi&quot;:[3,3],&quot;id&quot;:&quot;g8a244eb&quot;},[3,2],-522,1,{&quot;koma&quot;:{&quot;turn&quot;:-1,&quot;status&quot;:0,&quot;posi&quot;:[3,3],&quot;id&quot;:&quot;g8a244eb&quot;},&quot;posi&quot;:[3,2],&quot;score&quot;:-554,&quot;status&quot;:0}]
first: i = 5, kind = Fu, temp = [{&quot;turn&quot;:-1,&quot;status&quot;:0,&quot;posi&quot;:[3,3],&quot;id&quot;:&quot;g8a244eb&quot;},[3,2],-594,0,{&quot;koma&quot;:{&quot;turn&quot;:-1,&quot;status&quot;:0,&quot;posi&quot;:[4,4],&quot;id&quot;:&quot;a7qa7o3i&quot;},&quot;posi&quot;:[3,4],&quot;score&quot;:-702,&quot;status&quot;:0}]
hmmxxxggggkkkkyyyffffffffffff
 9 8 7 6 5 4 3 2 1
| | | | | |f|T| |y|1
| | | | | | |F| | |2
| | | | |H| | |o| |3
| | | | | |X| |f|f|4
| | | | | | | | | |5
| | | | | | | | | |6
| | | | | | | | | |7
| | | | | | | | | |8
|O| | | | | | | | |9
F
初手経過時間: 370448881ミリ秒
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Core i7-2600K&lt;/code&gt;で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1208445383ミリ秒（約２週間）&lt;/code&gt;掛かった処理が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apple M1 Pro&lt;/code&gt;だと&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;370448881ミリ秒（約４日）&lt;/code&gt;でした。やはり断然速いですね。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Flutter製アプリは別のUbuntu機を使って開発してます。&lt;a href=&quot;#back1&quot;&gt;戻る&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Rosettaって何？状態だったのでM1 Macbookのコンパイル環境を作るのに手間取りましたが、ソースコードそのものの修正は不要でした。&lt;a href=&quot;#back2&quot;&gt;戻る&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 23 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/hardware/2021-11-23/macbookpro</link>
        <guid isPermaLink="true">https://happyclam.github.io/hardware/2021-11-23/macbookpro</guid>
        
        <category>macbook</category>
        
        <category>cordova</category>
        
        <category>mancala</category>
        
        <category>shogi</category>
        
        
        <category>hardware</category>
        
      </item>
    
      <item>
        <title>Ubuntuで使えるBluetoothマウス</title>
        <description>&lt;h3 id=&quot;macbookproを買って貯まったヨドバシのポイント&quot;&gt;MacbookProを買って貯まったヨドバシのポイント&lt;/h3&gt;
&lt;p&gt;　ヨドバシのポイントが貯まるとすぐに使い切ってしまいたくなる質なので、キーボードとBluetoothマウスを新調しました。&lt;/p&gt;

&lt;h3 id=&quot;悩まされてきたbluetoothマウス&quot;&gt;悩まされてきたBluetoothマウス&lt;/h3&gt;
&lt;p&gt;　自分だけかも知れませんが、今までUbuntu機でいくつかBluetoothマウスを試して長く愛用出来るものには出会えませんでした。マウスポインタの動きがおかしかったり、少しの間快適に使えていてもUbuntuのUpdateをするとまたおかしくなったりしてました。値段の高いトラックボールなんかだとUbuntuの設定を弄ってなんとか使えるようにしてましたが、マウスだとすぐに諦めて有線に戻していた所為もあるでしょう。&lt;br /&gt;
　今回買ったのはマウスとしては少々高めのお値段ですが、&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/220691a2.603e89c9.220691a3.4b08f26e/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Flogicool%2Fm720r%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;logicoolのM720rトライアスロンマルチデバイスマウス&lt;/a&gt;と言うものです。&lt;/p&gt;

&lt;div style=&quot;width:400px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/logi_m720r01.png&quot;&gt;&lt;img src=&quot;/images/logi_m720r01.png&quot; alt=&quot;M720r&quot; width=&quot;360&quot; height=&quot;309&quot; title=&quot;M720r&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　今までUbuntu機で使ったことのあるBluetoothマウスは全て汎用のBluetoothアダプタ（ドングル）と通信して使うものでしたが、この&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/220691a2.603e89c9.220691a3.4b08f26e/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Flogicool%2Fm720r%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;M720r&lt;/a&gt;は付属の専用アダプタと通信して使うタイプです。専用アダプタが付属するものは自分の経験ではUbuntuでは使えないものばかりでしたが、この製品はアダプタをUbuntu機に挿したらいきなり使えました（Ubuntu 20.04）。&lt;br /&gt;
　おまけに付属のアダプタを使わずにBluetooth接続も出来ると聞いていたので、MacbookProで試したところ、&lt;a href=&quot;https://www.logitech.com/assets/64937/4/m720-web-qsg.pdf&quot;&gt;取扱説明書&lt;/a&gt;を読むまでもなく使用できました。マウス側面のデバイス切り替えボタンで３台のPCで使えるそうですが、一番手前のボタンを長押しすれば簡単にペアリング出来ます。&lt;/p&gt;

&lt;div style=&quot;width:400px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/logi_m720r02.png&quot;&gt;&lt;img src=&quot;/images/logi_m720r02.png&quot; alt=&quot;M720r&quot; width=&quot;360&quot; height=&quot;282&quot; title=&quot;M720r&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　専用レシーバーは電池横のポケットに収納出来るようになっていて、紛失の可能性も軽減。まだ分かりませんが、このマウスは長く使っていけそうな気がします。&lt;/p&gt;

&lt;h3 id=&quot;初めてのメカニカルキーボード&quot;&gt;初めてのメカニカルキーボード&lt;/h3&gt;
&lt;p&gt;　ヨドバシでキーボードのコーナーを何気なく見ていたら、見た目がとてもスマートだなと思って目が止まったのが&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/2207b93f.46532365.2207b940.7c241670/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fakindo%2Fk835gpb%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MCwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;ロジクール キーボード K835 TKL 赤軸&lt;/a&gt;、スマホで検索してみるとメカニカルキーボードじゃないですか。メカニカルキーボードと言えば、昔秋葉原でCherry社の高級キーボードを触ったことがありますが、値段が高過ぎて（確か３万円ぐらい？）とても買ってみようなんて思わなかったのですが、当時を思い出しすぐに買いたくなりました。&lt;/p&gt;

&lt;div style=&quot;width:400px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/logi_k83501.png&quot;&gt;&lt;img src=&quot;/images/logi_k83501.png&quot; alt=&quot;K835&quot; width=&quot;360&quot; height=&quot;148&quot; title=&quot;K835&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div style=&quot;width:400px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/logi_k83502.png&quot;&gt;&lt;img src=&quot;/images/logi_k83502.png&quot; alt=&quot;K835&quot; width=&quot;360&quot; height=&quot;227&quot; title=&quot;K835&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　赤軸と青軸があるのですが、音が控えめな赤軸の方にしました。音が控えめと言っても普通のメンブレン式キーボードに較べたら音は大きめです。メンブレン式キーボードでも&lt;a href=&quot;https://yukirai.com/2017/08/17/hhkb-lite2-review/&quot;&gt;HHKB Lite2&lt;/a&gt;はかなり煩かったですが、それよりは静かです。&lt;/p&gt;

&lt;div style=&quot;width:400px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/logi_k83503.png&quot;&gt;&lt;img src=&quot;/images/logi_k83503.png&quot; alt=&quot;K835&quot; width=&quot;360&quot; height=&quot;227&quot; title=&quot;K835&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　それとこのキーボード、キートップがキーボードの筐体に埋まっていないのでキーとキーの隙間に埃やゴミが溜まりにくそうです。写真のようにキートップを外すと非常に掃除がし易そうで、これなら無精な自分でも掃除をする気にさせてくれるのではないかと思ってます。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Wed, 10 Nov 2021 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/hardware/2021-11-10/logicool</link>
        <guid isPermaLink="true">https://happyclam.github.io/hardware/2021-11-10/logicool</guid>
        
        <category>ubuntu</category>
        
        <category>logicool</category>
        
        
        <category>hardware</category>
        
      </item>
    
      <item>
        <title>５五将棋アプリのオンライン対戦機能？</title>
        <description>&lt;h3 id=&quot;リリースするかは未定だけど&quot;&gt;リリースするかは未定だけど&lt;/h3&gt;
&lt;p&gt;　以前から将棋関連アプリのオンライン対戦機能を作ってみようかと、FirebaseのCloud FunctionsをJavaScriptで使ってみたりしていたのですが、従量制なので実際運用し始めたらどれぐらいの費用が掛かるのか分からないので、なかなか本気になれませんでした。開発することを考えるとオンライン対戦機能をどのように実現するかという問題の方が先ですが、運用コストを考えるといろいろ迷います。そこで定額制で運用することを考えると自分の場合はRailsかNode.jsかな〜と思い、取り敢えずNode.jsで着手してみました。&lt;/p&gt;

&lt;h3 id=&quot;結局herokuで試すことに&quot;&gt;結局Herokuで試すことに&lt;/h3&gt;
&lt;p&gt;　ローカル環境である程度作ったところでリモートサーバーで試してみたいと思って、定額制でNode.jsの運用先を探したところ&lt;a href=&quot;https://paiza.cloud/ja/&quot;&gt;Paiza Cloud&lt;/a&gt;というのを見つけたのですが、ここは無料プランやライトプランではサービスを公開出来ないようです。&lt;br /&gt;
　&lt;a href=&quot;/programming/2021-06-30/heroku_delete&quot;&gt;以前の記事&lt;/a&gt;で&lt;a href=&quot;/programming/2015-04-25/mongo_upsert&quot;&gt;Node.jsを使ったアプリ&lt;/a&gt;を、MongoDBのアドオンが使えなくなったために仕方なく非公開にしたことを書きましたが、そんなことがあったのでもうHerokuでMongoDBを使うのは止めようと思っていたのですが、無料でリモート環境で試せるHerokuはやはり魅力的です。実際にリリースするかどうかも決めてないので尚更です。&lt;/p&gt;

&lt;h3 id=&quot;mongodb-atlasを使う&quot;&gt;MongoDB Atlasを使う&lt;/h3&gt;
&lt;p&gt;　HerokuでMongoDBのアドオン（mLabアドオン）が使えなくなったので、代替方法であるMongoDB Atlasを使うと料金が発生するかもと心配しましたが、Atlasの方は新たなアカウントを作らずにgoogleアカウントでログインするだけでデータベース一つだけなら無料で使えるらしいです。&lt;a href=&quot;https://qiita.com/Molly95554907/items/43b89c8eec475e9f1ed8&quot;&gt;こちらの記事&lt;/a&gt;の通りにすれば、簡単に環境が作れました。&lt;/p&gt;

&lt;h3 id=&quot;heroku本番で使うかどうかは未定で動作確認&quot;&gt;Heroku（本番で使うかどうかは未定）で動作確認&lt;/h3&gt;
&lt;p&gt;　ブラウザを２つ立ち上げて２台のスマホ端末に見立てて動作確認してみました。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/y1_h8-bk1TI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;　ちゃんと動いて一安心です。&lt;/p&gt;

&lt;h3 id=&quot;全体の３割ぐらい完成か&quot;&gt;全体の３割ぐらい完成か？&lt;/h3&gt;
&lt;p&gt;　自分の将棋関連アプリの中から&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;を選んでここまで作りましたが、今になって５五将棋は既に&lt;a href=&quot;http://sdin.jp/browser/board/55shogi/&quot;&gt;SDINサイト&lt;/a&gt;でオンライン対戦が可能なので、他のアプリ（例えば禽将棋アプリ）にした方がよかったかも？なんて考えてます。まぁ他のアプリでも使えるように考えながらサーバーサイドを作っているつもりですが、最終的にどうするかは決めてません。&lt;br /&gt;
　あと、&lt;a href=&quot;https://play.google.com/store/apps/details?id=shogi55.io.github.happyclam&quot;&gt;５五将棋アプリ&lt;/a&gt;は初期配置をユーザーが自由に編集可能なので、対戦申し込みする時に初期配置を相手に表示して「この初期配置だけど、いいですか？」という意志を確認するために対戦申し込みする側の初期配置を相手側に通知する機能の実装が面倒だったのですが、開発時の苦労話や技術的なTipsみたいな物も今後記事にするかも知れません。&lt;/p&gt;

&lt;h3 id=&quot;mongodbnosqlとrdbとの違い&quot;&gt;MongoDB（NoSQL）とRDBとの違い&lt;/h3&gt;
&lt;p&gt;　例えば棋譜テーブルは以下のように定義しています。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var kifuSchema = new Schema(
  {
    description: {
      type: String
    },
    firstPlayer: {
      type: String,
      required: true
    },
    secondPlayer: {
      type: String,
      required: true
    },
    applicant: {
      type: String,
      required: true
    },
    koma: {
      type: Array,
      default: []
    },
    histories: {
      type: Array,
      default: []
    },
    users: [{ type: Schema.Types.ObjectId, ref: &quot;User&quot; }]
  },
  {
    timestamps: true,
  }
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　配列型のカラム（histories）を用意して、指し手が進む毎にスマホ端末から貰ったJSON形式の棋譜データをそのまま追加してます。このやり方なら禽将棋であろうが５五将棋であろうがテーブル構造を変える必要がありません。&lt;br /&gt;
　以下のコードは対局が一手進んだ時のサーバー側の処理です。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    client.on(&quot;gameMove&quot;, data =&amp;gt; {
      let filter = {_id: data.kifuId};
      let update = {$push: {koma: data.koma, histories: data.record}};
      Kifu.findOneAndUpdate(filter, update, {returnDocument: &apos;after&apos;})
        .then(kifu =&amp;gt; {
          return kifu;
        })
        .then(kifu =&amp;gt; {
          User.find({_id: {$in: [kifu.users[0], kifu.users[1]]}})
            .then(users =&amp;gt; {
              if (users[0].socketId == client.id){
                io.to(users[1].socketId).emit(&quot;gameMoved&quot;, kifu);
              } else {
                io.to(users[0].socketId).emit(&quot;gameMoved&quot;, kifu);
              }
            })
        })
        .catch(error =&amp;gt; {
          console.log(`Error in io.on.gameMove:${error.message}`);
        });
    });

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　RDB（リレーショナルデータベース）だと配列型のカラムではなく別テーブルにすると思いますが、そうすると将棋の種類が変わるとテーブル構造が変わりなかなか汎用的に作れません。NoSQLデータベース（MongoDB）ではテーブルの正規化とかあまり考えずに緩く定義（冗長化）して使えるのが利点だと思います。最近のRDBでは配列型のカラムを使用することは出来るかも知れませんが（私は使ったことがありません）、今のところNode.js＋MongoDBで作ることにしてよかったなと思ってます。&lt;br /&gt;
　&lt;a href=&quot;https://atmarkit.itmedia.co.jp/ait/articles/1103/25/news131_3.html&quot;&gt;この記事&lt;/a&gt;によると「NoSQLデータベースの設計では、正規化をしてはいけない」と言う人もいるそうです。それは極端かも知れませんが、RDBで配列型のカラムを使うぐらいならNoSQLデータベースを使う方がいいような気がします。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 21 Aug 2021 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/programming/2021-08-21/nodejs</link>
        <guid isPermaLink="true">https://happyclam.github.io/programming/2021-08-21/nodejs</guid>
        
        <category>javascript</category>
        
        <category>android</category>
        
        <category>cordova</category>
        
        <category>shogi</category>
        
        <category>heroku</category>
        
        <category>node</category>
        
        <category>MongoDB</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>FlutterアプリのNull Safety対応</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://taimienphi.vn/download-mancala-nuts-90337&quot;&gt;&lt;img src=&quot;/images/tmp2.png&quot; alt=&quot;マンカラアプリ&quot; title=&quot;マンカラ ナッツ&quot; width=&quot;155&quot; height=&quot;60&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;&lt;img src=&quot;/images/ja_badge_web_generic.png&quot; alt=&quot;マンカラアプリ&quot; title=&quot;マンカラ ナッツ&quot; width=&quot;155&quot; height=&quot;60&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://www.amazon.co.jp/happyclam-マンカラ-ナッツ/dp/B08D8QVVQY/ref=sr_1_2&quot;&gt;&lt;img src=&quot;/images/amazon-appstore-badge-jp-white.png&quot; alt=&quot;マンカラアプリ&quot; title=&quot;マンカラ ナッツ&quot; width=&quot;155&quot; height=&quot;60&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;&lt;a href=&quot;https://taimienphi.vn&quot; title=&quot;download&quot;&gt;taimienphi.vn&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;はっきり言って面倒臭い&quot;&gt;はっきり言って面倒臭い&lt;/h3&gt;
&lt;p&gt;　プログラミングの際にオブジェクトを代入する変数を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;で初期化して、その変数が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;かどうかで条件分岐する、なんてコードをよく書いていたので、また面倒なことが増えたって気がしますが、実行時のNull Pointer Exceptionを避ける意味はあるのでしょう。はっきり言ってこういう仕組みは普段テストを書く習慣が無い人のためにあるんじゃないの？って気もしますが、世の流れには逆らえずFlutter製の&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;アプリ（マンカラナッツ）&lt;/a&gt;でも対応することにしました。&lt;/p&gt;

&lt;h3 id=&quot;パッケージの依存状況を調べる&quot;&gt;パッケージの依存状況を調べる&lt;/h3&gt;
&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter pub outdated --mode=null-safety&lt;/code&gt;と打てば、使用しているパッケージがNull Safety対応済みかどうか分かります。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ flutter pub outdated --mode=null-safety
Showing dependencies that are currently not opted in to null-safety.
[✗] indicates versions without null safety support.
[✓] indicates versions opting in to null safety.

Package Name               Current  Upgradable  Resolvable  Latest

direct dependencies:
flutter_google_ad_manager  ✗0.11.1  ✗0.11.1     ✗0.11.1     ✗0.11.1

dev_dependencies: all support null safety.
You are already using the newest resolvable versions listed in the &apos;Resolvable&apos; column.
Newer versions, listed in &apos;Latest&apos;, may not be mutually compatible.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　以前にも少し作業したので、&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;マンカラナッツ&lt;/a&gt;の場合はNull Safetyに対応していないのは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_google_ad_manager&lt;/code&gt;だけです。というかこのパッケージ（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_google_ad_manager&lt;/code&gt;）が対応されるのを待っていた状態でした。対応作業する前は&lt;a href=&quot;/software/2020-10-01/flutter_plugin&quot;&gt;自分で作ったパッケージ（karah_think.so）&lt;/a&gt;もこのリストに表示されていたのですが、既に修正したので、今回は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_google_ad_manager&lt;/code&gt;の代わりに&lt;a href=&quot;https://pub.dev/packages/admob_flutter/versions/2.0.0-nullsafety.1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admob_flutter&lt;/code&gt;&lt;/a&gt;を使うことで対応しました。作業内容は&lt;a href=&quot;https://pub.dev/packages/admob_flutter/versions/2.0.0-nullsafety.1/example&quot;&gt;使用例&lt;/a&gt;に書かれているので簡単でした。&lt;/p&gt;

&lt;h3 id=&quot;コードの修正&quot;&gt;コードの修正&lt;/h3&gt;
&lt;p&gt;　以前にNull Safety対応作業した時には既にFlutter2.0だったのですが、今回&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flutter upgrade&lt;/code&gt;してから作業するといくつか追加の作業が必要でした。以前&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flutter_google_ad_manager&lt;/code&gt;部分をコメントにしてビルドした時には既に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sound Null Safety&lt;/code&gt;と表示されていたのですが、Flutter自体が完全にNull Safetyになっていなかったのでしょうか？今回AndroidStudioのバージョンアップ（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.2.2&lt;/code&gt;）もしたので、それも関係あるのかも知れませんがよく分かりません。&lt;/p&gt;

&lt;p&gt;　今回の環境は以下の通りです。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ flutter --version
Flutter 2.2.3 • channel stable • https://github.com/flutter/flutter
Framework • revision f4abaa0735 (8 days ago) • 2021-07-01 12:46:11 -0700
Engine • revision 241c87ad80
Tools • Dart 2.13.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;修正例&quot;&gt;修正例&lt;/h3&gt;
&lt;p&gt;　修正前&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  GlobalKey _keyBoard = GlobalKey();
  RenderBox _box;

    if (_box == null)
      WidgetsBinding.instance.addPostFrameCallback((_afterLayout){
        setState(() {
          _box = _keyBoard.currentContext.findRenderObject();
        });
      });

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　修正後&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  final GlobalKey _keyBoard = GlobalKey();
  late RenderBox _box;

    WidgetsBinding.instance!.addPostFrameCallback((_) {
      setState(() {
        _box = _keyBoard.currentContext!.findRenderObject() as RenderBox;
      });
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　遅延初期化のための&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;late&lt;/code&gt;キーワードが使えるようになったのはDart2.12からだそうです。また、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;as&lt;/code&gt;を使って明確に型を指定しないとビルド出来なくなっていました。C++のように型にうるさくなっていくのでしょう。&lt;/p&gt;

&lt;h3 id=&quot;修正後&quot;&gt;修正後&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ flutter pub outdated --mode=null-safety
Showing dependencies that are currently not opted in to null-safety.
[✗] indicates versions without null safety support.
[✓] indicates versions opting in to null safety.

All your dependencies declare support for null-safety.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　AdMob用のパッケージを&lt;a href=&quot;https://pub.dev/packages/admob_flutter/versions/2.0.0-nullsafety.1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admob_flutter&lt;/code&gt;&lt;/a&gt;に変えたことで、Null Safety非対応のプラグインはなくなりました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ flutter build apk --release

💪 Building with sound null safety 💪

Picked up _JAVA_OPTIONS: -Djava.net.preferIPv6Addresses=true
Running Gradle task &apos;assembleRelease&apos;...
Running Gradle task &apos;assembleRelease&apos;... Done                     121.0s
✓  Built build/app/outputs/flutter-apk/app-release.apk (60.1MB).

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　ビルド時に:muscle:絵文字が出て、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sound Null Safety&lt;/code&gt;と表示されます。&lt;br /&gt;
　目出度く&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;マンカラナッツ&lt;/a&gt;はVersion1.2.2から&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Null Safety&lt;/code&gt;になりました。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 10 Jul 2021 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/software/2021-07-10/null_safety</link>
        <guid isPermaLink="true">https://happyclam.github.io/software/2021-07-10/null_safety</guid>
        
        <category>mancala</category>
        
        <category>dart</category>
        
        <category>android</category>
        
        <category>flutter</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>HerokuのDBを削除＆再構築</title>
        <description>&lt;h3 id=&quot;herokuの無料枠&quot;&gt;Herokuの無料枠&lt;/h3&gt;
&lt;p&gt;　Herokuから&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;「[Warning] Approaching row limit for hobby-dev database on Heroku app kwl-books」&lt;/code&gt;というタイトルのメールが届きました。「データベースには7,322行が含まれています。Hobby-devプランでは、最大10,000行まで許容されています。サービスの中断を避けるためには、データベースをベーシック（$9/月）以上のプランに移行してください」。とのこと。&lt;br /&gt;
　&lt;a href=&quot;https://kwl-books.herokuapp.com&quot;&gt;このサイト（「楽天Kobo電子書籍新着チェッカー」）&lt;/a&gt;では、&lt;a href=&quot;/project/2016-03-30/koboAPI&quot;&gt;以前の記事&lt;/a&gt;に書いたように、電子書籍の新着データをDBに保存して表示しているのですが、そのデータが溜まって制限に届きそうだという警告なので対処することにしました。&lt;/p&gt;

&lt;h3 id=&quot;deleteだけではダメ&quot;&gt;DELETEだけではダメ？&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;https://kwl-books.herokuapp.com&quot;&gt;「楽天Kobo電子書籍新着チェッカー」&lt;/a&gt;は、SQLのDELETE文を走らせて古い日付のレコードはその都度削除してデータを溜め込まないようにしているつもりなので容量の心配をせずに運用出来ると思っていました。だからメールを受け取った時は、データを物理削除（TRUNCATE）しなければダメってことだろうとすぐに思い当たったのですが、DBごと削除して再構築する方が簡単そうなのでそうすることにしました。&lt;br /&gt;
　&lt;a href=&quot;https://kwl-books.herokuapp.com&quot;&gt;「楽天Kobo電子書籍新着チェッカー」&lt;/a&gt;では、設定で必要なのは環境変数だけで、全てのデータをWebAPIで取得して保存しているので、予め必要なマスターデータと呼ぶものがありません。と言うことでDB毎削除しても問題ありません。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku addons:add pgbackups --app kwl-books
 ›   Warning: heroku update available from 7.52.0 to 7.54.1.
Creating pgbackups on ⬢ kwl-books... !
 ▸    Couldn&apos;t find either the add-on service or the add-on plan of &quot;pgbackups&quot;.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　念の為バックアップしようとしたのですが、無料枠（Free Dynos）では使えないようです:sweat_smile:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku pg:reset DATABASE --confirm kwl-books
 ›   Warning: heroku update available from 7.52.0 to 7.54.1.
Resetting postgresql-opaque-46906... done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　呆気なく削除完了&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku pg:info --app kwl-books
 ›   Warning: heroku update available from 7.52.0 to 7.54.1.
=== DATABASE_URL
Plan:                  Hobby-dev
Status:                Available
Connections:           0/20
PG Version:            11.12
Created:               2016-03-28 10:18 UTC
Data Size:             7.8 MB
Tables:                0
Rows:                  0/10000 (In compliance)
Fork/Follow:           Unsupported
Rollback:              Unsupported
Continuous Protection: Off
Add-on:                postgresql-opaque-46906

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rows&lt;/code&gt;が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;になってます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku run rake db:migrate:reset
 ›   Warning: heroku update available from 7.52.0 to 7.54.1.
Running rake db:migrate:reset on ⬢ kwl-books... up, run.9942 (Free)
The PGconn, PGresult, and PGError constants are deprecated, and will be
removed as of version 1.0.
:
:省略
:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/kwl-books-screen.png&quot;&gt;&lt;img src=&quot;/images/kwl-books-screen.png&quot; alt=&quot;動作確認&quot; width=&quot;480&quot; height=&quot;691&quot; title=&quot;動作確認&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　動作確認。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku pg:info --app kwl-books
 ›   Warning: heroku update available from 7.52.0 to 7.54.1.
=== DATABASE_URL
Plan:                  Hobby-dev
Status:                Available
Connections:           1/20
PG Version:            11.12
Created:               2016-03-28 10:18 UTC
Data Size:             8.2 MB
Tables:                3
Rows:                  53/10000 (In compliance)
Fork/Follow:           Unsupported
Rollback:              Unsupported
Continuous Protection: Off
Add-on:                postgresql-opaque-46906

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rows&lt;/code&gt;が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;53&lt;/code&gt;になりました。&lt;/p&gt;

&lt;p&gt;　勢いで作業をしてしまって結局TRUNCATEしていたらどうだったのか分からないのですが、少なくともSQL文でDELETEするだけでは、ダメ（Herokuの最大容量制限の対象としてカウントされたままになる）なのだと思います。&lt;/p&gt;

&lt;h3 id=&quot;paasplatform-as-a-serviceでの運用&quot;&gt;PaaS(Platform as a Service)での運用&lt;/h3&gt;
&lt;p&gt;　それにしてもHerokuからの通知は、普段安心しきっているところに唐突に来るので嫌なものですが、これはオンプレミスやVPSでの運用より安心し切っている反動のような気がします。Rails＋Herokuを業務で使った場合の運用コストは詳しくありませんが、開発に専念出来る点は非常に楽だと思います。&lt;br /&gt;
　以前&lt;a href=&quot;https://github.com/happyclam/tictactoe-cf/wiki&quot;&gt;HerokuでNode.jsとMongoDBを使って運用していたアプリ&lt;/a&gt;があったのですが、突然Herokuから「MongoDBアドオンを削除します（The mLab MongoDB add-on will be removed from all Heroku apps on November 10, 2020. ） 」と通知が来て、取り急ぎやむなくアプリを非公開にした（どうせユーザーも殆どいなかったし）ことがあったのですが、ちゃんと調べれば代替手段はあったようで、今検索してみると&lt;a href=&quot;https://qiita.com/nobu17/items/ca9ae3d60dc837ca0de0&quot;&gt;こんな記事&lt;/a&gt;がありました。&lt;br /&gt;
　対応はそれなりに面倒そうですが、そもそもMongoDBアドオンが使えなくなったのはHerokuの都合ではないので仕方がないって感じですね。&lt;/p&gt;

&lt;h3 id=&quot;追記2021-07-22&quot;&gt;追記（2021-07-22）&lt;/h3&gt;
&lt;p&gt;　二週間ぐらい経ったある日また同じような文面の警告メールをHerokuから受け取りました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku pg:info --app kwl-books
=== DATABASE_URL
Plan:                  Hobby-dev
Status:                Available
Connections:           1/20
PG Version:            11.12
Created:               2016-03-28 10:18 UTC
Data Size:             21.6 MB
Tables:                3
Rows:                  7440/10000 (In compliance, close to row limit)
Fork/Follow:           Unsupported
Rollback:              Unsupported
Continuous Protection: Off
Add-on:                postgresql-opaque-46906
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rows: 7440/10000&lt;/code&gt;となっていて、消したはずのレコードが復活しているようです？？？&lt;br /&gt;
　何が起きたのかよく分かりませんが、もう一度&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku pg:reset DATABASE --confirm kwl-books&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;heroku run rake db:migrate:reset&lt;/code&gt;を実行した後、&lt;a href=&quot;https://devcenter.heroku.com/ja/articles/managing-vacuum-on-heroku-postgres&quot;&gt;「Heroku Postgres での VACUUM の管理」&lt;/a&gt;に書かれている通り&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VACUUM&lt;/code&gt;してみました。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$heroku pg:bloat DATABASE_URL --app kwl-books
:
:省略
:
$heroku pg:vacuum_stats DATABASE_URL --app kwl-books
$heroku pg:psql
kwl-books::DATABASE=&amp;gt; VACUUM;
WARNING:  skipping &quot;pg_authid&quot; --- only superuser can vacuum it
WARNING:  skipping &quot;pg_subscription&quot; --- only superuser can vacuum it
WARNING:  skipping &quot;pg_database&quot; --- only superuser can vacuum it
WARNING:  skipping &quot;pg_db_role_setting&quot; --- only superuser can vacuum it
WARNING:  skipping &quot;pg_tablespace&quot; --- only superuser can vacuum it
WARNING:  skipping &quot;pg_pltemplate&quot; --- only superuser can vacuum it
WARNING:  skipping &quot;pg_auth_members&quot; --- only superuser can vacuum it
WARNING:  skipping &quot;pg_shdepend&quot; --- only superuser can vacuum it
WARNING:  skipping &quot;pg_shdescription&quot; --- only superuser can vacuum it
WARNING:  skipping &quot;pg_replication_origin&quot; --- only superuser can vacuum it
WARNING:  skipping &quot;pg_shseclabel&quot; --- only superuser can vacuum it
VACUUM
kwl-books::DATABASE=&amp;gt; VACUUM genres;
VACUUM
kwl-books::DATABASE=&amp;gt; VACUUM books;
VACUUM
kwl-books::DATABASE=&amp;gt; exit

$ heroku pg:info --app kwl-books
=== DATABASE_URL
Plan:                  Hobby-dev
Status:                Available
Connections:           1/20
PG Version:            11.12
Created:               2016-03-28 10:18 UTC
Data Size:             8.4 MB
Tables:                3
Rows:                  64/10000 (In compliance)
Fork/Follow:           Unsupported
Rollback:              Unsupported
Continuous Protection: Off
Add-on:                postgresql-opaque-46906

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　動作確認後&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rows: 64/10000&lt;/code&gt;となっていて、&lt;a href=&quot;https://kwl-books.herokuapp.com&quot;&gt;サイト&lt;/a&gt;も問題なく動作しているようです。&lt;br /&gt;
　消したはずのデータがなぜ復活したのか分かりませんし、データの中身までチェックした訳ではないのですが、&lt;del&gt;今度は大丈夫だろうと思います。&lt;/del&gt;&lt;br /&gt;
　また二週間ほどしたら同様のメールが来てデータも復活してました。よく分からないので当面メンテナンスモードをonにすることにしました。&lt;/p&gt;

&lt;h3 id=&quot;追記2021-08-29&quot;&gt;追記（2021-08-29）&lt;/h3&gt;
&lt;p&gt;　&lt;del&gt;どうやらメンテナンスモード切り替えずに作業したのが悪かったようです。よく分かりませんが、メンテナンスモードをonにしてから上記のVACUUM処理までやった後、メンテナンスモードをoffにすれば今のところデータが復活するなんてことは無くなりました。&lt;/del&gt;&lt;/p&gt;

&lt;h3 id=&quot;追記2021-09-19&quot;&gt;追記（2021-09-19）&lt;/h3&gt;
&lt;p&gt;　しばらくしたらまた警告メールが来て、消したはずのデータが復活していました。どうしても有料のBasicプランに移行させたいのでしょうか？理由が分かりませんが、一銭にもなっていないこのサイトに運用コストをかけるぐらいなら、サイトを閉じようと思ってます。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Wed, 30 Jun 2021 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/programming/2021-06-30/heroku_delete</link>
        <guid isPermaLink="true">https://happyclam.github.io/programming/2021-06-30/heroku_delete</guid>
        
        <category>rails</category>
        
        <category>heroku</category>
        
        <category>MongoDB</category>
        
        <category>node</category>
        
        <category>javascript</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>ページエクスペリエンス向上</title>
        <description>&lt;h3 id=&quot;特に対策していなかったコンテンツの表示速度&quot;&gt;特に対策していなかったコンテンツの表示速度&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;https://ring-and-link.co.jp/dream2000/user/notice/seo/4817&quot;&gt;この記事&lt;/a&gt;によると2021年5月からgoogleの検索ランキングに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ページエクスペリエンス&lt;/code&gt;という指標が導入されたようです。自分のサイトはJekyll製の静的サイトなので今までは表示速度については特に対策はしていませんでしたが、自分のサイトも以下のように５月５日を境に多くのページが「改善が必要なURL」としてGoogle様から指摘されるようになりました。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/google_ux.png&quot;&gt;&lt;img src=&quot;/images/google_ux.png&quot; alt=&quot;ウェブに関する主な指標&quot; width=&quot;480&quot; height=&quot;359&quot; title=&quot;ウェブに関する主な指標&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/google_experience.png&quot;&gt;&lt;img src=&quot;/images/google_experience.png&quot; alt=&quot;モバイルでのページエクスペリエンス&quot; width=&quot;480&quot; height=&quot;614&quot; title=&quot;モバイルでのページエクスペリエンス&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/google_signal.png&quot;&gt;&lt;img src=&quot;/images/google_signal.png&quot; alt=&quot;モバイルでの指標&quot; width=&quot;480&quot; height=&quot;416&quot; title=&quot;モバイルでの指標&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;　
&lt;span id=&quot;back&quot;&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;　今までもいろいろgoogle様からの指摘に対応してきました。「テキストが小さすぎて読めません」、「クリック可能な要素同士が近すぎます」、「コンテンツの幅が画面の幅を超えています」などなど、その度にCSSを弄って対策を施してきました。そして、４月まではSearch Console&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;内で&lt;strong&gt;「サイトに優れたページ エクスペリエンスの URL が 100% 件あります」&lt;/strong&gt;と表示されていて気分を良くしていました。でも、５月になって急に上の画像のように表示が変わって、「またか」って感じです。どこまでもgoogle様に振り回される状況は変わらないようです:weary:&lt;br /&gt;
　でも、今までから気にはなっていたことがあったので、コンテンツ表示速度改善に取り組んでみました。&lt;br /&gt;
　あと、問題があるのはモバイルユーザビリティであって、今のところPC環境では特に問題は無さそうです。&lt;/p&gt;

&lt;h3 id=&quot;今までから気になっていたこと&quot;&gt;今までから気になっていたこと&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;Jekyll Bootstrap&lt;/a&gt;の多機能なテーマを使用していること&lt;br /&gt;
&lt;a href=&quot;http://jekyllbootstrap.com/&quot;&gt;ここにあるJekyllBootstrap&lt;/a&gt;のテンプレートを使えば、サイトのテーマ（Theme,テンプレート）を簡単に差し替えることが出来るようになっていて、機能も豊富でコメント機能も付いていたりしますが、自分のサイトでは今までコメントをしてくれた人はいませんので無駄な機能でした。&lt;br /&gt;
　また、テーマを差し替えることが出来ると言っても気に入ったものがなく、結局今まで一度もテーマを変更することはありませんでした。現在は&lt;a href=&quot;https://github.com/jekyllbootstrap&quot;&gt;テーマの種類&lt;/a&gt;も追加・更新はされていないようです。&lt;/li&gt;
  &lt;li&gt;大き目の画像を使用していること&lt;br /&gt;
ほとんどの記事で画像を使う時は、小さく表示してクリックすると原寸表示（拡大表示）出来るような作りにしているので元々の画像サイズが大き目であることが気にはなっていました。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;　ということで、1.に関してはJekyllのテンプレートをもっと軽いものに変更、2.に関してはimgタグを使う時はサイズ指定するように変更してみました。&lt;/p&gt;

&lt;h3 id=&quot;修正前のpagespeed-insightsの結果&quot;&gt;修正前の&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/?hl=ja&quot;&gt;PageSpeed Insights&lt;/a&gt;の結果&lt;/h3&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/pagespeed01.png&quot;&gt;&lt;img src=&quot;/images/pagespeed01.png&quot; alt=&quot;修正前の測定結果&quot; width=&quot;480&quot; height=&quot;296&quot; title=&quot;修正前の測定結果&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;２５&lt;/code&gt;というのは結構酷い状態かも知れません。&lt;/p&gt;

&lt;h3 id=&quot;imgタグにサイズ指定&quot;&gt;imgタグにサイズ指定&lt;/h3&gt;
&lt;p&gt;　今までこう書いていたのを&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;/images/results_3beans.png&quot; alt=&quot;豆３つ&quot; title=&quot;豆３つ&quot; /&amp;gt;&lt;/code&gt;&lt;br /&gt;
　このようにサイズの記述を追加しただけです。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;/images/results_3beans.png&quot; alt=&quot;豆３つ&quot; width=&quot;480&quot; height=&quot;270&quot; title=&quot;豆３つ&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/pagespeed02.png&quot;&gt;&lt;img src=&quot;/images/pagespeed02.png&quot; alt=&quot;imgタグにサイズ指定&quot; width=&quot;480&quot; height=&quot;306&quot; title=&quot;imgタグにサイズ指定&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　画像の実際の表示サイズは親要素で拡大・縮小表示するケースが多いと思いますが、imgタグで画像を読み込む時に縦横比をブラウザに教えてあげることが大事らしいです。対策した結果、若干改善しました。対象の記事はスクショを撮り忘れて、上の画像のURLは画像を使っていないのですが、だいたいこれぐらいの数値の改善がありました。&lt;br /&gt;
　imgタグのサイズ指定は昔は必須だったのがレスポンシブな時代にはサイズ指定しないようになって来たけど、ブラウザにレイアウトシフトを避ける機能が実装されてきて、今は速度アップのためにサイズ指定する方が良いという流れがあるようです。&lt;br /&gt;
　画像に関してはフォーマットも色々あるのでもっと突き詰める余地がありそうです。&lt;/p&gt;

&lt;h3 id=&quot;jekyllテンプレートを交換&quot;&gt;Jekyllテンプレートを交換&lt;/h3&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/pagespeed03.png&quot;&gt;&lt;img src=&quot;/images/pagespeed03.png&quot; alt=&quot;Jekyllテンプレートを交換&quot; width=&quot;480&quot; height=&quot;288&quot; title=&quot;Jekyllテンプレートを交換&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　今までの無駄な機能が多いテンプレートから、&lt;a href=&quot;http://jekyllthemes.org&quot;&gt;Jekyll Themesというサイト&lt;/a&gt;で探して、&lt;a href=&quot;https://github.com/itsrifat/rifyll&quot;&gt;シンプルなJekyllテンプレート&lt;/a&gt;に交換してカスタマイズしました。&lt;/p&gt;

&lt;h3 id=&quot;改善後の状態&quot;&gt;改善後の状態&lt;/h3&gt;
&lt;p&gt;　ページによってまちまちですが、&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/?hl=ja&quot;&gt;PageSpeed Insights&lt;/a&gt;で確認すると上記の改善後も多くの指摘事項があります。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/speedinsights.png&quot;&gt;&lt;img src=&quot;/images/speedinsights.png&quot; alt=&quot;PageSpeed Insightsの指摘事項&quot; width=&quot;480&quot; height=&quot;181&quot; title=&quot;Pagespeed Insightsの指摘事項&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/?hl=ja&quot;&gt;PageSpeed Insights&lt;/a&gt;を使えばページ毎の問題点を指摘してくれるのですが、やはり一番の問題は画像サイズにあるページが多いようです。モバイルユーザーに焦点を当てて、これからは大きな画像は使わないようにしようかと思ってます。&lt;/p&gt;

&lt;h3 id=&quot;pc並の数値にするのは大変そう&quot;&gt;PC並の数値にするのは大変そう&lt;/h3&gt;
&lt;p&gt;　ちなみに対象を「パソコン」にすると以下の数値です。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/pagespeed05.png&quot;&gt;&lt;img src=&quot;/images/pagespeed05.png&quot; alt=&quot;パソコンの結果&quot; width=&quot;480&quot; height=&quot;291&quot; title=&quot;パソコンの結果&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;９９！&lt;/code&gt;だからこそ今まではSearch Console内で「サイトに優れたページ エクスペリエンスの URL が 100% 件あります」（←googleによる変な日本語）という評価だったわけです。&lt;/p&gt;

&lt;p&gt;　&lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/?hl=ja&quot;&gt;PageSpeed Insights&lt;/a&gt;の指摘の中に「JavaScriptの削減」という項目があったので、試しにadsenseとanalyticsのjsコードを除去すると、数値を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;８１&lt;/code&gt;まで上げることが出来ましたが、これでは意味がないので他の改善方法を探る必要がありそうですが、自前のWebサーバーで運用しているわけではなく、&lt;a href=&quot;https://github.com/happyclam/happyclam.github.io&quot;&gt;github&lt;/a&gt;に静的ファイルを置いているだけなので方法は限られそうです。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/pagespeed04.png&quot;&gt;&lt;img src=&quot;/images/pagespeed04.png&quot; alt=&quot;adsenseとanalyticsのjsコードを除去&quot; width=&quot;480&quot; height=&quot;291&quot; title=&quot;adsenseとanalyticsのjsコードを除去&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　&lt;a href=&quot;https://www.suzukikenichi.com/blog/page-experience-ranking-is-coming-to-desktop/&quot;&gt;この記事&lt;/a&gt;によるとページエクスペリエンスのランキングはPC検索についても今後適用していくようです。&lt;/p&gt;

&lt;h3 id=&quot;三日後の状況&quot;&gt;三日後の状況&lt;/h3&gt;
&lt;p&gt;　サイトを修正して三日後に確認すると、とりあえず「改善が必要」なURLは０になって、「優れたページエクスペリエンス」の割合も増加傾向にあるようです。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/google_ux_new.png&quot;&gt;&lt;img src=&quot;/images/google_ux_new.png&quot; alt=&quot;ウェブに関する主な指標&quot; width=&quot;480&quot; height=&quot;359&quot; title=&quot;ウェブに関する主な指標&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/google_experience_new.png&quot;&gt;&lt;img src=&quot;/images/google_experience_new.png&quot; alt=&quot;モバイルでのページエクスペリエンス&quot; width=&quot;480&quot; height=&quot;359&quot; title=&quot;モバイルでのページエクスペリエンス&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/google_signal_new.png&quot;&gt;&lt;img src=&quot;/images/google_signal_new.png&quot; alt=&quot;モバイルでの指標&quot; width=&quot;480&quot; height=&quot;359&quot; title=&quot;モバイルでの指標&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;五日後の状況&quot;&gt;五日後の状況&lt;/h3&gt;
&lt;p&gt;　画像ファイルを縮小したり全ての記事を見直してモバイル対応を意識した変更をした結果「良好なURL」が以前より増えたようです。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/google_ux_5.png&quot;&gt;&lt;img src=&quot;/images/google_ux_5.png&quot; alt=&quot;ウェブに関する主な指標&quot; width=&quot;480&quot; height=&quot;450&quot; title=&quot;ウェブに関する主な指標&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/google_experience_5.png&quot;&gt;&lt;img src=&quot;/images/google_experience_5.png&quot; alt=&quot;モバイルでのページエクスペリエンス&quot; width=&quot;480&quot; height=&quot;630&quot; title=&quot;モバイルでのページエクスペリエンス&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;十日後の状況&quot;&gt;十日後の状況&lt;/h3&gt;
&lt;p&gt;　96.7%まで戻りました。とりあえずこの辺りで良しとします。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/google_experience_6.png&quot;&gt;&lt;img src=&quot;/images/google_experience_6.png&quot; alt=&quot;モバイルでのページエクスペリエンス&quot; width=&quot;480&quot; height=&quot;641&quot; title=&quot;モバイルでのページエクスペリエンス&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Google Search Console通称「サチコ」というらしいです。&lt;a href=&quot;#back&quot;&gt;戻る&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 03 Jun 2021 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2021-06-03/pagespeed</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2021-06-03/pagespeed</guid>
        
        <category>jekyll</category>
        
        <category>google</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>マンカラは後手でも勝てるか？</title>
        <description>&lt;h3 id=&quot;自分のアプリと他のアプリを手動で対戦させてみた&quot;&gt;自分のアプリと他のアプリを手動で対戦させてみた&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/software/2020-06-07/mancala&quot;&gt;以前の記事&lt;/a&gt;で６×２列のマンカラが先手必勝なのか後手必勝なのかを自作プログラムで調べましたが、時間がかかり過ぎるので結論が得られないままでした。そこで自分のアプリと他の強いアプリを対戦させてみて、その結果から石の数（豆の数）毎に先手必勝なのか後手必勝なのかを推測してみようと思います。&lt;br /&gt;
　google playに公開されているマンカラアプリの中で、マンカラカラハ（classicルール&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;）で遊ぶことが出来て、初期配置の石の数を３個から７個まで選択出来るアプリを３つ選んで、先手・後手の対戦結果から推測します。どのアプリと比較したかは別に公開しても構わないと思うのですが、もしかしたら作者に歓迎されない可能性もあるので使用したアプリ名は一応伏せておきます。また比較する時はアプリの強さ設定で全て&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;最強&lt;/code&gt;に設定して比較しています。&lt;/p&gt;

&lt;h3 id=&quot;対戦成績&quot;&gt;対戦成績&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;自分のアプリ&lt;/a&gt;は対戦結果を先手・後手別に記録出来る様にしているの&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;で、そのスクリーンショットを以下に並べます。&lt;br /&gt;
※画像クリックで拡大表示&lt;/p&gt;

&lt;h4 id=&quot;-豆３つの対戦成績&quot;&gt;* 豆３つの対戦成績&lt;/h4&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/results_3beans.png&quot;&gt;&lt;img src=&quot;/images/results_3beans.png&quot; alt=&quot;豆３つ&quot; width=&quot;480&quot; height=&quot;270&quot; title=&quot;豆３つ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-豆４つの対戦成績&quot;&gt;* 豆４つの対戦成績&lt;/h4&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/results_4beans.png&quot;&gt;&lt;img src=&quot;/images/results_4beans.png&quot; alt=&quot;豆４つ&quot; width=&quot;480&quot; height=&quot;270&quot; title=&quot;豆４つ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-豆５つの対戦成績&quot;&gt;* 豆５つの対戦成績&lt;/h4&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/results_5beans.png&quot;&gt;&lt;img src=&quot;/images/results_5beans.png&quot; alt=&quot;豆５つ&quot; width=&quot;480&quot; height=&quot;270&quot; title=&quot;豆５つ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-豆６つの対戦成績&quot;&gt;* 豆６つの対戦成績&lt;/h4&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/results_6beans.png&quot;&gt;&lt;img src=&quot;/images/results_6beans.png&quot; alt=&quot;豆６つ&quot; width=&quot;480&quot; height=&quot;270&quot; title=&quot;豆６つ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h4 id=&quot;-豆７つの対戦成績&quot;&gt;* 豆７つの対戦成績&lt;/h4&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/results_7beans.png&quot;&gt;&lt;img src=&quot;/images/results_7beans.png&quot; alt=&quot;豆７つ&quot; width=&quot;480&quot; height=&quot;270&quot; title=&quot;豆７つ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　対戦成績表の見方ですが、&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;マンカラナッツ&lt;/a&gt;では&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;やばい&lt;/code&gt;モード以外では初手をランダムに決めるようにしていて、勝負に拘っていないので、アプリが勝てるのかどうかを判断する場合は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;やばい&lt;/code&gt;モード以外は見る必要がありません。勝ちの欄の数字はＡＩ対戦で人間側が勝った数字、つまり比較対象となっているアプリが勝ったということです。また比較するために選んだアプリが初手をランダムに決めているものもあるので、一回だけの対戦ではなく何回か対戦させました。&lt;br /&gt;
　注目すべきは黄色い丸で囲んだ部分の数字です。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;後手で勝つことが出来るか&lt;/code&gt;です。豆の数が３、４、５、７の時は後手の勝ち星が全て&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;で、比較対象のアプリが後手の場合は、何度やっても&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;自分のアプリ&lt;/a&gt;に勝てません。&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;自分のアプリ&lt;/a&gt;が数あるマンカラアプリの中で最強だと主張しているのではなく、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;マンカラカラハというゲームはお互いが最善を尽くせば先手必勝&lt;/code&gt;なのではないか？ということです。負けの欄の数字（比較対象のアプリが負けた数字＝&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;自分のアプリ&lt;/a&gt;が勝った数字）を見ると、勝ちの欄の数字より大きいので勝率は良い方だと思いますが、先に言ったように比較対象のアプリは初手をランダムに決めている（＝勝負に拘ってない）ものもあるので一概には言えません。マンカラでは初手で悪手を選択するとそれだけで勝てなくなるような気がします。&lt;br /&gt;
　また豆の数が６の時は先手でも後手でも勝ったり負けたりなので、どちらとも言えませんが双方が最善を尽くしたら引分けなのかもしれません。上の対戦成績結果以外で試していた時も引分けになる頻度が結構高かったです。&lt;br /&gt;
　&lt;del&gt;豆の数３、４、５、７で後手で自分のアプリに勝てるアプリを見つけた方は是非教えて頂きたいと思います。読みの深さが勝っていれば勝てることもあり得るので、自分のアプリをより深く読むように設定して確認したいと思ってます。&lt;/del&gt;また、単純に読みを深くするだけでなく、機械学習等の別のアルゴリズムを使って別の指し手を導き出すアプリが存在するかも知れないと思ってます。&lt;br /&gt;
　&lt;del&gt;但し、マンカラカラハと称していてもアプリによっては違うルールになっているものがあるのでその場合は連絡不要です。&lt;/del&gt;自分のアプリは&lt;a href=&quot;https://www.nintendo.co.jp/switch/as7ta/&quot;&gt;Nintendo Switchの世界のアソビ大全51&lt;/a&gt;に収録されているマンカラと同じルールです。&lt;/p&gt;

&lt;h3 id=&quot;結論&quot;&gt;結論&lt;/h3&gt;
&lt;p&gt;　豆の数１の時と２の時は&lt;a href=&quot;/software/2020-06-07/mancala&quot;&gt;以前の記事&lt;/a&gt;で結論が出ていると思っているので、以下のように推測します。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;豆の数&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;１&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;２&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;３&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;４&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;５&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;６&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;７&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;カラハClassic&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;先手必勝&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;先手必勝&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;先手必勝&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;先手必勝&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;先手必勝&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;引分け？&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;先手必勝&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　強さの比較に使用したアプリも&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;自分のアプリ&lt;/a&gt;もおそらく似たような評価関数と、MIN-MAX法及びαβ法を使った先読み探索で指し手を決めていると思うので、この推測が絶対正しいとは言えません。先読みの手数に制限があるからです。&lt;br /&gt;
　今将棋や囲碁で流行っている機械学習（Deep Learning等）によるＡＩだと違う指し手を選んで全てのマンカラアプリに後手でも勝つなんてことがないとは言い切れませんが、マンカラは将棋や囲碁に較べたら変化の幅が狭いので、将棋や囲碁のように劇的な強さの向上はないでしょう。でも誰か試している人はいないのでしょうか？機械学習を使ったらどうなるか、ちょっと興味あります。&lt;br /&gt;
　機械学習（強化学習）を使った&lt;a href=&quot;https://play.google.com/store/apps/details?id=tictactoe_evo.io.github.happyclam&quot;&gt;三目並べアプリ&lt;/a&gt;では、結局MIN-MAX法を使ったものと同じ結果（双方が最善を尽くせば常に引分け）になるので、マンカラの場合も結局同じ結果が得られるだけかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;後手でも勝てた2022-01-28追記&quot;&gt;後手でも勝てた（2022-01-28追記）&lt;/h3&gt;
&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;/images/gote_win.png&quot;&gt;&lt;img src=&quot;/images/gote_win.png&quot; alt=&quot;豆４つ&quot; width=&quot;480&quot; height=&quot;206&quot; title=&quot;豆４つ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;　スマホを変えたのでテストも兼ねて豆４つのパターンでなんとなく遊んでいたら、なんと後手で勝つことが出来ました:flushed:勝てないものと思い込んでいたので驚きましたが、11手読みだと抜け穴があるようですね。&lt;br /&gt;
ところがどうしても手順を思い出せなくて、再現しようとしても出来なくて困っています。&lt;br /&gt;
それにしても、人間がやるよりアプリの方が強いだろうと思って、他のアプリを使って何十局も手動で一生懸命対戦させたのに、ダメじゃん。&lt;br /&gt;
　おそらく他のアプリも&lt;a href=&quot;https://play.google.com/store/apps/details?id=mancala.io.github.happyclam&quot;&gt;マンカラナッツ&lt;/a&gt;と同様に単純な評価関数（勝ちか負けかだけを判断）とMIN-MAX法を使った先読みで指し手を決めていると思うので、アプリ間の強さの違いはあまり無いのだと思います。違いは読みの深さだけになりますが、それも限界があるので自ずと似たような指し手しか選択しないようになると思われます。&lt;br /&gt;
　豆４つの場合先手必勝だとは思いますが、アプリが先手で負ける原因については&lt;a href=&quot;/software/2022-03-10/mancala_evaluate03&quot;&gt;別の記事&lt;/a&gt;にまとめました。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;カラハのclassicルールについては&lt;a href=&quot;/software/2020-08-09/mancala_easy&quot;&gt;以前の記事&lt;/a&gt;を見て下さい。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;先手・後手別の対戦結果を自分が知りたかったのでこの機能を付けました。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 22 Jan 2021 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/software/2021-01-22/mancala_evaluate02</link>
        <guid isPermaLink="true">https://happyclam.github.io/software/2021-01-22/mancala_evaluate02</guid>
        
        <category>dart</category>
        
        <category>android</category>
        
        <category>flutter</category>
        
        <category>c++</category>
        
        <category>mancala</category>
        
        
        <category>software</category>
        
      </item>
    
  </channel>
</rss>
