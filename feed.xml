<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>自己満足プログラミング</title>
    <description>Reinventing the wheel.</description>
    <link>https://happyclam.github.io/</link>
    <atom:link href="https://happyclam.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 19 Dec 2024 20:46:31 +0900</pubDate>
    <lastBuildDate>Thu, 19 Dec 2024 20:46:31 +0900</lastBuildDate>
    <generator>Jekyll v3.10.0</generator>
    
      <item>
        <title>チェスのStalemateとPINの話</title>
        <description>&lt;h3 id=&quot;チェスアプリのバグを見つけてしまいました&quot;&gt;チェスアプリのバグを見つけてしまいました&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;https://chess-primer.jp/stalemate-flow.html&quot;&gt;チェス入門&lt;/a&gt;というサイトのステイルメイトの問題集を&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;で解いてみると８問中１問間違えてしまいました。ステイルメイトの問題集はあまり見かけないので、十分なテストをしてなかったのが原因です。&lt;a href=&quot;https://happyclam.booth.pm/items/6325341&quot;&gt;マンカラアプリ&lt;/a&gt;もそうですが（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;詰めマンカラ問題集&lt;/code&gt;なんて聞いたことがありません）、問題集が手に入らないのである程度のところでテストを打ち切ってリリースしていたのですが、実際に解けない問題を見つけてしまった以上、対処することにしました。&lt;/p&gt;

&lt;h3 id=&quot;pinが絡む問題に問題がある&quot;&gt;PINが絡む問題に問題がある&lt;/h3&gt;
&lt;p&gt;　解けなかったのは&lt;a href=&quot;https://chess-primer.jp/stalemate-flow.html&quot;&gt;チェス入門サイトの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;問題７&lt;/code&gt;&lt;/a&gt;で、以下の局面です。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;初期盤面&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stalemate_01.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stalemate_01.png&quot; alt=&quot;ステイルメイト問7-1&quot; width=&quot;320&quot; height=&quot;365&quot; title=&quot;ステイルメイト問7-1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　正解手は以下のようにQueenをc4に移動する&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qc4&lt;/code&gt;です。先手（白）劣勢ですが「王手クイーン取り」を掛けてステイルメイト（引き分け）に持ち込むという問題です。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;正解盤面&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stalemate_02.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stalemate_02.png&quot; alt=&quot;ステイルメイト問7-2&quot; width=&quot;320&quot; height=&quot;365&quot; title=&quot;ステイルメイト問7-2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;でも、初期盤面から&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;に指させてみると、以下のように&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qxd5&lt;/code&gt;と黒のクイーンを取ります。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;不正解&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stalemate_03.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stalemate_03.png&quot; alt=&quot;ステイルメイト問7-3&quot; width=&quot;320&quot; height=&quot;365&quot; title=&quot;ステイルメイト問7-3&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　クィーンは取れるのですが次に後手（黒）がルークをa1に移動（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ra1&lt;/code&gt;）して合い駒効かずでチェックメイトされて先手（白）が負けます。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;不正解後の変化&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stalemate_04.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stalemate_04.png&quot; alt=&quot;ステイルメイト問7-4&quot; width=&quot;320&quot; height=&quot;365&quot; title=&quot;ステイルメイト問7-4&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;正解手が指せないからといってバグとは限らないのですが、この問題の場合は３手の読みでステイルメイトに気付いて５手読めば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ra1&lt;/code&gt;からの負けに気付くので、候補手を絞っている可能性があるので一概には言えませんが５手読めば正解できるはずです。&lt;br /&gt;
　では、手動で先手（白）が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qc4&lt;/code&gt;と指した局面で&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;に指させてみると&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;先手（白）のクィーンを取る、正しい応手？&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stalemate_05.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stalemate_05.png&quot; alt=&quot;ステイルメイト問7-5&quot; width=&quot;320&quot; height=&quot;365&quot; title=&quot;ステイルメイト問7-5&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;相手のクィーンを取って（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qxc4&lt;/code&gt;）ステイルメイトと判定してゲーム終了となるのでこれも問題ありません。&lt;br /&gt;
　しかし、手動で先手（白）が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qc4&lt;/code&gt;と指した局面から後手（黒）も手動で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qxc4&lt;/code&gt;と指すと以下のようになります。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;手動で指すと「後手勝ち」の判定！！！&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stalemate_06.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stalemate_06.png&quot; alt=&quot;ステイルメイト問7-6&quot; width=&quot;320&quot; height=&quot;365&quot; title=&quot;ステイルメイト問7-6&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　これはイケマセン。ステイルメイトなのに「後手の勝ちです」と判定してしまってます。これは明らかなバグです。&lt;br /&gt;
どうやらチェスで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;と呼ばれる状態の時にSTALEMATEの判定を間違うようです。
このステイルメイトの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;問題７&lt;/code&gt;のミソは他の問題とは違って、単に「王手クィーン取り」を掛けてステイルメイトに持ち込むだけではなく、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;状態に持ち込むところです。初手は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qd4&lt;/code&gt;でも&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qe4&lt;/code&gt;でもダメで、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qc4&lt;/code&gt;でなければならないのです。&lt;/p&gt;

&lt;h3 id=&quot;将棋ではpinは大した問題ではない&quot;&gt;将棋ではPINは大した問題ではない&lt;/h3&gt;
&lt;p&gt;　上の図の終局の局面は将棋でも珍しくない形だと思います。将棋なら先手（白）は指す手が無くて投了するしか無い局面です。もし将棋初心者が指す手に困って&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;されている&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e2&lt;/code&gt;の駒（ポーン）を前に動かしたとしても、後手（黒）がクィーンで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f1&lt;/code&gt;の玉（キング）を取れば済む話です（&lt;a href=&quot;/software/2024-04-07/tdd&quot;&gt;以前の記事&lt;/a&gt;参照）。その場合、将棋でも&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;王手放置&lt;/code&gt;は反則と規定されているので正確に言えば先手（白）の反則負けと言うべきですが、いずれにしても後手（黒）の勝ちは揺るぎません。でも将棋と違ってチェスの場合は劣勢だった先手が引き分け（ステイルメイト）に持ち込んだことになります。将棋なら先手（白）負けなのにチェスだと引き分けになります。&lt;br /&gt;
　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;に対応する将棋用語は何かよく分かりませんが、「串刺しにされてる」とか「角の効きに入ってる」とかの表現はありますが、ピッタリした用語が無いのが将棋というゲームが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;をそれほど重要視していないことの証拠にもなるでしょう。&lt;br /&gt;
　将棋アプリを開発する立場で見ても&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;なんて全然気にしていませんでした。チェスのソフトや昔からある将棋ソフトが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;をチェックするアルゴリズムを使っているのは知ってましたが、それは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stockfish&lt;/code&gt;由来のアルゴリズムを流用して作っていたからであって、自分のように一からアルゴリズムも考えて開発するのなら関係のない話だと思っていたし実際に作ることも出来ました。でも、今回の&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;のバグの修正に取り掛かってみて想像以上に面倒臭い作業を強いられて、チェスのステイルメイト（特に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;絡み）に対応するためには将棋とは別のやり方（別のデータ構造と別のアルゴリズム）で作る方がスマートに出来るのだろうということが想像できました。何がそんなに面倒くさいかと言うと長くなるので省略しますが、チェス盤のマス目を一つ一つ移動しながら&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;のチェックをするのはかなり&lt;strong&gt;無理がある&lt;/strong&gt;のです。&lt;br /&gt;
　将棋ソフト開発関連の本などをチラ見すると&lt;strong&gt;「データ構造に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;用のフラグを持たせる」&lt;/strong&gt;とか&lt;strong&gt;「合法手を列挙する」&lt;/strong&gt;とか言う表現をよく見かけますが、自分の将棋関連アプリ（&lt;a href=&quot;https://happyclam.booth.pm/items/6323599&quot;&gt;３三将棋&lt;/a&gt;、&lt;a href=&quot;https://happyclam.booth.pm/items/6325376&quot;&gt;５五将棋&lt;/a&gt;、&lt;a href=&quot;https://happyclam.booth.pm/items/6346070&quot;&gt;７七将棋&lt;/a&gt;）はデータ構造に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;用のものはありませんし、「合法手を列挙する」作業も一切していませんが困ることは何もありませんでした。人間が実際に駒を動かすイメージで一つ一つの駒を８方向に動かす作業を想定したアルゴリズムになっていて、普通はそうしたやり方を採用するだろうと思われる極普通のやり方（アルゴリズム）です。「合法手を列挙する」と聞いて、昔から「何でそんなやり方してるのかなぁ？」と不思議に思ってました。もしかして、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stockfish&lt;/code&gt;を作った人は、最初私のようなやり方で&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;を作り始めてステイルメイトの実装に掛かった時に「こりゃダメだ！」「こんなことやってられない！」と感じて新しいやり方（データ構造とアルゴリズム）を捻り出したんじゃないでしょうか？私の勝手な想像ではありますが、今回のバグ修正に取り組んで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stockfish&lt;/code&gt;を作った人の気持ちが分かったような気がしました。&lt;br /&gt;
　今回のバグ修正は&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;が絡むステイルメイトに関わる部分だけ&lt;/strong&gt;が下膨れした感じになっていて、幸いそういうケースはあまりないので全体の処理が重くなったということはありません。&lt;/p&gt;

&lt;h3 id=&quot;ステイルメイトは最善手なのか&quot;&gt;ステイルメイトは最善手なのか？&lt;/h3&gt;
&lt;p&gt;　上に挙げた&lt;a href=&quot;https://chess-primer.jp/stalemate-flow.html&quot;&gt;チェス入門サイトの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;問題７&lt;/code&gt;&lt;/a&gt;は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PIN&lt;/code&gt;の問題以外にも興味深い変化を含んでいます。上記のバグをなんとか&lt;strong&gt;無理がある&lt;/strong&gt;方法で修正して過去のテストも全部通過してデグレード（リグレッション）が無いところまでなんとか辿り着いて、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;問題７&lt;/code&gt;も含めて&lt;a href=&quot;https://chess-primer.jp/stalemate-flow.html&quot;&gt;すべての問題&lt;/a&gt;に正解することも確認しました。&lt;br /&gt;
　そして、試しに先程の先手が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qc4&lt;/code&gt;と指した下の正解局面から&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;正解盤面&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stalemate_02.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stalemate_02.png&quot; alt=&quot;ステイルメイト問7-2&quot; width=&quot;320&quot; height=&quot;365&quot; title=&quot;ステイルメイト問7-2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;修正済みの&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;に後手を指させてみると&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;後手がステイルメイトを避けた局面&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stalemate_07.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stalemate_07.png&quot; alt=&quot;アプリ修正後の指し手&quot; width=&quot;320&quot; height=&quot;365&quot; title=&quot;ステイルメイト問7-7&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;なんと、先手のクィーンを取らずに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qe4&lt;/code&gt;と指して王手（チェック）を回避しました。修正する前はちゃんと先手のクィーンを取っていたので、修正前より悪化してるような気もがしますがそうではなく、正しくステイルメイトの局面だと判断できるようになって、後手（アプリ）が「優勢なのにステイルメイトなんかにしてたまるか！」とクィーンを犠牲にしてキングが逃げる手を選んだわけです。その後先手は当然後手のクィーンを取って（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qxe4+&lt;/code&gt;）以下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kg5&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qa8&lt;/code&gt;となり後手のキングは大海に逃げ出すことは出来ますが、駒をボロボロ取られて十数手後に結局先手が勝ちます。結局そうなるのなら「ステイルメイトで妥協しておくべきだったんじゃないの？」と言いたくなりますが、自分のチェスアプリは深く読めていない（３〜５手）こともあってこうなります。&lt;br /&gt;
　このステイルメイトを無理やり避ける現象は&lt;a href=&quot;/software/2020-02-11/evaluatechess&quot;&gt;以前の記事&lt;/a&gt;で書いたステイルメイトの局面をどのように評価するか（ステイルメイトの局面に掛ける係数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0.7&lt;/code&gt;をどのように決めるか問題）とも関わってくるのですが、自らステイルメイト（引き分け）を受け入れて確定させるより、少しでも勝つ可能性がある手を選ぶ方が最善手と言えなくもないような気もします。&lt;br /&gt;
　それにしても&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;詰めチェス&lt;/code&gt;（チェス・プロブレム）の中には問題の趣旨以外の有効な着手が存在するもの、将棋で言えば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;余詰め&lt;/code&gt;がある詰将棋のような感じの問題が多いですね。それとも自分がチェス初心者だからそう感じるだけで、ベテランチェスプレイヤーなら上記の局面でステイルメイト（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qc4+&lt;/code&gt;）以外は考えられないって感じでしょうか？身近にチェスに詳しい人がいないのでよく分かりません。&lt;br /&gt;
　&lt;a href=&quot;/software/2019-11-09/stalemate3&quot;&gt;以前の記事&lt;/a&gt;に書きましたが、そもそもステイルメイトの局面評価値に係数を掛けようと思ったのは、ステイルメイトの評価値を引き分けなのだからという理由で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;にすると以下の局面で先手が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bf6&lt;/code&gt;という手を選んだからです。&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;ステイルメイトが最善手？&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stalemate_08.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stalemate_08.png&quot; alt=&quot;Stalemateは最善手？&quot; width=&quot;320&quot; height=&quot;467&quot; title=&quot;Stalemateは最善手？&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　先手はビショップとナイトを持っていて後手はルークだけで形勢は先手有利のはずなのに先手から進んでステイルメイト（引き分け）にするのはおかしいだろうと考えたのが事の発端です。この局面の後、指し手を進めても後手玉は捕まらないからステイルメイトにするのが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;最善手&lt;/code&gt;なのでしょうか？自分は優勢なのに自ら進んでステイルメイトにするのはおかしいと考えたので、形勢が有利な時はステイルメイトの評価値にマイナスの値を掛けてやや反転？する仕様にした（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kf7&lt;/code&gt;の手を指します）のですが、もし&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bf6&lt;/code&gt;（ステイルメイト）が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;最善手&lt;/code&gt;というのがチェスプレイヤーの共通認識であるのならステイルメイト局面の評価値は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;のままでいいかもしれません。でも、上の局面で先手のポーンが一つでも&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b5&lt;/code&gt;辺りに残っていれば敢えてステイルメイトにする人はいないと思います。そのような局面とも比較するためにもステイルメイトの局面に掛ける係数は必要だと思います。&lt;br /&gt;
　あと、念の為もう一度書いておきますが、&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;は「&lt;a href=&quot;https://chess-primer.jp/stalemate-flow.html&quot;&gt;チェス入門サイト&lt;/a&gt;のステイルメイトの問題は全問正解します」、正解するけどその後の指し手が問題の趣旨通りには進まないと言うことです。&lt;/p&gt;

&lt;h3 id=&quot;他にも見えてきた問題&quot;&gt;他にも見えてきた問題&lt;/h3&gt;
&lt;p&gt;　上記の&lt;a href=&quot;https://chess-primer.jp/stalemate-flow.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;問題７&lt;/code&gt;&lt;/a&gt;の正解手の後の後手の一手（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qe4&lt;/code&gt;）は&lt;strong&gt;あまりにも無理してステイルメイトを避けている&lt;/strong&gt;ような気もしたので、試しにステイルメイトの局面の評価値に掛けている係数（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0.7&lt;/code&gt;）を変更したら、後手（アプリ）は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qc4+&lt;/code&gt;と着手してステイルメイトを選ぶことを確認しました。そして、将棋とは違って局面の評価値に使っている最大値や最小値が悪影響を与えてることが見えてきました（あくまでも私が作った評価関数についての話です）。&lt;br /&gt;
　&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;では局面を評価する際の先手勝ちの局面の評価値を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50000&lt;/code&gt;、後手勝ちの局面の評価値を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-50000&lt;/code&gt;にしているのですが、駒の重みは&lt;a href=&quot;/project/2019-11-16/chessapp&quot;&gt;この記事&lt;/a&gt;のようになっていて、クィーンが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;90&lt;/code&gt;、ルークが&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50&lt;/code&gt;…という感じで相手の駒を全部取っても&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50000&lt;/code&gt;なんていう大きな数値にはなりません。この先手勝ち局面（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50000&lt;/code&gt;）と後手勝ち局面（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-50000&lt;/code&gt;）のような大きな値にマイナスの係数（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0.7&lt;/code&gt;）を掛けても、自分の思惑通りには比較出来ていなかったようです。&lt;br /&gt;
　それでも&lt;a href=&quot;https://chess-primer.jp/stalemate-flow.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;問題７&lt;/code&gt;&lt;/a&gt;以外は正解出来ていたのは、&lt;a href=&quot;https://chess-primer.jp/stalemate-flow.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;問題７&lt;/code&gt;&lt;/a&gt;のような紛れがなく明快な手しか無かったのでステイルメイトの局面を勝ちあるいは負けとほぼ同等の評価をしていたからでした。&lt;a href=&quot;https://chess-primer.jp/stalemate-flow.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;問題７&lt;/code&gt;&lt;/a&gt;のように紛れがある問題だと、負けるぐらいなら他の手を選ぼうとAIが考えてステイルメイトを避けたということです。ということで、&lt;a href=&quot;https://chess-primer.jp/stalemate-flow.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;問題７&lt;/code&gt;&lt;/a&gt;で正解後の後手の一手を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qe4&lt;/code&gt;ではなく&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qc4+&lt;/code&gt;を選ぶように調整した結果、ステイルメイトの局面に掛ける係数を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0.0009&lt;/code&gt;にしました。これで勝敗の決着がつく大きな値（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50000&lt;/code&gt;や&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-50000&lt;/code&gt;）と、形勢判断時の評価値（駒の重みや駒の働きの合計値）との比較が出来ているようです。ちなみに係数を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0.001&lt;/code&gt;にすると元通り&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qe4&lt;/code&gt;と指してステイルメイトを避けます。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  === intro07-2
    --- problem -7-2

8|♜| | | | | | | |
7| | | | | | | | |
6| | | | | | | | |
5| | | |♛| | | |♟|
4| | |♕| | | | |♚|
3| | | | | | |♟| |
2| | | | |♙|♟|♙| |
1| | | | | |♔| | |
  a b c d e f g h

      ✔ expects stalemate -7-2 (686ms)
♕
8|♜| | | | | | | |
7| | | | | | | | |
6| | | | | | | | |
5| | | | | | | |♟|
4| | |♛| | | | |♚|
3| | | | | | |♟| |
2| | | | |♙|♟|♙| |
1| | | | | |♔| | |
  a b c d e f g h

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;これでようやく&lt;a href=&quot;https://chess-primer.jp/stalemate-flow.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;問題７&lt;/code&gt;&lt;/a&gt;の正解後も問題の趣旨通りに後手がステイルメイトの手を選ぶようになりました。&lt;br /&gt;
　局面の最大値や最小値なんて閉じたアプリの中での相対的な評価値でしかないので何でもいいと思っていました。将棋アプリも先手の勝ちは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;50000&lt;/code&gt;、後手の勝ちは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-50000&lt;/code&gt;を使っていますし、昔作ったオセロでもよくINT型のMAX値とMIN値を使っていました。でも将棋やオセロと違って&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;勝ち&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;負け&lt;/code&gt;以外の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ステイルメイト&lt;/code&gt;という&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;勝ち&lt;/code&gt;と&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;負け&lt;/code&gt;の間にある局面を評価するには工夫する必要があるようです。このステイルメイトの局面に掛ける係数は、その意図は昔書いた記事（&lt;a href=&quot;/software/2020-02-11/evaluatechess&quot;&gt;「チェスだけに必要な局面評価属性」&lt;/a&gt;）の通りですが、もし評価関数が完璧なものであるなら必要ないのだと思います。ステイルメイトは引き分けとして評価値&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;でいいと思うのですが、完璧な評価関数なんて有り得ないので必要になってくるものだと思います。&lt;br /&gt;
　それと一つのケースだけを見て&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-0.0009&lt;/code&gt;に決めてしまっていいのかと思うかも知れませんが、どのように決めるべきか分かってませんし最大値や最小値も駒の重みに関しても言ってみれば適当に決めた値なので、数は少ないですが過去のステイルメイトのテストケースも通過したことですし当面これで様子見ようと思います。&lt;br /&gt;
　今回、上記の点を弄って個人的にはスッキリしましたが、評価関数は少し変わっただけですし読みの深さも変わっていないので、ステイルメイトの判定が以前より正確になっただけで強くなったわけではないのが残念なところです。&lt;/p&gt;

&lt;h3 id=&quot;アプリのアップデートについて&quot;&gt;アプリのアップデートについて&lt;/h3&gt;
&lt;p&gt;　今回の修正でもうバグは無くなったのでは？と思ってますが、将棋関連アプリに較べるとチェスアプリに関してはステイルメイトというルールのおかげで安心感が無いというのが本音です。何か問題を見つけた場合はメールか&lt;a href=&quot;https://happyclam.booth.pm/&quot;&gt;Boothサイト&lt;/a&gt;からご連絡下さい。&lt;br /&gt;
　取り敢えず、現在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Booth&lt;/code&gt;で販売している&lt;a href=&quot;https://happyclam.booth.pm/items/6346197&quot;&gt;ミニチェスアプリ&lt;/a&gt;は近いうちに一度今回の修正を反映させてアップデートするつもりです。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Amazon App Store&lt;/code&gt;で公開している&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;に関してはいつ削除されるかも知れませんし、今後はAmazonでは更新しないつもりです。無料のお試し版として残しておきますが、今後はチェスアプリも&lt;a href=&quot;https://happyclam.booth.pm/&quot;&gt;Booth&lt;/a&gt;で販売する予定です。→&lt;a href=&quot;https://happyclam.booth.pm/items/6399553&quot;&gt;Boothで最新版&lt;/a&gt;公開しました。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 15 Dec 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/software/2024-12-15/chessPIN</link>
        <guid isPermaLink="true">https://happyclam.github.io/software/2024-12-15/chessPIN</guid>
        
        <category>coffeescript</category>
        
        <category>javascript</category>
        
        <category>shogi</category>
        
        <category>chess</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>野良アプリ販売始めました</title>
        <description>&lt;h3 id=&quot;google-play-以外でアプリは売れるのか&quot;&gt;Google Play 以外でアプリは売れるのか？&lt;/h3&gt;
&lt;p&gt;　めでたく？&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Play&lt;/code&gt;で公開していたアプリが削除された（Googleが変更した規約に必要な作業をせずに放置していたため）ので、今まで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Play&lt;/code&gt;で公開していたアプリを&lt;strong&gt;広告表示を無しにした野良アプリ&lt;/strong&gt;として販売してみることにしました。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Play&lt;/code&gt;を通さずに新規ユーザーを獲得出来るのでしょうか？&lt;/p&gt;

&lt;h3 id=&quot;どこで売るか&quot;&gt;どこで売るか？&lt;/h3&gt;
&lt;p&gt;　最初は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base&lt;/code&gt;で自作のExcelファイル（マクロ付き）を販売している人を見かけたのが始めるキッカケなんですが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Base&lt;/code&gt;ではスマホからはデジタルコンテンツをダウンロード出来ないようです。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apk&lt;/code&gt;ファイルを商品としてそのままアップロード出来るのはすごく良かったのですが、購入者はPCでダウンロードする必要があるみたいです（スパム対策？GoogleやAppleに忖度？）。スマホアプリを販売しているのに購入者はPCが必要というのが納得いかなかったので使うのを止めました。&lt;br /&gt;
　その他は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shopify&lt;/code&gt;は有料、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DLsite&lt;/code&gt;はエロ分野に偏ってる、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stores&lt;/code&gt;は画像ファイル中心でソフトウェアは想定して無さそう？ということで&lt;a href=&quot;https://happyclam.booth.pm/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Booth&lt;/code&gt;&lt;/a&gt;に決めました。&lt;br /&gt;
　それに&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Booth&lt;/code&gt;では&lt;a href=&quot;https://booth.pixiv.help/hc/ja/articles/115002295113-%E3%82%AD%E3%83%A3%E3%83%B3%E3%82%BB%E3%83%AB%E3%81%97%E3%81%9F%E3%81%84%E3%81%A7%E3%81%99-%E3%81%A9%E3%81%86%E3%81%99%E3%82%8C%E3%81%B0%E3%81%84%E3%81%84%E3%81%A7%E3%81%99%E3%81%8B&quot;&gt;「ダウンロード商品に関しては、キャンセルには応じません」&lt;/a&gt;と運営側で謳ってくれているのが、販売者側としては心強いです。ご購入の際はご注意下さい！！！&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://happyclam.booth.pm/&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/booth_logo.png&quot; alt=&quot;HappyClam&quot; title=&quot;HappyClam&quot; width=&quot;168&quot; height=&quot;60&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;インストール手順&quot;&gt;インストール手順&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://happyclam.booth.pm/&quot;&gt;Boothのサイト&lt;/a&gt;の[購入履歴]から[ダウンロード]のリンクをタップしてファイルをスマホにダウンロード&lt;/li&gt;
  &lt;li&gt;ダウンロードしたファイル（*.zip）の拡張子を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apk&lt;/code&gt;に変更&lt;br /&gt;
何でもいいのでファイル管理アプリを使ってファイル名（拡張子）を変更します。アプリによっては拡張子が表示されないので、表示して変更します。私は&lt;a href=&quot;https://tetra-filer-free.softonic.jp/android&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tetra Free&lt;/code&gt;&lt;/a&gt;というアプリを使ってます。&lt;/li&gt;
  &lt;li&gt;拡張子を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apk&lt;/code&gt;に変更したファイルをファイル管理アプリからタップ&lt;br /&gt;
使用するファイル管理アプリによって警告が出たり設定画面に遷移したりしますが、「許可」を選択して進めれば以下のような手順でインストール作業が進みます。&lt;br /&gt;
※Android11以上であれば自動で&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Play プロテクト&lt;/code&gt;によるスキャンが実行されます。
※既に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Play&lt;/code&gt;からインストールされている場合は削除する必要があるみたいです。&lt;/li&gt;
&lt;/ol&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/install_1.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/install_1.png&quot; alt=&quot;ファイルクリック時&quot; width=&quot;320&quot; height=&quot;158&quot; title=&quot;ファイルクリック時&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div align=&quot;center&quot;&gt;↓&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/install_2.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/install_2.png&quot; alt=&quot;Google Play プロテクト&quot; width=&quot;320&quot; height=&quot;495&quot; title=&quot;Google Play プロテクト&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div align=&quot;center&quot;&gt;↓&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/install_3.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/install_3.png&quot; alt=&quot;スキャン完了&quot; width=&quot;320&quot; height=&quot;442&quot; title=&quot;スキャン完了&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;div align=&quot;center&quot;&gt;↓&lt;/div&gt;
&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/install_4.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/install_4.png&quot; alt=&quot;インストール完了&quot; width=&quot;320&quot; height=&quot;161&quot; title=&quot;インストール完了&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;ソースファイルも参照可能&quot;&gt;ソースファイルも参照可能&lt;/h3&gt;
&lt;p&gt;　JavaScript製のアプリに関してはダウンロードした&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt;ファイルを展開することでソースファイルも見ることが出来ます。過去に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Play&lt;/code&gt;で公開していた時は暗号化プラグインを使用してソースを読めないようにしていましたが、&lt;a href=&quot;https://happyclam.booth.pm/&quot;&gt;Booth&lt;/a&gt;で販売しているものは暗号化していませんのでソースファイルを読むことが出来ます。&lt;br /&gt;
　ただ、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoffeScript&lt;/code&gt;で開発したものを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Webpack&lt;/code&gt;を使って&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;にトランスパイルしたコードなので、整然と書かれていますが一つのファイルに纏まっていて分かりにくいと感じる人もいるかもしれません。元となっている&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoffeeScript&lt;/code&gt;のソースコードやテストコードや開発環境（package.json等）そのものが欲しいという方のために今後ソースコードも別途販売するかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;pcで動かすことも可能&quot;&gt;PCで動かすことも可能&lt;/h3&gt;
&lt;p&gt;　実はJavaScript製のアプリに関してはソースファイルの数カ所をコメントアウトするだけでPCで動かすことも可能です。スマホよりハイスペックのPC上のブラウザで動かすことも出来るのですが、これに関しては別記事で紹介するかもしれません。&lt;br /&gt;
　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoffeeScript&lt;/code&gt;のソース販売と合わせてニーズがあるかどうか知りたいので、&lt;a href=&quot;https://happyclam.booth.pm/&quot;&gt;Boothサイト&lt;/a&gt;から是非ご意見をお寄せ下さい。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 30 Nov 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2024-11-30/strayapp</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2024-11-30/strayapp</guid>
        
        <category>android</category>
        
        <category>coffeescript</category>
        
        <category>programming</category>
        
        <category>javascript</category>
        
        <category>cordova</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>Ubuntu Touch を使ってみる</title>
        <description>&lt;h3 id=&quot;開発のネタ探し中&quot;&gt;開発のネタ探し中&lt;/h3&gt;
&lt;p&gt;　スマホアプリ開発はAppleやGoogleというプラットフォーマーが開発者とユーザーの間に割り込んでくるため嫌気が差してきたので、次は何を作ろうかと考えて他の選択肢を探している時に偶々Youtubeの動画を見かけて&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu Touch&lt;/code&gt;を試してみました。&lt;br /&gt;
　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu Touch&lt;/code&gt;のユーザーなんてほとんどいないので何かアプリを作っても小銭稼ぎは期待できませんが、そもそも当ブログでは自分が使ってみたいものを作ってきたので問題無しです。&lt;/p&gt;

&lt;h3 id=&quot;インストール手順&quot;&gt;インストール手順&lt;/h3&gt;
&lt;p&gt;　以下が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu Touch&lt;/code&gt;を試してみたくなった動画です。細かな注意点も解説されていて非常に助かりました。&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/XW8JU1lHLtk?si=y28wRPv6QsI-OKUg&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;　この動画を見た直後は、いろいろと妄想が膨らんだのですが現実は厳しかったです。&lt;/p&gt;

&lt;h3 id=&quot;必要なもの&quot;&gt;必要なもの&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Pixel 3a XL&lt;/code&gt;&lt;br /&gt;
Amazonの「整備済み品」を18,980円でわざわざ購入しました。&lt;/li&gt;
  &lt;li&gt;UBPortsのインストーラーが使える状態の工場出荷イメージファイル&lt;br /&gt;
&lt;a href=&quot;https://developers.google.com/android/images?hl=ja&quot;&gt;こちら&lt;/a&gt;からイメージファイル（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bonito-pq3b.190801.002-factory-61a2836d.zip&lt;/code&gt;）をダウンロード&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastboot&lt;/code&gt;コマンド
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo apt install android-tools-adb
 sudo apt install fastboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pixel 3a XL&lt;/code&gt;用のUBPortsインストーラー&lt;br /&gt;
&lt;a href=&quot;https://devices.ubuntu-touch.io/device/bonito/&quot;&gt;こちら&lt;/a&gt;から&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubports-installer_0.10.0_linux_amd64.deb&lt;/code&gt;をダウンロード&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;動画内容と違うところ&quot;&gt;動画内容と違うところ&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;上の動画では&lt;a href=&quot;https://developers.google.com/android/images?hl=ja&quot;&gt;Googleのサイト&lt;/a&gt;から&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;フラッシュ&lt;/code&gt;のリンクを踏んで直接インストールしてますが、自分は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;リンク&lt;/code&gt;からダウンロードしたzipファイルを解凍して、スマホのブートローダを起動してからスクリプトを実行しました。&lt;a href=&quot;https://developers.google.com/android/images?hl=ja&quot;&gt;Googleのサイト&lt;/a&gt;に何時までイメージファイルが存在するか分からないのでダウンロードしておいたほうがいいと思います。
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; adb reboot bootloader
 ./flash-all.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;上の動画ではUBPortsインストーラーをdebパッケージからインストールしていますが、自分のUbuntu24.04環境ではインストール出来なかったのでsnapからインストールしました。
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo snap install ubports-installer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;上の動画では出てきませんが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb&lt;/code&gt;コマンドでPixelと接続する際にPixel側で[設定]-&amp;gt;[システム]-&amp;gt;[開発者向けオプション]-&amp;gt;[デフォルトのUSB設定]で[充電]ではなく[ファイル転送]を選択しておく必要がありました。&lt;br /&gt;
　これをしないとPC側から&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb devices&lt;/code&gt;で接続の確認をした際に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb: failed to check server version: protocol fault (couldn&apos;t read status): Connection reset by peer&lt;/code&gt;というエラーになります。現在使っているスマホ（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xperia 10 Ⅲ&lt;/code&gt;）で試してみたら[ファイル転送]になっていなくても接続できたので古いスマホ（Pixel3a）固有の問題かもしれません。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb&lt;/code&gt;コマンド使うのも久しぶりだったので、自分が忘れているだけで昔は全部そうだったような気もします。&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/ubuntu-touch.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/ubuntu-touch.png&quot; alt=&quot;Ubuntu Touch&quot; width=&quot;320&quot; height=&quot;640&quot; title=&quot;Ubuntu Touch&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;waydroidはまだまだ&quot;&gt;Waydroidはまだまだ&lt;/h3&gt;
&lt;p&gt;　Linux上でandroidアプリを動かすための&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Waydroid&lt;/code&gt;、上の動画でも言ってますがandroidアプリを使うぐらいならandroidスマホを使うのが良さそうです。自分はスマホの決済機能もあまり使わないしandroidアプリが無くても生活に必要な多くのことはPCで可能なので、androidスマホが無くてもそこそこ生活していけると思っていますが、どうしてもandroidアプリが必要だという時には&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Waydroid&lt;/code&gt;で「ほとんどのアプリは動く」ぐらいの安心感が欲しいですね。&lt;/p&gt;

&lt;h3 id=&quot;libertineも怪しい&quot;&gt;Libertineも怪しい&lt;/h3&gt;
&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu Touch&lt;/code&gt;上でUbuntuのデスクトップアプリを動かす機能ですが、こちらも少し使っただけですが怪しい動きでした。スマホの画面だと狭いからデスクトップアプリが使えないという話ではなく、うまくインストール出来ないものが多かったです。ネットを検索していると「UbuntuのソフトをUbuntu Touchで使いたい」という問いに対して、「ルート（/）以下のディレクトリを書き込み可能にすれば（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo mount -o remount,rw /&lt;/code&gt;）可能ですよ」と言う回答をよく見かけましたが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Libertine&lt;/code&gt;はそういう危険な操作（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo mount -o remount,rw /&lt;/code&gt;）をしなくていい仕組みの筈です。でもインストール直後に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Libertine&lt;/code&gt;を起動してコンテナを作ってデスクトップアプリをインストールすると、うまく行ったり行かなかったりでした。&lt;br /&gt;
　Ubuntu Touchの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open Store&lt;/code&gt;から&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UT Tweak&lt;/code&gt;というアプリをインストールして、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Make image writable&lt;/code&gt;の機能を使えば&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Libertine&lt;/code&gt;のコンテナ作成に関しては失敗しなかったので元々そうやって使うべきものなのかもしれません。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/ut-tweaks.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/ut-tweaks.png&quot; alt=&quot;UT Tweaksアプリ&quot; width=&quot;320&quot; height=&quot;331&quot; title=&quot;UT Tweaksアプリ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu Touch&lt;/code&gt;をリブートするまで書き込み可にするというオプションが用意してあります（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[Read-Write]Temporary(until reboot)&lt;/code&gt;をタップ）。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;コマンドでいろいろなパッケージをインストールする際に、これをOnにしておけば警告が出なくなったりしますが、Ubuntuのデスクトップアプリを何でもインストール出来るわけでは無いようです。&lt;br /&gt;
　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt;を有効にする機能もこのアプリに用意してあるので、まず最初に入れるべきアプリかも。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/ut-ssh.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/ut-ssh.png&quot; alt=&quot;ssh設定&quot; width=&quot;320&quot; height=&quot;640&quot; title=&quot;ssh設定&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;日本語が入力出来ない&quot;&gt;日本語が入力出来ない&lt;/h3&gt;
&lt;p&gt;　モバイルPCとして使えなくても、せめてこのブログの記事を書くことぐらいは出来ないかなぁなんて思っているのですが、今動かしている&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu Touch OTA 5&lt;/code&gt;は日本語入力に対応していません。日本語関係のパッケージを入れてみたりしましたが自分の力では出来そうになかったです。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/ut-language.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/ut-language.png&quot; alt=&quot;日本語入力関連&quot; width=&quot;320&quot; height=&quot;640&quot; title=&quot;日本語入力関連&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt;で接続して&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;コマンドで言語関連のpackageをインストールしてみました。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IBus Preferences&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mozc&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fcitx&lt;/code&gt;の日本語入力関連のアイコンが並んでいて一見使えそうですが、インストール時にエラーが発生していて使えません。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu Touch&lt;/code&gt;自体は何度でもインストールし直せる状態なのでシステムが壊れてもいいからと、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo mount -o remount,rw /&lt;/code&gt;した後にいろいろやって&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu Touch OTA6&lt;/code&gt;にバージョンアップしても違いはなかったです。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/OTA6.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/OTA6.png&quot; alt=&quot;OTA6&quot; width=&quot;270&quot; height=&quot;540&quot; title=&quot;OTA6&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;アプリ開発は情報が少ない&quot;&gt;アプリ開発は情報が少ない&lt;/h3&gt;
&lt;p&gt;　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Open Store&lt;/code&gt;に用意されているアプリはWebベースのアプリが多いみたいで、ネイティブなものは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt&lt;/code&gt;を使うようですが情報が少ないので大変そうです。自分が何か開発するとしたらWebベースのものになると思いますが、日本語の情報はほとんど無さそうです。&lt;br /&gt;
　試しに&lt;a href=&quot;https://download.qt.io/archive/online_installers/4.8/&quot;&gt;Qt Creator&lt;/a&gt;を使ってサンプルをコンパイルしてみましたが、Ubuntu上では動くもののUbuntu Touch上では動きませんでした。こっち方面に進むのは茨の道になりそうです。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/qt-creator.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/qt-creator.png&quot; alt=&quot;Qt Cretor&quot; width=&quot;320&quot; height=&quot;206&quot; title=&quot;Qt Creator&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;それでも期待したい&quot;&gt;それでも期待したい&lt;/h3&gt;
&lt;p&gt;　動作するスマホの機種が限定されるというのは辛いし今使っているスマホ（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xperia 10 Ⅲ&lt;/code&gt;）の代替にはなりませんが、今のスマホを買い換える時までに何か変化があって欲しいな（他人任せ）と思ってます。今でも海外なら&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ubuntu Touch&lt;/code&gt;が動作するハイスペックなスマホは売られてますが、日本だと技適を通過しないことにはマズそう（通話自体は可能？）なので、ここが一番のネックな気がしますね。&lt;br /&gt;
　応援のつもりで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UBPorts&lt;/code&gt;に寄付しようかとやってみたら、なんと日本からの寄付は受け付けていないようで&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PayPal&lt;/code&gt;から送金できませんでした。日本人は相手にされていないみたいで何か悲しいです。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/ubports_paypal.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/ubports_paypal.png&quot; alt=&quot;paypalのエラー&quot; width=&quot;320&quot; height=&quot;214&quot; title=&quot;paypalのエラー&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 16 Nov 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/hardware/2024-11-16/ubuntu_touch</link>
        <guid isPermaLink="true">https://happyclam.github.io/hardware/2024-11-16/ubuntu_touch</guid>
        
        <category>ubuntu</category>
        
        <category>android</category>
        
        
        <category>hardware</category>
        
      </item>
    
      <item>
        <title>Reader Revenue Manager 止めました</title>
        <description>&lt;h3 id=&quot;またgoogleからの理不尽なメール&quot;&gt;またGoogleからの理不尽なメール&lt;/h3&gt;
&lt;p&gt;　Googleから税務情報の更新を促すメールを貰って、取り敢えず&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader Revenue Manager&lt;/code&gt;を使うのを止めました。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader Revenue Manager&lt;/code&gt;と言うのは以前このブログにアクセスすると「支援していただけると励みになります」とダイアログ表示されていた、所謂&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;投げ銭&lt;/code&gt;機能のことです。&lt;/p&gt;

&lt;h3 id=&quot;メールの内容&quot;&gt;メールの内容&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Google に登録されているお客様の税務情報は 2024年12月31日 に失効します。現在のフォームが失効すると、Google は新しい税務フォームが承認されるまで、お支払いから最大 30% の源泉徴収を行うか、お支払いを完全に保留する場合があります。お支払いが期日前に処理され、適切な税金の源泉徴収（該当する場合は最大 30%）が行われるように、税務情報を速やかに更新してください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　税務情報の更新を怠ると「最大 30% の源泉徴収を行う」は理解できるのですが、「お支払いを完全に保留する場合があります」と書かれています。税務情報を更新しないと「高い税率になるよ〜」というのは分かるのですが、なんで支払いを保留するのでしょうか？こちらとしては高い税率でいいから徴収して残りを振り込んでくれればいいと思っているのですが、何の権限があって支払いを保留するのか分かりません。利用規約上にそのような契約があったとしても日本の法律だと無効になるはずですがどうなんでしょう？&lt;br /&gt;
　以前は税務情報の登録はWeb上で簡単に出来た記憶があるのですが、今回は何やら役所から書類を取り寄せる必要があるみたいで、詳細をGoogleに問い合わせようとしてもなかなか目的のリンクに辿り着けなかったり、要領を得ない回答が返って来ます。仕方がないので[新規フォームの申請]リンクをクリックすると以下のようなダイアログが表示されます。&lt;/p&gt;

&lt;div style=&quot;width:400px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/google_tax.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/google_tax.png&quot; alt=&quot;i新規フォーム申請&quot; width=&quot;406&quot; height=&quot;115&quot; title=&quot;新規フォーム申請&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　「以前送信したフォームは削除されます」!!こういう後戻り出来ないGoogle流のUIが罠なんですよねぇ。ここで[新規フォームの作成を開始]を選んで、面倒くさい作業を強いられて途中で止めたりすると、「税務書類が提出されてない」と言われてまた「アカウント削除するぞ！」と脅されるかもしれませんので、取り敢えず[キャンセル]して今回は放置しておこうと思ってます。「Googleさん、どうぞ高い税率でいいから徴収して下さいよ？」、「何で税金徴収せずに全額ガメるの？」って言いたいです。&lt;/p&gt;

&lt;h3 id=&quot;面倒臭い以外の止める理由&quot;&gt;面倒臭い以外の止める理由&lt;/h3&gt;
&lt;p&gt;　そもそも&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AdSense&lt;/code&gt;も&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader Revenue Manager&lt;/code&gt;も小遣い稼ぎが出来ればいいなぁという軽い気持ちでやっていたので、多くのコスト（時間）を掛けるぐらいなら止めようと思ったのが止める理由ですが、もう一つ、もし&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader Revenue Manager&lt;/code&gt;を有効にしたままGoogleに支払いを保留されると&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader Revenue Manager&lt;/code&gt;を使って寄付して頂いても私はそのお金を受け取れないわけで、寄付していただいた方の意志が履行されないことが問題です。&lt;br /&gt;
　寄付してもGoogleにお金が入るだけで私は受け取れないとなると寄付していただいた方も被害者です。そしてそうなることを予見していながら放置しておくことは良くないと思うので、来年どうなるか分かりませんが被害が拡大（そんな心配は無用だとは思いますが）しないためにも、メールを受け取って早々に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader Revenue Manager&lt;/code&gt;の利用を止めました。という訳ですので寄付していただいた数人の方々は「あれっ！寄付してあげたのにどうなったの？」と 思われてるかもしれませんが、今後もブログは続けていきますのでご了承下さい。&lt;br /&gt;
　&lt;a href=&quot;/miscellaneous/2024-05-04/app_private&quot;&gt;以前の記事&lt;/a&gt;に書いたように&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Play&lt;/code&gt;にも不満がありますし、今後は出来るだけGoogleとは距離を置いて行こうと思ってます。&lt;/p&gt;

&lt;h3 id=&quot;kindleはその都度入金&quot;&gt;Kindleはその都度入金&lt;/h3&gt;
&lt;p&gt;　Googleの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AdSense&lt;/code&gt;も&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AdMob&lt;/code&gt;も&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reader Revenue Manager&lt;/code&gt;も一定金額になるまで支払いは保留されています。そのことについてはこちらも了解済みですので文句はありませんが、Google程の大企業だとその保留分の金利だけでもかなりの儲けになるでしょう。それに対してAmazonの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kindle Direct Publishing&lt;/code&gt;で出版した本の売上はその都度入金されます。振込手数料とかはどうなってるのか知りませんが、この点はAmazonはまともですね。&lt;a href=&quot;https://www.amazon.co.jp/HTML5-CoffeeScriptで作る最強の三目並べプログラム-MIN-MAX法からαβ法へ-happyclam-ebook/dp/B01D1IJ0S0/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1473938717&quot;&gt;Kindleに出品しているこの本&lt;/a&gt;は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;380円&lt;/code&gt;ですが、一冊売れるたびに私の口座に&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;121円&lt;/code&gt;振り込まれます、さっきAmazonはまともだと言いましたが、ボリ過ぎだろ！&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Mon, 04 Nov 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2024-11-04/RRM</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2024-11-04/RRM</guid>
        
        <category>google</category>
        
        <category>epub</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>Ubuntuでやねうら王</title>
        <description>&lt;h3 id=&quot;最新将棋aiの必要性を感じてなかった&quot;&gt;最新将棋AIの必要性を感じてなかった&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/software/2018-10-27/unpromote&quot;&gt;以前の記事&lt;/a&gt;にも書きましたが、将棋ソフトに関しては「AI将棋13」というかなり古いWindows用の将棋ソフトをUbuntu機でWineを使って動かしてます。自分の棋力ではこのソフトで十分な強さですし、GUIが使いやすく詰将棋の入力や解答にも便利なので、特に最新の将棋AIソフトを使う必要性を感じていなかったからです。&lt;br /&gt;
　でも、そろそろ最新とまでは行かなくても近年の将棋AIを味わってみるかと思い立ちUbuntuに導入してみました。「やねうら王」自体は昔からLinuxに対応しているのは知っていましたが、将棋GUIソフトで「ShogiHome」というものが存在することを知ったのが切っ掛けで、UbuntuでGUIが動かせるならやってみようって感じです。&lt;br /&gt;
　「やねうら王」に詳しいわけではないので細かな設定は分かりませんが、とにかく動かすために自分がやった手順を紹介してみます。&lt;/p&gt;

&lt;h3 id=&quot;必要なもの&quot;&gt;必要なもの&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yaneurao/YaneuraOu.git&quot;&gt;やねうら王&lt;/a&gt;&lt;br /&gt;
　自分の環境に合わせてコンパイルが必要です。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yaneurao/YaneuraOu/wiki/%E3%82%84%E3%81%AD%E3%81%86%E3%82%89%E7%8E%8B%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%89%8B%E9%A0%86&quot;&gt;評価関数&lt;/a&gt;&lt;br /&gt;
　この記事内の「6. 評価関数のタイプ」という表の中から評価関数を選んで、リンクを辿ってダウンロードします。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.bin&lt;/code&gt;という名前の評価関数ファイルだけあればとりあえず使えるようになるみたいです。自分は表の中から無料で使えてお勧めされている&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;『Lí』（tanuki-wcsc33-2023-05-04）&lt;/code&gt;を選んで、&lt;a href=&quot;https://github.com/nodchip/tanuki-/releases/tag/tanuki-wcsc33-2023-05-04&quot;&gt;リンク先&lt;/a&gt;から&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tanuki-wcsc33-2023-05-04.7z
&lt;/code&gt;をダウンロードしました。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sunfish-shogi/electron-shogi/releases&quot;&gt;将棋GUI（ShogiHome）&lt;/a&gt;&lt;br /&gt;
　リストの中の&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release-v1.14.2-linux.zip&lt;/code&gt;をダウンロードしました。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;インストール手順&quot;&gt;インストール手順&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;やねうら王をダウンロード
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/yaneurao/YaneuraOu.git
cd YaneuraOu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source/eval&lt;/code&gt;ディレクトリを作成して、評価関数ファイル（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nn.bin&lt;/code&gt;）をコピー
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd source
mkdir eval
cp -p ~/Download/tanuki-wcsc33-2023-05-04/eval/nn.bin eval/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Makefileを編集
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-YANEURAOU_EDITION = YANEURAOU_ENGINE_NNUE
+#YANEURAOU_EDITION = YANEURAOU_ENGINE_NNUE
-#YANEURAOU_EDITION = YANEURAOU_ENGINE_NNUE_HALFKP_1024X2_8_32
+YANEURAOU_EDITION = YANEURAOU_ENGINE_NNUE_HALFKP_1024X2_8_32
-#TARGET_CPU = ZEN3
+TARGET_CPU = ZEN3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;変更したのは上記３行です。
自分のUbuntu機のCPUは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AMD Ryzen 7 5700G with Radeon Graphics&lt;/code&gt;なので&lt;strong&gt;TARGET_CPU&lt;/strong&gt;を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZEN3&lt;/code&gt;に、ダウンロードした評価関数が&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tanuki-wcsc33-2023-05-04&lt;/code&gt;なので&lt;strong&gt;YANEURAOU_EDITION&lt;/strong&gt;を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YANEURAOU_ENGINE_NNUE_HALFKP_1024X2_8_32&lt;/code&gt;に、と言う感じです。&lt;a href=&quot;https://github.com/yaneurao/YaneuraOu/wiki/%E3%82%84%E3%81%AD%E3%81%86%E3%82%89%E7%8E%8B%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%89%8B%E9%A0%86&quot;&gt;「やねうら王のインストール手順」&lt;/a&gt;の「6. 評価関数のタイプ」に書かれている表のとおりに指定しただけです。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;やねうら王をコンパイル
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YaneuraOu-by-gcc&lt;/code&gt;というファイルがsourceディレクトリに出来上がります。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;ダウンロードした&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShogiHome（release-v1.14.2-linux.zip）&lt;/code&gt;を解凍し、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShogiHome（ElectronShogi-1.13.7.AppImage）&lt;/code&gt;を右クリックから実行
    &lt;div style=&quot;width:400px; margin: 0 auto;&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;/images/electron.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/electron.png&quot; alt=&quot;ShogiHome&quot; width=&quot;360&quot; height=&quot;301&quot; title=&quot;ShogiHome&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;後はShogiHomeの画面から[設定]-&amp;gt;[エンジン設定]-&amp;gt;[追加]で、先程コンパイルした&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;やねうら王（YaneuraOu-by-gcc）ファイル&lt;/code&gt;を選択して[保存して閉じる]するだけです。
    &lt;div style=&quot;width:400px; margin: 0 auto;&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;/images/electron_engine.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/electron_engine.png&quot; alt=&quot;ShogiHome エンジン管理&quot; width=&quot;360&quot; height=&quot;301&quot; title=&quot;ShogiHome エンジン管理&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;※上記手順の実行環境はUbuntu22.04ですが、Ubuntu24.04を新規にインストールした環境ではShogiHomeの実行ファイル（AppImage）が動きませんでした。&lt;br /&gt;
　&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libfuse2&lt;/code&gt;が必要なようです。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install libfuse2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;　22.04の自分のUbuntu環境にはすでに入っていたようです。&lt;/p&gt;

&lt;h3 id=&quot;ナイアガラの滝を検証&quot;&gt;ナイアガラの滝を検証&lt;/h3&gt;
&lt;p&gt;　試してみるまでもなく結果は分かっていると思いながらも、一応「AI将棋13」と手動で３局対局させてみましたが「やねうら王」の圧勝でした。予想通りでしたがこれだと面白くないので、将棋で大逆転が起きたときの棋譜を一つ比較してみることにしました。&lt;br /&gt;
　まずは「AI将棋13」で解析すると以下のように先手優勢から一気に後手に振れる所謂&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ナイアガラの滝&lt;/code&gt;状態です。&lt;/p&gt;

&lt;div style=&quot;width:400px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/aishogi13.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/aishogi13.png&quot; alt=&quot;AI将棋13 棋譜解析&quot; width=&quot;360&quot; height=&quot;301&quot; title=&quot;AI将棋13 棋譜解析&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　次は同じ棋譜を「やねうら王」で解析した結果です。グラフの赤い縦線が引かれているところは上のグラフの縦線が引かれているところ（先手のピーク）と同じ局面です。&lt;/p&gt;

&lt;div style=&quot;width:400px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/yaneuraou.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/yaneuraou.png&quot; alt=&quot;やねうら王 棋譜解析&quot; width=&quot;360&quot; height=&quot;301&quot; title=&quot;やねうら王 棋譜解析&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　つまり、「AI将棋13」だと終盤一気に逆転したように見えますが、「やねうら王」で確認すると先手のピークは10手以上前に過ぎていて、「AI将棋13」で先手大優勢に見える局面は「やねうら王」では既に後手優勢に変わっていて、逆転したのはかなり前の局面だったことが分かります。&lt;br /&gt;
　AIが進化すると共に勝敗の結論がどんどん前倒しで分かるようになって、いずれは初手を指した瞬間にグラフが上か下に張り付くようになるのでしょうね。将棋の結論が持将棋や千日手ならそうはなりませんが。&lt;br /&gt;
　比較に使った2006年発売の「AI将棋13」は古過ぎるだろうという指摘もあると思いますが、今手元にあるAndroidアプリの「ShogiDroid」で確認しても先手のピークは「AI将棋13」と同じでした（「AI将棋13」はよく出来ていると思います）。「ShogiDroid」のAIは&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPSfish&lt;/code&gt;のようなので、詳しくは知りませんが2016年辺りのAIだと思います、PCではなくスマホで動いているというハンデはありますが。&lt;br /&gt;
　関係ないですが「ShogiDroid」を更新しようとして確認してみたところ、今はもうGooglePlayに公開していないようです。&lt;/p&gt;

&lt;h3 id=&quot;スポンサー&quot;&gt;スポンサー&lt;/h3&gt;
&lt;p&gt;　最近将棋はYoutubeやAbemaで見るだけなのですが、「やねうら王」は今後も棋譜解析に使うと思いますのでわずか&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$10&lt;/code&gt;だけですが&lt;a href=&quot;https://github.com/sponsors/yaneurao&quot;&gt;ここ&lt;/a&gt;から支援しました:sweat_smile:&lt;br /&gt;
　送金しながら思ったのは「趣味で将棋を楽しんでいるだけの自分が支援しているのに、仕事で金儲けのために将棋AIを使っているプロ棋士が支援しないのはおかしいんじゃない？」とは思いましたね:sweat_smile:個人的に支援してるプロ棋士はいるらしいですけど&lt;br /&gt;
　&lt;a href=&quot;https://github.com/sunfish-shogi/electron-shogi&quot;&gt;ShogiHome&lt;/a&gt;もgithub sponsorの窓口用意してくれれば支援したいと思ってます。&lt;/p&gt;

&lt;h3 id=&quot;ossについて少し思うこと&quot;&gt;OSSについて少し思うこと&lt;/h3&gt;
&lt;p&gt;　それにしてもOSSで開発資金回収って難しいだろうなとは思います。本来はどこかの企業に独占させない&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;自由&lt;/code&gt;なソフト（Free Software）というのがOSSの精神だと思いますが、日本では&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Free&lt;/code&gt;を&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;無料&lt;/code&gt;と訳して無料ソフトだと喧伝されているのが残念です。日本人のほとんどがフリーソフト＝無料ソフトという認識しか持ってないのではないでしょうか:sweat_smile:&lt;br /&gt;
　でもOSSの精神を誤解している人が多いことは残念だとは思うけど、すべてのソフトウェアについてOSSがすばらしいやり方だとも思いません。公共性の高いソフトウェア（例えばLinuxやGit）なんかは今OSSとして開発されていることが素晴らしいことだと思いますが、自分個人が作るようなソフトのソースを公開しても「パクられて終わり」になると思うので、GNUの所謂&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPLライセンス&lt;/code&gt;でソフトウェアを公開したいとは思えません。「やねうら王」に関しては過去の経緯を踏まえて仕方なく&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPL&lt;/code&gt;にしているって感じでしょうか？違ってたらスイマセン:bow:事情をよく知らないし、ライセンスについても詳しいわけではないのでこの辺りで止めておきます。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Wed, 12 Jun 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/software/2024-06-12/yaneuraou</link>
        <guid isPermaLink="true">https://happyclam.github.io/software/2024-06-12/yaneuraou</guid>
        
        <category>ubuntu</category>
        
        <category>shogi</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>固定ギア（ピスト）の感想</title>
        <description>&lt;h3 id=&quot;乗ってみる前の想像と違ったこともある&quot;&gt;乗ってみる前の想像と違ったこともある&lt;/h3&gt;
&lt;p&gt;　固定ギア（ピスト）の記事を２つ（&lt;a href=&quot;/miscellaneous/2024-03-10/stroll01&quot;&gt;「固定ギア（ピスト）に乗ってみたい」&lt;/a&gt;、&lt;a href=&quot;/miscellaneous/2024-03-16/stroll02&quot;&gt;「Fuji Stroll、さっそくカスタマイズ」&lt;/a&gt;）書きましたが、実際に２ヶ月ほどピストバイク（Fuji Stroll）乗ってみた感想を書いてみようと思います。自分は自転車業界とは利害関係はありませんし、固定ギアが世間で流行って欲しいと思っているわけでもないので、ネガティブな面も合わせて思ったことや体験したことを書いてみようと思います。&lt;/p&gt;

&lt;h3 id=&quot;ブレーキは必須&quot;&gt;ブレーキは必須&lt;/h3&gt;
&lt;p&gt;　自分が固定ギアに乗ってみたいと思ったのは、&lt;a href=&quot;/miscellaneous/2024-03-10/stroll01&quot;&gt;「固定ギア（ピスト）に乗ってみたい」&lt;/a&gt;という記事で紹介した動画のように、ブレーキ無しのピストバイクで下り坂を下る様が「すげ〜」、「かっこいい〜」、「やってみたい」というものだったので、もしかしたら固定ギアに乗り慣れてくるとブレーキは使わなくなるのではないかと思っていました。法律上ブレーキを付けなくてはいけないだけで、ピストに慣れてくれば「使わなくても済むようになるのかも」と勘違いしてたんです。でも実際はスキッドはブレーキの代わりにはならないし、急な危険回避には絶対にブレーキが必要です。この点は、「なんだ、やはりブレーキは必要なのか」と、過剰に期待しすぎていたのが悪いのですが、少し残念な気がしました。&lt;br /&gt;
　まだスキッドはうまくありませんが、スキッドってやろうと思ってやるものなんですよねぇ、急ブレーキが必要な場面でスキッドでは止まれません、急な危険回避のためには使えません。自分がまだ未熟だからそうなのではなく、今後も急ブレーキの代わりにスキッドを使うなんてことはないでしょう。&lt;br /&gt;
　ちなみにバースピンとかバックサークルとか、曲芸的なトリックには今の所全く興味が湧きません。今後は分かりませんが…。&lt;/p&gt;

&lt;h3 id=&quot;急ブレーキを体験&quot;&gt;急ブレーキを体験&lt;/h3&gt;
&lt;p&gt;　自転車乗っていて急ブレーキをかける機会はそれほどないと思いますが、早くも体験しました。交差点を直進していたところ黄色信号になったタイミングで、対抗の右折車が突っ込んできてお互いにブレーキをかけて、衝突まであと数十センチの距離まで接近したことが有ります。この時相手に「直進車優先だろ〜」（道路交通法37条）と文句を言う気持ちなんて起きなくて、「お〜、きれいにスキッドが決まった〜」と妙に冷静でした:sweat_smile:&lt;br /&gt;
　スキッドは急ブレーキの代わりにはなりませんが、急ブレーキかけた時は自然とミッドスキッド状態になるみたいです。&lt;/p&gt;

&lt;h3 id=&quot;ピストはダイエットにいいかも&quot;&gt;ピストはダイエットにいいかも&lt;/h3&gt;
&lt;p&gt;　まだ一日で最高で50Km程しか乗ったことがないのですが、その日は疲れました。ロードやミニベロ（IDIOM2）で50Kmなんて走ったうちには入らないぐらいに思っているのですが、ピスト（Stroll）だと疲れるので今の所50Kmまでにしようと思っています。50Km以上遠出をするつもりならミニベロ使おうと思っていますが、ピストは乗っているだけで楽しいので、最近はミニペロは放ったらかしでピストで近場ばかり乗り回しています。&lt;br /&gt;
　巷では「自転車ダイエット」って標語を見かけますが、運動効率の非常に高い乗り物である自転車をダイエット目的で使うなんておかしいと思っていました。でも、ピストなら長距離乗らなくても結構疲れるのでダイエットに効くのではないかと思っています。長距離乗ればかなり疲れますし、スキッドの練習やスタンディングの練習をしているだけでも意外と疲れます。&lt;/p&gt;

&lt;h3 id=&quot;縁石に注意&quot;&gt;縁石に注意&lt;/h3&gt;
&lt;p&gt;　フリーギアなら車道と歩道の間にある縁石を避けるために左側のペダルを上にした状態で車道側の車と縁石の間を惰性で進んでいくということがあると思いますが、ピストではペダルは常に回っているので左側のペダルを上にしたままでは進めないことが分かっていても、つい車幅感覚を見誤って縁石にペダルを何回か擦りました。その時はズズッと車体がズレる程度で済みましたが、右側の停車中の車にぶつかりそうになったことも有ります。&lt;br /&gt;
　車道左側が狭い時は無理に車道を走らずにすぐに歩道を走るようになりました。ロードバイク乗っている時は「ロードバイクで歩道を走るのは負け」みたいな意識があったのですが、なんかピストではそれほどスピードを出さないこともあって歩道を走ることが増えました。&lt;/p&gt;

&lt;h3 id=&quot;ストラップは付けたほうがいい&quot;&gt;ストラップは付けたほうがいい&lt;/h3&gt;
&lt;p&gt;　ペダルを後ろに踏んで減速することが出来ます。&lt;a href=&quot;/miscellaneous/2024-03-16/stroll02&quot;&gt;以前の記事&lt;/a&gt;にも書きましたが、下り坂で一度ペダルから足が離れるとペダルだけグルグル回ってフリーギアのようにすぐにはペダルに足を戻すことが出来ません。スキッドもそうですが、ストラップを付けているとブレーキを使わずに速度をコントロールできます。&lt;br /&gt;
　でも、歩道を歩行者の速度に合わせてポタポタと走っている時は敢えてストラップから足を外すときも多いです。すぐに地面に足が着けれるようにするためです。歩行者の不意の動きに対応してブレーキかけてすぐに足をストラップから抜いて着地することも出来ますが、ストラップから足を抜くのに失敗して一度コケてしまいました。それ以来、人が多い歩道では敢えてストラップから足を外してます（主に片足だけ）。そのおかげで走りながらストラップを嵌めるのにも慣れてきました。&lt;br /&gt;
　ストラップから足を抜いてストラップがペダルの下側にある状態だと、ストラップが地面に軽く擦るのですがこれは仕方ないのでしょう。&lt;/p&gt;

&lt;h3 id=&quot;山は登れない&quot;&gt;山は登れない&lt;/h3&gt;
&lt;p&gt;　自転車で山を登るのは結構好きなのですが、現在のStrollでは山に登るどころかちょっとした高地に行くだけでもうお腹いっぱいって感じで、山に登る手前（大阪で言えば箕面近辺）までしか行く気がしません。山も登ってみるつもりで自転車購入時に軽めのコグ（17T）を選んだのですが、このギアではちょっと無理そうです。いずれ今の反対側についているフリーギアも山登り用の固定ギア（Strollは19Tまでしか選べない？）にして、山の頂上に行ったところで後輪を反転させて平地用のコグに切り替えて降りてこようかなんて考えていますが、ちょっと面倒くさいですね。&lt;/p&gt;

&lt;h3 id=&quot;下りのカーブが怖い&quot;&gt;下りのカーブが怖い&lt;/h3&gt;
&lt;p&gt;　フリーギアならカーブの外側のペダルを下にして外足に荷重をかけてカーブを曲がれば内側のペダルを地面に擦る心配はありませんが、ピストバイクだと常にペダルが回るのでカーブの内側のペダルを地面に擦らないかいつも心配です。昔、250ccのオートバイに乗っていたことがあるのですが、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;リーンイン&lt;/code&gt;と言われる姿勢でカーブを曲がることがあります。オートバイの場合は主にタイヤのグリップ力を上げるために&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;リーンイン&lt;/code&gt;の姿勢を取るのだと思うのですが、ピストバイクの場合はペダルを地面に擦らないようにするために自転車をなるべく傾けないように気をつけながらカーブを曲がっています。ペダルを地面に擦らないかヒヤヒヤしながらカーブを曲がるので自然とスピードも落ちます。やはり&lt;a href=&quot;/miscellaneous/2024-03-10/stroll01&quot;&gt;以前の記事&lt;/a&gt;で紹介した動画のように下りカーブはスキッドを駆使して曲がるのが本来の曲がり方なのでしょうか？無茶苦茶難しいですよね:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stroll_inclination.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stroll_inclination.png&quot; alt=&quot;Stroll ペダルを擦る角度&quot; width=&quot;320&quot; height=&quot;389&quot; title=&quot;Stroll ペダルを擦る角度&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　上の写真はスタンドを使わずにペダルを地面に接地させてペダルだけでStrollを自立させている状態です。カーブで車体をこれだけ傾けるだけでペダルを擦るってことです。&lt;br /&gt;
　&lt;a href=&quot;https://www.fujibikes.jp/2020/products/stroll/&quot;&gt;ここ&lt;/a&gt;でStrollのジオメトリーを確認したところ、フレームサイズに関わらずクランク長は170mmのようですが、ちょっと長いんじゃないでしょうか？昔乗っていたARAYAの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Raleigh CRF&lt;/code&gt;というロードバイクは470mmのフレームサイズだけ165mmのクランク長で他のフレームサイズは170mmでした。一般的にピストバイクはクランク長が短めになっていると聞いたので、ロードバイク（CRF）よりクランクが長いってのがちょっと気になっていて、いつか160mmのクランクに変えようかと思っています。170mmから160mmに変えてもわずか1cmの違いなので、違いを感じるのかどうか分かりませんが、カーブでペダルを擦りにくくする気休めにはなるでしょう。それにストラップを足から外してもストラップが地面を擦ることはなくなるかもしれません。&lt;br /&gt;
　自転車って凝りだすとこうやって少しずつお金がかかるんですよねぇ:sweat_smile:&lt;/p&gt;

&lt;h3 id=&quot;安定した立ち漕ぎが必要&quot;&gt;安定した立ち漕ぎが必要&lt;/h3&gt;
&lt;p&gt;　歩道に乗り上げる時やちょっとした段差を超える時に衝撃を緩和するためにお尻をサドルから浮かせると思いますが、フリーギアの場合は両足を水平にして惰性で通過するだけなので簡単です。でも、ピストの場合は&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;お尻を浮かせる＝立ち漕ぎ状態&lt;/code&gt;でペダルを漕いだまま段差を通過します。お尻を浮かせる時にペダルを踏み込む感じになるので、別に加速したいわけじゃないのにペダルを踏みこんで段差を超えることに初めはすごく違和感が有りました。下り坂なんかでもそうですが、フリーギアならペダルを漕ぐのを止めて車体を安定させることに専念できるのに対して、固定ギア（ピスト）だと常にペダルを回しながら車体を安定させる必要が有ります。道路に段差があったりすると下り坂でスピードが乗ってる状態で立ち漕ぎしながら車体を安定させる必要がありますし、フリーギアのママチャリしか経験のない人は普通下り坂ではペダルを漕がない（自分はロードバイクで多少は経験してます）ですから、固定ギア（ピスト）を一度体験してすぐに嫌になる人っていうのは、この頻繁に立ち漕ぎを要求されるって辺りにも原因があるんじゃないかと思ってます。&lt;br /&gt;
　固定ギア（ピスト）に乗ることを&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;人馬一体になる&lt;/code&gt;と表現する人がいますが、この立ち漕ぎ状態に慣れるっていうのがピストに求められるスキルの一つじゃないかと思います。乗馬経験はないのですが、もしかしたら&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;ruby&gt;鐙&lt;rt&gt;あぶみ&lt;/rt&gt;&lt;/ruby&gt;で体重を支える＝サドルを使わずにペダルで体重を支える＝立ち漕ぎ状態&lt;/code&gt;っていう意味もあるかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;まとめ&quot;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;　フリーギアのロードバイク（今はロードバイクは持っていないのでIDIOM2がロードバイク代わりです）に比べたら、疲れる、危ない、遅いって感じですが、それでも今はピストに乗っていたいって感じです。フリーギアに比べて不便だと思う反面、ピストは乗りこなすための乗車スキルが必要になるので、上達して行く過程を楽しむっていう面があると思います。向上心を刺激するんですね。だから自転車の実用的な利点しか興味がない人にとっては、ピストバイクは必要ないものだと思います。&lt;br /&gt;
　フリーギアの自転車をオートマチックの自動車に、ピストをマニュアル操作の自動車に例える人もいますが、自動車の運転より奥が深そうです。自動車の運転（クラッチ操作等）なんてすぐに慣れてしまって、運転するだけで楽しめる時期っていうのはすぐに過ぎ去ってしまいますが、ピストはもっと長く楽しめそうです。&lt;/p&gt;

&lt;h3 id=&quot;gpsロガー&quot;&gt;GPSロガー&lt;/h3&gt;
&lt;p&gt;　Strollは買い物にも使う街乗り用として購入したので、サイクルコンピュータの類は装着していません。その日何キロ走ったかはGPSロガーを使って後から算出しています。遠出をするときに&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/3c6386a3.9259d73b.3c6386a4.c055db8a/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fomatsuri-life2%2Fb001lgik5o%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;HOLUXのm-241&lt;/a&gt;や&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/3c638c6f.8006b164.3c638c70.c2ee318b/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fseven-eight%2F10004723%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;CANMOREのGT-730FL-BK&lt;/a&gt;をバッグの中に入れて、帰宅後ログファイルを&lt;a href=&quot;https://gist.github.com/dtan4/5743825&quot;&gt;こちらのスクリプト&lt;/a&gt;を使って読み込み、その日のおおよその移動距離を測っています。&lt;a href=&quot;https://www.google.co.jp/intl/ja/earth/about/&quot;&gt;Google-Earth&lt;/a&gt;を使ってログファイルを読み込めば、後から辿った経路を眺めてニヤニヤ出来ますし、高度プロファイルも表示すれば辿った経路の高低差も表示されます。箕面市近辺って標高100m程なんですね。わずか標高100mで疲れるのは情けない:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/google-earth1.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/google-earth1.png&quot; alt=&quot;高度プロファイル&quot; width=&quot;320&quot; height=&quot;83&quot; title=&quot;高度プロファイル&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　私の場合、ロードバイクやミニベロ（IDIOM2）のログと比較すると、ピストでの平均速度や最高速度はかなり遅くなります。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 19 May 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2024-05-19/stroll03</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2024-05-19/stroll03</guid>
        
        <category>bicycle</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>広告収益の不明瞭さが気になる</title>
        <description>&lt;h3 id=&quot;広告ビジネスへの不信感&quot;&gt;広告ビジネスへの不信感&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/miscellaneous/2024-05-04/app_private&quot;&gt;前回の記事&lt;/a&gt;で「無料アプリで広告を出すより、安価な有料アプリにすべきだった」と書きました。有料アプリで公開したほうが、「無料でアプリを使っているにも関わらず批判ばかりする所謂アンチ勢力を避けることが出来る」なんて意見も耳にしますが、自分としてはアンチを避けるためというような理由ではなく、５年程度やってみたから分かったことですが広告表示で収益を上げるというビジネスモデル自体がいろいろ不明瞭な点が多く納得できないからというのが理由です。有料アプリであればアプリを購入した人が確実に存在するので分かりやすいですが、アプリ広告が何回見られたかとか広告が何回クリックされたかとか本当のところは開発者には分からないので、Youtubeなんかも同じですが、そういう不明瞭な評価が自分にとって納得しづらいという理由で有料アプリにした方がよかったなぁと思っています。&lt;br /&gt;
　どう感じるかはこの記事を読む人次第ですが、自分が体験した不思議な事象をいくつか書いてみます。&lt;/p&gt;

&lt;h3 id=&quot;ダウンロード数が増えない不思議&quot;&gt;ダウンロード数が増えない不思議&lt;/h3&gt;
&lt;p&gt;　この記事を書く切っ掛けにもなったのですが、最近当ブログに流入する検索ワードの順位が大幅に変わりました。&lt;a href=&quot;/software/2023-11-07/karah_problem&quot;&gt;以前の記事&lt;/a&gt;に書いたように当ブログに流入してくる検索ワードは圧倒的に「マンカラ」関係が多かったのですが、最近「消える まるばつ」がトップになりました。&lt;/p&gt;

&lt;div style=&quot;width:330px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/site_ranking0.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/site_ranking0.png&quot; alt=&quot;検索ワードランキング&quot; width=&quot;330&quot; height=&quot;336&quot; title=&quot;検索ワードランキング&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　iOSアプリで&lt;a href=&quot;https://apps.apple.com/pl/app/%E3%82%B5%E3%83%89%E3%83%B3%E3%83%87%E3%82%B9%E3%81%BE%E3%82%8B%E3%81%B0%E3%81%A4%E3%82%B2%E3%83%BC%E3%83%A0/id6448230478&quot;&gt;「サドンデスまるばつ」&lt;/a&gt;というアプリがリリースされたのが原因のようで、それに伴って以前公開していた&lt;a href=&quot;https://happyclam.github.io/project/2017-07-11/tictactoe-van&quot;&gt;「消える三目並べ」というアプリの記事&lt;/a&gt;へのアクセスが急上昇したようです。&lt;/p&gt;

&lt;div style=&quot;width:570px; margin: 0 auto;&quot;&gt;
&lt;div style=&quot;float:left; margin: 0px 20px 0px;&quot;&gt;
&lt;a href=&quot;/images/site_ranking1.png&quot;&gt;&lt;img width=&quot;216&quot; height=&quot;504&quot; src=&quot;https://happyclam.github.io/images/site_ranking1.png&quot; alt=&quot;先月のランキング&quot; title=&quot;先月のランキング&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/images/site_ranking2.png&quot;&gt;&lt;img width=&quot;216&quot; height=&quot;504&quot; src=&quot;https://happyclam.github.io/images/site_ranking2.png&quot; alt=&quot;今月のランキング&quot; title=&quot;今月のランキング&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;　上の画像は先月と今月の当ブログへの検索流入ワードランキングです。以前の自分なら「よし、この波に乗って『消える三目並べ』アプリをリニューアルしてみるか！」なんて考えたかもしれませんが、アプリの記事へのアクセスが必ずしもアプリのダウンロードには繋がらないことを経験しているので静観しているところです。&lt;br /&gt;
　と言うのも、下の画像が&lt;a href=&quot;https://happyclam.booth.pm/items/6325341&quot;&gt;マンカラアプリ&lt;/a&gt;のアクティブユーザー数の推移のグラフですが、最高で２０人ぐらいで推移していて、当ブログで最も参照されている記事で紹介しているアプリにも関わらず、ほぼ最もアクティブユーザー数が少ないアプリになってしまっています。「検索で辿り着いた人がわざわざアプリをダウンロードしないよ」という意見もあると思いますが、関心を持って辿り着いた記事で紹介しているアプリなら「一度ダウンロードして試してみようか」とならないですかねぇ:thinking:それに、いきなり急上昇した「消える三目並べ」と違って、マンカラの記事はもう何年も当ブログでトップのアクセス数なので増えていってもいいと思うのですが不思議です:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:360px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/mancala_graph.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/mancala_graph.png&quot; alt=&quot;マンカラアプリ アクティブユーザー数&quot; width=&quot;360&quot; height=&quot;493&quot; title=&quot;マンカラアプリ アクティブユーザー数&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　&lt;a href=&quot;https://happyclam.booth.pm/items/6325341&quot;&gt;マンカラアプリ&lt;/a&gt;は５段階評価で５の評価を２つ貰っていますが、レビューコメントが無いのでGoogle Play上では表示されていません。自分がマンカラというゲームを初めて知った時は何種類もマンカラアプリをダウンロードしまくったのでなんか納得できないんですよねぇ:sob:&lt;/p&gt;

&lt;h3 id=&quot;ユーザー数が急上昇して急降下する不思議&quot;&gt;ユーザー数が急上昇して急降下する不思議&lt;/h3&gt;
&lt;p&gt;　今度は自分のアプリの中でもっともアクティブユーザー数が多い&lt;a href=&quot;https://happyclam.booth.pm/items/6325376&quot;&gt;５五将棋アプリ&lt;/a&gt;のアクティブユーザー数の推移です。自分のアプリの中の稼ぎ頭です:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:360px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/55shogi_graph.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/55shogi_graph.png&quot; alt=&quot;５五将棋アプリ アクティブユーザー数&quot; width=&quot;360&quot; height=&quot;477&quot; title=&quot;５五将棋アプリ アクティブユーザー数&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　たしかリリースして数カ月後のことだったと思いますが、いきなりユーザー数が急上昇してその後何かの間違いだったかのように急降下して、未だにその時のユーザー数を超えていません。この時、アプリ広告は既に付けていましたが広告収入の急上昇はありませんでした。さっぱり原因はわかりません。不思議だと思いませんか？:sweat_smile:&lt;/p&gt;

&lt;h3 id=&quot;広告収入が急上昇して急降下する不思議&quot;&gt;広告収入が急上昇して急降下する不思議&lt;/h3&gt;
&lt;p&gt;　今度は&lt;a href=&quot;/miscellaneous/2024-05-04/app_private&quot;&gt;前回の記事&lt;/a&gt;で事情を説明したように、現在非公開になっている&lt;ruby&gt;禽将棋&lt;rt&gt;とりしょうぎ&lt;/rt&gt;&lt;/ruby&gt;アプリに関するグラフです。&lt;/p&gt;

&lt;div style=&quot;width:360px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/torishogi_graph.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/torishogi_graph.png&quot; alt=&quot;禽将棋アプリ アクティブユーザー数&quot; width=&quot;360&quot; height=&quot;477&quot; title=&quot;禽将棋アプリ アクティブユーザー数&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/torishogi_graph2.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/torishogi_graph2.png&quot; alt=&quot;禽将棋アプリ 広告収入&quot; width=&quot;480&quot; height=&quot;386&quot; title=&quot;禽将棋アプリ 広告収入&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　&lt;a href=&quot;https://happyclam.booth.pm/items/6325376&quot;&gt;５五将棋アプリ&lt;/a&gt;のケースと違って、アプリのダウンロード数は増えてないのにリリースしてすぐに一日だけ広告収入だけが急上昇しました。ダウンロード数が全然増えていないのに一日600円も広告収入を貰えて、その後はグラフの通り僅かな収益で推移していました。これは極少数のユーザーが一日だけハードに使いまくった可能性はあり得ますが、当時はインタースティシャル広告を付けておらずバナー広告だけだったし、バナー広告だけで一日600円って、ユーザー数も数人だったのでこれも不思議なんですよねぇ:sweat_smile:&lt;/p&gt;

&lt;h3 id=&quot;実態の分からない広告収益&quot;&gt;実態の分からない広告収益&lt;/h3&gt;
&lt;p&gt;　以上、見てきたように広告収入なんてかなりいい加減なものだと思っています。極一部のユーザーによる恣意的な操作も出来るでしょうし、それをやっているのがgoogleならマッチポンプで問題だと思いますが、アプリの宣伝のためにgoogleにコストを支払ってランキング上位に表示させてダウンロード数を増やすことには別に問題はありません。疑問があればもしかしたらgoogle側に情報公開を請求できるのかもしれませんが、その情報自体の真贋も自分自身では確かめようがないのでやろうとは思いません。&lt;br /&gt;
　ということで、広告収入を当てにして無料アプリとして公開するのではなく、有料アプリとしてに公開する方が何かと納得できるのではないかという体験者からの一つの見解でした。&lt;br /&gt;
　&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 12 May 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2024-05-12/app_advertising</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2024-05-12/app_advertising</guid>
        
        <category>cordova</category>
        
        <category>android</category>
        
        <category>coffeescript</category>
        
        <category>flutter</category>
        
        <category>google</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>アプリを非公開にする理由</title>
        <description>&lt;h3 id=&quot;広告停止されてても来る警告メール&quot;&gt;広告停止されてても来る警告メール&lt;/h3&gt;
&lt;p&gt;　2023年のgoogleの新しい規制（「2023年8月31日までにAndroid 13に対応していないアプリの更新を停止」）のため、対応が面倒なので自分で非公開にしたアプリも有りますが、それとは別に非公開にはしてないけど、一年ほど前からAdMobの広告表示が停止されているアプリも３つ（&lt;a href=&quot;https://play.google.com/store/apps/details?id=torishogi.io.github.happyclam&quot;&gt;禽将棋アプリ&lt;/a&gt;、&lt;a href=&quot;https://happyclam.booth.pm/items/6323599&quot;&gt;３三将棋アプリ&lt;/a&gt;、&lt;a href=&quot;https://happyclam.booth.pm/items/6346070&quot;&gt;７七将棋アプリ&lt;/a&gt;）あって、何度も警告メールが来るのでアプリを非公開にすることにしました。既に広告停止されてるのでAdMobには関係ないと思うのですが、そうはいかないようです。&lt;br /&gt;
　この記事を読んでいる方の中にも、前述の３つのアプリを使っていて広告が表示されなくなったことに気づいていた人はいると思います。ユーザーから見れば「広告停止されて収益にならないから非公開にしたのだろう」と思う人もいると思うので、そうではないことを書いておこうと思います。&lt;/p&gt;

&lt;h3 id=&quot;admobからのメールの内容&quot;&gt;AdMobからのメールの内容&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;問題の概要
アプリ ID: torishogi.io.github.happyclam
必要なご対応: アプリに変更を加えてポリシー違反を解消された場合、あるいは違反判定が誤りと思われる場合は、AdMob ポリシー センターにアクセスして違反を確認し、再審査のリクエストを行ってください。
同様の事態が再発することを避けるため、他のアプリケーションについても AdMob プログラム ポリシーの遵守状況を確認することをおすすめいたします。また、Google AdMob チームは、違反が繰り返される場合にいつでもアカウントを無効化できる権利を有している点に注意してください。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　上記は&lt;ruby&gt;禽将棋&lt;rt&gt;とりしょうぎ&lt;/rt&gt;&lt;/ruby&gt;アプリに対する文面ですが、禽将棋アプリはもう数年前から更新していなくてその当時は問題なかったのに一年ほど前からAdMobのポリシーが変更になったようで&lt;strong&gt;ポリシー違反&lt;/strong&gt;として広告が表示されなくなっていました。広告が表示されないのでこちらにはお金は一銭も入ってこないのですが、広告無しの方がユーザーは喜ぶだろうし、アプリを使いたい人もいるだろうと思い放置していた訳です。&lt;/p&gt;

&lt;h3 id=&quot;とにかく時間と手間を取られる&quot;&gt;とにかく時間と手間を取られる&lt;/h3&gt;
&lt;p&gt;　こちらとしては「広告停止にしたんだからそれでいいんじゃないの？」とAdMobに言いたいのですが、「Google AdMob チームは、違反が繰り返される場合にいつでもアカウントを無効化できる権利を有している点に注意してください」という脅し文句が気になるところです。googleのアカウントが停止されるとgmailも使えなくなるし色々面倒なので対処することにしました。&lt;br /&gt;
　AdMob側に確認したいのですが、問い合わせのリンクを辿っても途中でエラーが出て問い合わせできません。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/admob_inquiry.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/admob_inquiry.png&quot; alt=&quot;AdMob問い合わせ画面&quot; width=&quot;320&quot; height=&quot;240&quot; title=&quot;AdMob問い合わせ画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　そこで取り敢えず&lt;a href=&quot;https://play.google.com/store/apps/details?id=torishogi.io.github.happyclam&quot;&gt;禽将棋アプリ&lt;/a&gt;の広告ユニットを削除してgoogle-consoleで非公開設定にし、&lt;a href=&quot;https://happyclam.booth.pm/items/6323599&quot;&gt;３三将棋アプリ&lt;/a&gt;をgoogle-consoleで非公開設定にしてAdMobに審査を出したところ、&lt;a href=&quot;https://play.google.com/store/apps/details?id=torishogi.io.github.happyclam&quot;&gt;禽将棋アプリ&lt;/a&gt;だけ警告が消えました。どうやら広告ユニットを削除すればよかったようです。それが分かったので&lt;a href=&quot;https://happyclam.booth.pm/items/6323599&quot;&gt;３三将棋アプリ&lt;/a&gt;を再度公開しようとすると、今度はgoogle側の前述の規制に引っかかって再公開は出来なくなりました。&lt;a href=&quot;https://happyclam.booth.pm/items/6346070&quot;&gt;７七将棋アプリ&lt;/a&gt;に関しては広告ユニットだけを削除して公開状態を維持しています。&lt;br /&gt;
　Amazonで公開している&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;も似たような状況でどう対応したらいいのかよく分からず更新したくても出来ない状況です。とにかく時間と手間を取られるんですよねぇ。大昔にAppleにもお金払ってアプリを公開した経験もありますが、Appleの要求に答える運用コストに嫌気が差して一年で止めた経験も有ります。&lt;/p&gt;

&lt;h3 id=&quot;広告に金を掛けないアプリを排除したい&quot;&gt;広告に金を掛けないアプリを排除したい？&lt;/h3&gt;
&lt;p&gt;　前回の記事で書いたように、&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;に関してはgoogleが一方的に削除したのですが、そんなことばかりしていると開発者からの反発もあるので、開発者自らが非公開にするように持っていこうという意志をひしひしと感じます。自分はお金を払ってアプリの宣伝とかはしていないので、おそらく広告宣伝業で金儲けしているgoogleとしては気に入らないでしょう。よく有料の「google広告」へのお誘いメールが来ますが、自分が「google広告」のユーザーだったら対応も変わってくるのでしょうか？:sweat_smile:GooglePlayのサイトでアプリが検索上位に来るようにしたければ、ユーザーに支持されるアプリかどうかとは関係なく広告宣伝費をかけなければならないシステムになっているのは事実なので、そのような勘繰りをされても仕方ないでしょう。&lt;br /&gt;
　それにしてもgoogle広告を使って収益を上げることに成功した話も聞きますが、googleに支払う費用もバカにならないので結局利益は上がっていないというような話も聞きます。個人アプリ開発者の本音を聞いてみたいところです。googleとしてはいろいろな規制を設けるのはあくまでも「ユーザーのため」という建前で通しているようです。今回の件にしても広告ユニットを削除しただけで問題はなくなったのだから、無料アプリだからとか広告に金をかけないから冷遇しているわけではないとは言えそうです（規制の変更のたびに開発者は手間と時間を取られますが…）。自分からすれば「なかなか尻尾を出しやがらないなぁ」って感じですけど:sweat_smile:それに&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;チェスアプリ&lt;/a&gt;の削除に関しては今でも納得していませんけど…。&lt;/p&gt;

&lt;h3 id=&quot;有料アプリとして公開すべきだった&quot;&gt;有料アプリとして公開すべきだった？&lt;/h3&gt;
&lt;p&gt;　今にして思えば、たとえ僅かな料金（100円とか）であっても有料にして広告表示無しにすべきだったかなぁとも思うのですが、どちらが良かったかは分かりません。ただ、現状ではGooglePlayの規約で、既に無料アプリとして公開されているアプリを有料に変更することは出来ないようなので、有料アプリにしたければ新規アプリとして作成しなければなりません。でも、&lt;a href=&quot;https://forest.watch.impress.co.jp/docs/serial/yajiuma/1546061.html&quot;&gt;前回の記事でも紹介したニュース&lt;/a&gt;のように個人が新規でGooglePlayアプリを公開するのは非常にハードルが高そうです。なので、それだけが理由ではありません（開発も大変だし…）が、当ブログで５五将棋アプリの思考ルーチンをC++で書き直していつかリリースしたいと書いてました（有料にしたかった）が諦めることにしました。&lt;a href=&quot;https://forest.watch.impress.co.jp/docs/serial/yajiuma/1546061.html&quot;&gt;あのニュース&lt;/a&gt;でアプリ公開を諦めた個人開発者は多いのではないでしょうか:cry:Android自体はOSSなのだからgoogle以外の配信プラットフォームが出てきてもよさそうな気もしますが、現実には出てこないでしょうね。&lt;br /&gt;
　結果的に非公開になった&lt;a href=&quot;https://happyclam.booth.pm/items/6323599&quot;&gt;３三将棋アプリ&lt;/a&gt;は近いうちにPWAとして公開するかもしれません。&lt;a href=&quot;https://play.google.com/store/apps/details?id=torishogi.io.github.happyclam&quot;&gt;禽将棋アプリ&lt;/a&gt;に関しては自分のアプリよりAIの出来がいい&lt;a href=&quot;https://www.pychess.org/variants/torishogi&quot;&gt;代替サイト&lt;/a&gt;が既に存在するので、非公開のまま放置しようと思っています。&lt;br /&gt;
　以上、今回はアプリユーザーと当ブログへ寄付してくださった方への現状報告でした。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 04 May 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2024-05-04/app_private</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2024-05-04/app_private</guid>
        
        <category>cordova</category>
        
        <category>android</category>
        
        <category>coffeescript</category>
        
        <category>google</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
      <item>
        <title>チェスAIとテスト駆動開発</title>
        <description>&lt;h3 id=&quot;ステイルメイトという特殊なルール&quot;&gt;ステイルメイトという特殊なルール&lt;/h3&gt;
&lt;p&gt;　以前の記事（&lt;a href=&quot;/software/2019-10-27/stalemate&quot;&gt;「将棋の評価関数とチェスの評価関数-1」&lt;/a&gt;、&lt;a href=&quot;/software/2019-11-02/stalemate2&quot;&gt;「将棋の評価関数とチェスの評価関数-2」&lt;/a&gt;、&lt;a href=&quot;/software/2019-11-09/stalemate3&quot;&gt;「将棋の評価関数とチェスの評価関数-3」&lt;/a&gt;）で自作の将棋AIをチェスAIに書き換える作業をしようとして、チェスのステイルメイトという特殊なルールに対応するために将棋AIを書き換える必要が出てきたことを書きましたが、分かりづらかったと思うので実際の開発の過程でどういう作業が必要になったか、辿った経緯をもう少し詳しく書こうと思います。&lt;br /&gt;
　そしてこの開発を通じて、テスト駆動開発という開発手法の有用性を身を以て感じたということを書いてみます。&lt;/p&gt;

&lt;h3 id=&quot;２種類の詰み判定ゲーム終了判定メソッド&quot;&gt;２種類の詰み判定（ゲーム終了判定）メソッド&lt;/h3&gt;
&lt;p&gt;　詰み判定（ゲーム終了判定）のやり方が２通りあって、チェスのステイルメイトのルールに対応するにはやり方を変えなければならなかったということは&lt;a href=&quot;/software/2019-10-27/stalemate&quot;&gt;以前の記事&lt;/a&gt;に書いたとおりですが、なぜ「相手玉を取ったらゲーム終了」という将棋では問題がなかった方法を、チェスだと変える必要が出てきたのでしょうか。&lt;br /&gt;
　ゲームの局面（ゲーム木）を辿っていって（先読みしていって）、先手が着手したAという局面に行き着いたとします。その局面から後手の手番でまたB1、B2、B3…と幾つもの局面が枝分かれしていくわけですが、その後手の着手したBの全ての局面でもう一手先のCの局面で相手玉（後手玉）を取ることが出来ることが分かって初めて評価値が最大値（先手勝ち）になる訳ですが、この相手玉を取ることが出来ると判明したCの局面の中には後手が非合法手を着手したケースも混じっているわけです。非合法手というのは角の効き筋を止めていた味方の駒を動かしたケース（王手放置）や、後手玉が先手の駒の効いている場所に動いたケース（自爆）です。将棋なら合法手であっても非合法手であっても、後手玉を取ってしまえばいいのでCの局面で先手勝ちの評価は変わりません。しかし、チェスの場合はBの局面で非合法手しか着手できなかった場合は引き分け（ステイルメイト）と判定しなければなりません。将棋では局面Bで選んだ後手の手が合法手だろうが非合法手だろうが、Cの局面で先手が玉を取れれば先手勝ちと判断出来るのに対して、チェスの場合はBの局面で非合法手しかない場合はステイルメイト、合法手と非合法手が混じっている場合（＝合法手は存在するけど後手玉が取られる）は先手の勝ちと場合分けする必要があるということです。つまり、局面Bから先読みして後手玉が取れるから先手勝ちと判断することは出来ないので、一手先読みするのではなく局面Bの段階で手番と駒の効きの情報を使って後手に非合法手しか存在しない（ステイルメイト）かどうかを判断する必要があります。と言うことでチェスではプログラムを書き換える必要がありました。&lt;br /&gt;
　将棋の場合は「相手玉を取ったらゲーム終了」とするやり方と「手番と局面情報からゲーム終了判定する」やり方、どちらのやり方を採用しても対応できるので、将棋のソースコードを使って比較してみます。&lt;br /&gt;
　現在&lt;a href=&quot;https://github.com/happyclam/shogi33simple&quot;&gt;github&lt;/a&gt;に公開している３三将棋（簡易版）の詰み判定メソッド(check_tumiメソッド)は以下のようになっています。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    check_tumi = (board) -&amp;gt;
        first = 0; second = 0
        kings = (v for v in board.pieces when v.kind() == &apos;Ou&apos; &amp;amp;&amp;amp; v.turn == Const.FIRST)
        switch kings.length
            when 2
                return Const.MAX_VALUE
            when 0
                return Const.MIN_VALUE
            else
                for v in board.pieces
                    first += v.omomi() if v.turn == Const.FIRST
                    second += v.omomi() if v.turn == Const.SECOND
                return (first - second)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　先手の玉が２枚あれば先手が勝ちの評価値、０枚なら後手の勝ちの評価値を返して、それ以外は局面の静的評価値を返してゲームを続行します。&lt;br /&gt;
　つまり玉が取られたかどうかでゲームの終了判定をしています。&lt;br /&gt;
　一方で３三将棋を除く将棋関連アプリとチェスアプリでは以下のようになっています。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    check_tumi: (turn, utifudume_flg = null) -&amp;gt;
        #：
        #　前処理省略        
        #：        
        
        # 先手が王手掛かっていて指したのが先手なら後手勝ち
        if f_oute &amp;amp;&amp;amp; turn == Const.FIRST
            return [true, Const.MIN_VALUE]
        # 後手が王手掛かっていて指したのが後手なら先手勝ち
        else if s_oute &amp;amp;&amp;amp; turn == Const.SECOND
            return [true, Const.MAX_VALUE]
        # 先手玉が動けなくて王手が掛かっていたら後手勝ち
        else if f_canmove == false &amp;amp;&amp;amp; f_oute
            # 後手が王手放置していて指したのが後手なら先手勝ち
            if s_oute &amp;amp;&amp;amp; turn == Const.SECOND
                return [true, Const.MAX_VALUE]
            else if utifudume_flg
                return [true, Const.UTIFUDUME]
            else
                return [true, Const.CHECKMATE]
        # 後手玉が動けなくて王手が掛かっていたら先手勝ち
        else if s_canmove == false &amp;amp;&amp;amp; s_oute
            # 先手が王手放置していて指したのが先手なら後手勝ち
            if f_oute &amp;amp;&amp;amp; turn == Const.FIRST
                return [true, Const.MIN_VALUE]
            else if utifudume_flg
                return [true, Const.UTIFUDUME]
            else
                return [true, Const.CHECKMATE]
        # 上記条件に当てはまらなければ、ゲーム継続で評価値を返す
        for v in @pieces
            first += v.omomi() if v.turn == Const.FIRST
            second += v.omomi() if v.turn == Const.SECOND
        return [false, (first - second)]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;　チェスの場合はこのソースに加えてステイルメイトのケース（else if文）を追加しており、打ち歩詰めのif文はありません、でもその他の部分は将棋と同じです。&lt;br /&gt;
　現在の手番と局面の情報だけを使ってゲーム終了したかを判断し、ゲーム終了していなければ局面の静的評価値を返します。玉を取る一手前の局面でゲームの終了判定をしようとすると前述のソースとはかなり違ってくることが分かると思います。それにしても10個足らずの条件分岐（if文）で済んだのは予想外に少なかったなぁと思ってます。&lt;br /&gt;
　実際の開発の順番としては、まず将棋（３三将棋アプリ以外）の詰み判定（ゲーム終了判定）を書き換えてテストした後、それをチェスアプリに適応しました。なぜ３三将棋は変更しなかったかについては&lt;a href=&quot;/software/2019-11-09/stalemate3&quot;&gt;以前の記事&lt;/a&gt;で書いたように局面の評価より深く読むことに注力したかったからです。&lt;br /&gt;
　もうアプリをリリースしてから何年も経つので、このコード自体には問題（バグ）はないと思っています。ただ、ここにソースを載せていないステイルメイトの判定部分に関しては、まだちょっと不安があったりするのですが、それに関しては別の記事を書くかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;演繹法と帰納法&quot;&gt;演繹法と帰納法&lt;/h3&gt;
&lt;p&gt;　将棋というゲームが終了したかどうかを判断する場合、一番単純なやり方としては、頭金で詰んだケース、吊るし桂で詰んだケース等、詰みの形を一つ一つ定義して行き、それ以外はゲーム継続とするやり方を思いつきますが、そんなことをしていけばif文が幾つになるか見当もつかない程大変な作業を強いられます。とても人間が出来る作業ではないと思います。でも、機械学習型のAIの場合はその作業をやっているわけです。一つ一つの詰みのケースを学習して帰納的に法則性を見出してゲームが終了したかどうかを判断するわけです。&lt;br /&gt;
　では、自分は人間なんだからもっと演繹的にゲーム終了の条件を定義してみようと思って、上の10個足らずのif文からなるゲーム終了条件をパッと思いつく人がいるでしょうか？頭金や吊るし桂の詰み形をどんどん抽象化していき、頭の中だけでその条件文を構成できる人は少ないと思います。自分の場合もいきなり上で書いた10個足らずの条件文を思いついたわけではなく、一つ一つテストしていきながら条件を付け加えたり削除したりを繰り返しながら所謂スパイラルモデルで作り上げた感じです。決してウォーターフォールモデルのように上から下に流れ作業のように開発が進んだわけではありません。徐々に抽象度を上げていくという感じではなく、アイデアを出しては試していくの繰り返しという感じでした。将棋の世界に&lt;strong&gt;直感精読&lt;/strong&gt;という言葉がありますが、この言葉プログラミングにも通じると思います。論理的思考というのは&lt;strong&gt;精読&lt;/strong&gt;の部分に当たりますが、アイデアを出す&lt;strong&gt;直感&lt;/strong&gt;の部分が結構大事だと思っています。将棋では&lt;strong&gt;「見えないと読めない」&lt;/strong&gt;なんて言葉もありますよね。いくら局面を先に読んでいく力があっても、手が見えないと好手は指せません。&lt;/p&gt;

&lt;h3 id=&quot;プログラミングは設計行為&quot;&gt;プログラミングは設計行為&lt;/h3&gt;
&lt;p&gt;　TDD（テスト駆動開発）とはアジャイル開発における一つの開発手法とされていて、全開発工程の後半にテスト工程を設けるウォータフォールモデルとは全然違う代物です。まずテストを書いて実行し、リファクタリングしてまたテストの繰り返しです。ソフトウェア開発に於いて、巷ではいきなりコードを書き出す人を批判する人がいますが、コードを書きながら設計しているので極々自然な成り行きだと思います。業務に精通しているから設計書を書ける訳ではなく、将棋に精通しているからと言ってコンピュータへの指示書をいきなり書ける訳でもないのです。やってみなければ分からないという部分を、効率よく実装する手段としてTDDは非常に優れていると思います。誤解のないように付け加えておきますが、将棋のプログラムを作る際は、将棋に精通している人の方がそうじゃない人よりも効率良く作れるとは思っています。そういう人でも試行錯誤が必要だってことです。&lt;br /&gt;
　ただテスト駆動開発と言っても、先程の例で言えば、頭金の詰み判定のテストを書く、吊るし桂の詰み判定のテストを書くというのは設計行為とは言えないでしょう。これは所謂普通のテストであって、TDD（テスト駆動開発）とはもっと上流工程にテストを活用していくと言うことだと思います。メディアや情報誌に振り回されるのではなく、実体験としてアジャイル開発をやってみる人が増えることを望んでます。&lt;br /&gt;
　それとTDDは、効率よく設計・開発を進められるだけではなく、何か新しい機能を追加する際にも「以前は上手く動いていたのに、おかしくなった〜」という所謂デグレード（リグレッション）の防止にも書き溜めたテストが役立ちます。実際に将棋関連アプリを「相手玉を取ったらゲーム終了」というロジックで作っていたテストを、「手番と局面情報からゲーム終了判定する」ロジックに書き換えた後も、書き換える前に使っていたテストスクリプトをそのまま動作確認に使えました。&lt;br /&gt;
　&lt;a href=&quot;/project/2020-08-10/mancalanuts&quot;&gt;現在リリース中のマンカラアプリ&lt;/a&gt;は結構長い期間バグのあるバージョンがリリースされていたのですが、これはDartからC++に書き換える時にテストコードを省略したために起きたことです:sweat_smile:現在は&lt;a href=&quot;http://opencv.jp/googletestdocs/primer.html#primer-where-to-go&quot;&gt;GoogleTest&lt;/a&gt;を導入して、C++でもテストコードを書いているので今後は大丈夫だと思います:sweat_smile:&lt;/p&gt;

&lt;h3 id=&quot;スマホアプリについて&quot;&gt;スマホアプリについて&lt;/h3&gt;
&lt;p&gt;　もう何年も前の話ですが、&lt;a href=&quot;https://www.amazon.co.jp/dp/B082412BRQ/ref=sr_1_1?qid=1575089134&amp;amp;refinements=p_4%3Ahappyclam&amp;amp;s=mobile-apps&amp;amp;search-type=ss&amp;amp;sr=1-1&quot;&gt;現在Amazonで公開しているチェスアプリ&lt;/a&gt;は以前はGoogle Playにも公開していましたが、よく分からない理由でGoogleから削除されました。また、&lt;a href=&quot;https://happyclam.booth.pm/items/6346197&quot;&gt;現在Google Playで公開しているミニチェスアプリ&lt;/a&gt;は、これもよく分からない理由でAmazonの審査で落とされました。&lt;br /&gt;
　去年は&lt;a href=&quot;https://forest.watch.impress.co.jp/docs/serial/yajiuma/1546061.html&quot;&gt;こういうニュース&lt;/a&gt;もありましたし、AmazonもGoogleもAppleもアプリ公開のプラットフォーム利用に対する規制が数年前よりさらに強くなってきてる気がするので、全部PWA（Progressive Web Apps）化しようかなんて考えていますが、スマホアプリでさえそれほど多くの利用者がいるわけでもないのに、PWA化してもユーザーが増えることはないでしょう。&lt;br /&gt;
　でも自分のアプリの多くはJavaScript製なのでPWA化＝ソース公開にもなるのでニーズがあるかもしれませんし、PWA化すればスマホよりハイスペックなPCで動かせるのでソースを書き換えて読みの深さの数値を変えたりするとスマホより深く読めるようになったりします。もちろんユーザーがダウンロードして自分用に作り変えることも出来ます。自分でも少し試したりしたのですが、PWA化したらその辺りの話も書いてみようと思います。&lt;/p&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sun, 07 Apr 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/software/2024-04-07/tdd</link>
        <guid isPermaLink="true">https://happyclam.github.io/software/2024-04-07/tdd</guid>
        
        <category>coffeescript</category>
        
        <category>javascript</category>
        
        <category>shogi</category>
        
        <category>chess</category>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>Fuji Stroll、さっそくカスタマイズ</title>
        <description>&lt;h3 id=&quot;予定通りブルホーンに&quot;&gt;予定通りブルホーンに&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/miscellaneous/2024-03-10/stroll01&quot;&gt;前回の記事&lt;/a&gt;で固定ギアに初めて乗って転倒したことを書きましたが、家で自転車をよく見るとハンドルグリップが破けてハンドルバーが一部剥き出しになってました。いずれはブルホーンハンドルに交換するつもりだったのですが、丁度いい機会だから早速交換したのでその顛末を書きます。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
&lt;div style=&quot;float:left; margin: 0px 0px 0px&quot;&gt;
&lt;a href=&quot;/images/palm.png&quot;&gt;&lt;img width=&quot;120&quot; height=&quot;160&quot; src=&quot;https://happyclam.github.io/images/palm.png&quot; alt=&quot;擦り傷&quot; title=&quot;擦り傷&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div style=&quot;float:left; margin: 0px 5px 0px&quot;&gt;
&lt;a href=&quot;/images/glove.png&quot;&gt;&lt;img width=&quot;120&quot; height=&quot;160&quot; src=&quot;https://happyclam.github.io/images/glove.png&quot; alt=&quot;血が滲んだグローブ&quot; title=&quot;血が滲んだグローブ&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/images/bargrip.png&quot;&gt;&lt;img width=&quot;120&quot; height=&quot;160&quot; src=&quot;https://happyclam.github.io/images/bargrip.png&quot; alt=&quot;破れたハンドルバーグリップ&quot; title=&quot;破れたハンドルバーグリップ&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;left&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;自転車購入時に付けたもの&quot;&gt;自転車購入時に付けたもの&lt;/h3&gt;
&lt;p&gt;　FujiのStrollはペダルはデフォルトで付属していますので、あとは購入時にRITEWAYのキックスタンドとFuji製の固定ギア(17T)を付けてもらいました。Strollはチェーンステイ部分に最初からキックスタンド取り付け用の穴があいているので、それを利用しない手はないですね。固定ギア（コグ）の方はネジ切り式ではないようで、Amazonとかでコグを買って自分で交換するようなことは出来ない？みたいです。ロード用のスプロケット外す工具なんかとも少し違う工具が要るみたいだし、自分でメンテする気はなくなりました。&lt;br /&gt;
　コグの歯数は15Tから18Tまで選べるようですが軽めの17Tにしました。スキッドポイントが多い点でも奇数の17Tが良いみたいですが、軽めのギアでどれぐらい坂道を登れるのか、どれぐらいの山に登ることが出来るのかに興味があったので軽めにしたのですが、街なかにある歩道橋を登ってみた感じでは、とても山を登るなんて無理だなぁって感想です。でも、いつかは試してみると思います:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stroll_stand.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stroll_stand.png&quot; alt=&quot;RITEWAY キックスタンド&quot; width=&quot;240&quot; height=&quot;320&quot; title=&quot;キックスタンド&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;フラットバーが嫌なわけではないけど&quot;&gt;フラットバーが嫌なわけではないけど&lt;/h3&gt;
&lt;p&gt;　購入時はStrollに元から付いているフラットバーハンドルもカッコイイと思っていたのですが、京都で購入して大阪までフリーギアのまま乗って帰ってきた（約30km）時に、なぜか手のひらが痛くなりました。昔IDIOM2をフラットバーで乗っていた時も手のひらが痛くなった記憶があるので、もしかしたら肩幅より広く手を広げて前傾になるのは手のひら（人差し指の付け根辺り）への負荷が大きくなるんじゃないか？なんて思ってます。上の写真の手のひらを負傷した時も、どこかに打ち付けて負傷したのではなく、グローブとハンドルグリップのブツブツとの摩擦で擦りむけたのだと思います。なので買ったばかりの自転車ですが、480mmという長いフラットバーは止めて交換することにしました。&lt;br /&gt;
　購入したのは&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/3a3efda0.4effcd55.3a3efda1.db6e6e2e/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fspoke-seya%2Fpa-nitto-4582350836073%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;NITTOのRB-006(380mm)&lt;/a&gt;ショートブルホーンハンドルで、シンプルでわずかに両肩下がりなのが気に入りました。ロードもミニベロも380mm使ってたし、幅広のハンドルより自分には合ってそうで、大阪市内まで出かけてトータル50km程乗りましたが手は痛くならず快適でした。&lt;/p&gt;

&lt;h3 id=&quot;ブルホーンはトラック競技が発祥&quot;&gt;ブルホーンはトラック競技が発祥&lt;/h3&gt;
&lt;p&gt;　諸説あるようですが、ブルホーンハンドルはトラック競技から生まれたそうです。トラック内で使用される自転車は、誰かが急ブレーキを掛けたりすると危険なのでブレーキは付いていませんが、ブルホーンハンドルも本来ブレーキを使わない人達が使いだしたそうです。&lt;br /&gt;
　私は&lt;a href=&quot;/miscellaneous/2020-05-16/bicycle01&quot;&gt;以前の記事&lt;/a&gt;でブルホーンハンドルの角の部分を握りながらフルブレーキ出来るようにIDIOM2をカスタムしたことを書きましたが、そういう使い方のほうが邪道だったわけですね。街乗りに使うのならこのStrollも角の部分にブレーキを移動した方が使いやすいかもしれません（ブレーキレバーの交換が必要）が、とりあえずピスト仕様で今のままハンドルバー部分に置いて使おうと思います。そしてなるべくブレーキを使わなくて済むぐらいピストバイクを乗りこなせるようになれるのが理想です。でも実際街なかでピストに乗っている人によると、スキッドはブレーキの代わりにはならないしブレーキも頻繁に使うそうなのであくまでも理想ですね。&lt;br /&gt;
　あと、ブルホーンバーの角の部分を握っていたほうがスキッドもやり易いそうなので、主に河川敷の自転車道などの安全なところで練習しようと思ってます。&lt;/p&gt;

&lt;h3 id=&quot;スレッドステムはハンドル交換が面倒&quot;&gt;スレッドステムはハンドル交換が面倒&lt;/h3&gt;
&lt;p&gt;　「スレッドステム ハンドル 通らない」とかで検索すると苦労話がいろいろ出てきますが、ロード系のアヘッドステムと違ってスレッドステムの場合はハンドル径が合っていても取り付けできないハンドルがあるようです。事前にそのことを知っていたのでカーブが少なくてシンプルなハンドルを選んだのですが、それでも初めてのスレッドステムのハンドル交換は手間取りました。&lt;br /&gt;
　まずハンドルの中心部までステムに差し込みます。中心部（クランプ径25.4φ）は太くなっているのでハンドルを押し込んでもステムの穴に入りません。下の写真のようにマイナスドライバーをステムの開口部に差し込みながら、梃子の原理を使ってグイッとステムの穴を広げてハンドルを回しながら押し込んでいきます。この時ハンドルをグリグリと左右に回すのではなく、回しやすい方向がある（たまたま？）と思いますので一方向にグルグルと回転させながら差し込むようにするとゆっくり入っていきました。ハンドル中心部にギザギザの滑り止めの溝が切ってありますが、この溝は一方向に引っかかるようになっている？みたいで、グルグルと同じ方向に回して押し込むのがコツみたいです。私は最初グリグリと回す方向を変えながら押し込んだせいで写真のようにNITTOのロゴの周りに細かな傷が付いてしまいました。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
&lt;div style=&quot;float:left; margin: 0px 0px 0px&quot;&gt;
&lt;a href=&quot;/images/stem00.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/stem00.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div style=&quot;float:left; margin: 0px 5px 0px&quot;&gt;
&lt;a href=&quot;/images/stem01.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/stem01.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/images/stem02.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/stem02.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;left&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;やはりストラップも付けてみる&quot;&gt;やはりストラップも付けてみる&lt;/h3&gt;
&lt;p&gt;　ストラップ付ける気はなかったのですが長い下りを走っている時に、ブレーキを使わずに足の力で減速（エンジンブレーキみたいなものですね）してみようと思い足を踏ん張ろうとするのですが、ペダルの力に負けて全然出来ません。そして、ペダルが回る力に負けて足からペダルが外れて、片足が宙に浮いたままペダルがグルグルと回る状態になります。ブレーキがあるので減速してまたペダルに足を乗せることは出来るのですが、片足しかペダルに乗っていない状態ってのは非常に不安定で、その状態の時に道路に段差でもあれば転倒するかもしれません。これは危険だなぁと感じたのでこれからはストラップでペダルに足を固定することにしました。トリックをするためだけではなく、ピストに乗るときはペダルに足を固定していた方が安全なのかもしれません。ペダルストラップ使えば減速もやり易くなるでしょうし、様子見ながら慣れていこうと思います。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/strap.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/strap.png&quot; alt=&quot;Wellgo W-8 ストラップ&quot; width=&quot;320&quot; height=&quot;240&quot; title=&quot;Wellgo W-8 ストラップ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　通販でペダルストラップ（&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/3a9f3c76.2839d84a.3a9f3c77.bedae183/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fmcycle%2Ff4580131470645%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;Wellgoの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W-8&lt;/code&gt;&lt;/a&gt;）を購入したのですが、Strollに付いていたペダル（Wellgoの&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C128DJ&lt;/code&gt;）には付けられないようです。ストラップを通す穴が片側にしかありませんし、その穴も小さすぎてストラップが通りません:cry:自転車購入時に店の人に確認したときは「ストラップ付けられます」と返事をもらってたのですが、普通のママチャリ自転車屋さんだったのでよく分かってなかったのかもしれません。&lt;br /&gt;
　仕方がないので&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/3a9f3a95.dd7add01.3a9f3a96.316d307a/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fzitensyadepo%2Fmks-sylvan-gordito-sv%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MKS(三ヶ島製作所)SYLVAN Gordito&lt;/code&gt;&lt;/a&gt;と&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/1b4d49cd.6bbf085f.1b4d49ce.c5e66119/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Faris%2Fmks-spin-2%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MKS(三ヶ島製作所)蹴返しパーツ SPIN-2(スピン2)&lt;/code&gt;&lt;/a&gt;を購入して自分で付けました。&lt;/p&gt;

&lt;div style=&quot;width:480px; margin: 0 auto;&quot;&gt;
&lt;div style=&quot;float:left; margin: 0px 0px 0px&quot;&gt;
&lt;a href=&quot;/images/wellgo.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/wellgo.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div style=&quot;float:left; margin: 0px 5px 0px&quot;&gt;
&lt;a href=&quot;/images/gordito.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/gordito.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/images/grease.png&quot;&gt;&lt;img width=&quot;150&quot; height=&quot;120&quot; src=&quot;https://happyclam.github.io/images/grease.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br clear=&quot;left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　グレードアップしていくのは嬉しいのですが、自転車って凝りだすと意外とお金がかかるんですよねぇ:sweat_smile:&lt;/p&gt;

&lt;div style=&quot;width:240px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/spin2.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/spin2.png&quot; alt=&quot;Gordito &amp;amp; SPIN-2&quot; width=&quot;240&quot; height=&quot;320&quot; title=&quot;Gordito &amp;amp; SPIN-2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;いずれはリアバスケットも付ける予定&quot;&gt;いずれはリアバスケットも付ける予定&lt;/h3&gt;
&lt;p&gt;　現在買い物に使っているマークローザに何かトラブルが起きたら引退させて、このStrollにリアバスケットを付けて買い物に使おうと思ってます。リアバスケットは&lt;a href=&quot;https://hb.afl.rakuten.co.jp/ichiba/3a468d0b.3450311a.3a468d0c.2e57a6ed/_RTLink90217?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fauc-cycle-parts%2Fra2101-4%2F&amp;amp;link_type=hybrid_url&amp;amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJoeWJyaWRfdXJsIiwic2l6ZSI6IjI0MHgyNDAiLCJuYW0iOjEsIm5hbXAiOiJyaWdodCIsImNvbSI6MSwiY29tcCI6ImRvd24iLCJwcmljZSI6MSwiYm9yIjoxLCJjb2wiOjEsImJidG4iOjEsInByb2QiOjAsImFtcCI6ZmFsc2V9&quot;&gt;RITEWAY(ライトウェイ) のリアバスケット&lt;/a&gt;を予定しています。ネットで調べるとStrollへの取り付け実績もあるようなので大丈夫でしょう。リアバスケット付ける頃にはスタンディングやスキッドを自在に出来るようになっていればいいなぁと思ってます。買い物用のカゴ付き実用車でトリックを決めるのもアリだと思います:smile:&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stroll_custom.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stroll_custom.png&quot; alt=&quot;STROLL Custom&quot; width=&quot;320&quot; height=&quot;240&quot; title=&quot;Stroll Custom&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/stroll_custom2.png&quot;&gt;&lt;img src=&quot;https://happyclam.github.io/images/stroll_custom2.png&quot; alt=&quot;STROLL Custom&quot; width=&quot;240&quot; height=&quot;320&quot; title=&quot;Stroll Custom&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
    &lt;!-- display01 --&gt;
    &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-9018029357773039&quot; data-ad-slot=&quot;3925247388&quot; data-ad-format=&quot;auto&quot; data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt;
    &lt;script&gt;
    (adsbygoogle = window.adsbygoogle || []).push({});
    &lt;/script&gt;
&lt;/div&gt;

&lt;hr /&gt;

</description>
        <pubDate>Sat, 16 Mar 2024 00:00:00 +0900</pubDate>
        <link>https://happyclam.github.io/miscellaneous/2024-03-16/stroll02</link>
        <guid isPermaLink="true">https://happyclam.github.io/miscellaneous/2024-03-16/stroll02</guid>
        
        <category>bicycle</category>
        
        
        <category>miscellaneous</category>
        
      </item>
    
  </channel>
</rss>
