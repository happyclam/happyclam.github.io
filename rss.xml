<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>自己満足プログラミング</title>
        <description>自己満足プログラミング - happyclam</description>
        <link>http://happyclam.github.io</link>
        <link>http://happyclam.github.io</link>
        <lastBuildDate>2015-06-09T08:39:44+09:00</lastBuildDate>
        <pubDate>2015-06-09T08:39:44+09:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>markdownファイルを元に電子出版</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;無料で出版してもダウンロードさえして貰えないと聞くけど&lt;/h3&gt;
&lt;p&gt;　最近自分が購入する本に占める電子書籍の割合が高くなってきました。単に購入する電子書籍の数が増えてきているだけでなく、昔は購入する電子書籍といえばマンガや雑誌のようなどうでもいいと思える本が多かったのに、最近は何度も読み返すようなお気に入りの技術系の本の中に電子書籍が混じっています。そして、電子書籍に触れる機会が増えてきたのと出版へのハードルが下がってきたこともあって、電子書籍を作るほう（出版）にも興味が湧いてきました。でも、原稿用紙に鉛筆で文章を書いて出版したいわけじゃなく、今このブログを書いているスタイル（markdownで書く）のまま書いたものを流用したいという拘りがあります。&lt;br /&gt;
　だから、書きたいことはあるけど、わざわざMacのpagesを使ったりWindowsの一太郎を使ったりネット上のサービス&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;を利用してepubファイルを作成して出版したいわけじゃないってことです。こういう方法論に拘るタイプは作家としては大成できないことは分かっていますが、あくまでmarkdownファイルを元にして電子書籍出版するにはどうすればいいのか、最近試行錯誤したことを書いてみたいと思います。&lt;/p&gt;

&lt;h3 id=&quot;markdown&quot;&gt;markdownから電子書籍ファイルに変換する色々な方法&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;markdown-pdfコマンドで変換しPDF出力&lt;br /&gt;
markdown-pdfコマンドを使用してPDFファイルに変換します。CSSも使えるし改ページ処理も可能です、リンクが有効に出来ないようなので目次が使えません。でも、左サイドにサムネイル表示すれば不要な気もするので、PCで読むことだけを考えるのならこれでいいような気もします。&lt;br /&gt;
例.&lt;br /&gt;
&lt;code&gt;npm install -g markdown-pdf&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;markdown-pdf -f &#39;A4&#39; -s github.css hoge.md -o hoge.pdf&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pandocで変換、PDF出力&lt;br /&gt;
ややこしいLaTeXのclsファイルを弄りながらpandocでPDFを出力してみましたが、文字化けしたりよくわからないトラブルに見舞われましたので自分としてはお勧めしません。&lt;br /&gt;
例1.&lt;br /&gt;
&lt;code&gt;pandoc hoge.md -o hoge.pdf -V documentclass=myltjsarticle --latex-engine=lualatex&lt;/code&gt;&lt;br /&gt;
例2（一度TeXに変換してからPDFに変換）&lt;br /&gt;
&lt;code&gt;pandoc hoge.md -f markdown_github -o hoge.tex&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;pandoc hoge.tex -o hoge.pdf -V documentclass=myltjsarticle --latex-engine=lualatex&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pandocで変換、epub出力&lt;br /&gt;
ほぼ満足のいく出来でしたが強制改ページの方法がわからないのと、epubcheckでエラーが出て原因がわからないので使うのを止めました。&lt;br /&gt;
例1.&lt;br /&gt;
&lt;code&gt;pandoc -t epub3 -o hoge.epub title.txt hoge.md -s --mathjax --epub-cover-image=images/title.png --epub-stylesheet=github.css --epub-metadata=metadata.xml&lt;/code&gt;&lt;br /&gt;
例2.（一度TeXに変換してからPDFに変換）&lt;br /&gt;
&lt;code&gt;pandoc hoge.md -f markdown_github -o hoge.tex&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;pandoc -s hoge.tex -o hoge.epub&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;epubの仕様に沿って定義ファイルを自前で用意してコンパイル（zip化）してepub出力。&lt;br /&gt;
他の変換ツールを使った方法と違って、変換ツールの制限を受けないので調べながらやれば出来上がりに不満が出ることは無いと思うのですが手間がかかります。&lt;br /&gt;
例.&lt;br /&gt;
&lt;code&gt;zip -q0X hoge.zip mimetype&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;zip -qXr9D hoge.zip *&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;cp hoge.zip hoge.epub&lt;/code&gt;&lt;br /&gt;
用意するディレクトリとファイルの例&lt;br /&gt;
&lt;a href=&quot;https://epubcafe.googlecode.com/svn/trunk/tutorial/OEBPS/Text/Chapter020201.xhtml&quot;&gt;参考サイト&lt;/a&gt;  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;Packeage/
├── META-INF
│   └── container.xml
├── mimetype
├── hoge
│   ├── cover.xhtml
│   ├── css
│   │   └── stylesheet.css
│   ├── images
│   │   └── title.png
│   ├── main01.xhtml
│   ├── main02.xhtml
│   ├── main03.xhtml
│   ├── nav.ncx
│   ├── nav.xhtml
│   └── hoge.opf
├── hoge.epub
└── hoge.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;pdfepub&quot;&gt;PDFかepubか&lt;/h3&gt;
&lt;p&gt;　出版するための形態をどちらにするか一般的にはepubの方が正式な出版物という扱いだと思いますが、自分としては最初&lt;a href=&quot;https://gumroad.com&quot;&gt;Gumroad&lt;/a&gt;にPDFで公開するのが一番簡単そうだったのでそうしようと思っていたのです。でもpandocを使ってmarkdownからPDFに出力すると色々と不満が出てきたのでepubにも手を出してみたという経緯があります。pandocを使えばPDFにもepubにも出力出来るはずですが、一部の文字が化けたり、細かなトラブルに見舞われたのでPDF出力するならmarkdown-pdfを使った方が良さそうだとか、epub出力するならこのオプションが良さそうだとかいうノウハウが色々試行錯誤しているうちにわかってきました。そして、最終的には1.markdown-pdfを使ってPDF出力する、2.pandocを使ってepub出力する、3.epubの仕様に沿って自前で定義ファイルを書きepubを作成する、の３つの方法に絞りました。以下にそれぞれのメリットデメリットを書きます（不満点に書いている内容は、あくまで自分がうまく出来なかっただけで、よく理解している人がやれば可能なのかもしれません）。  &lt;/p&gt;

&lt;table rules=&quot;groups&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;メリット&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;不満点&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;markdown-pdf&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;簡単。PCで読むことだけを考えればこれで十分かも&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;・脚注が使えない&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;・数式が出せない？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;・リンクが効かない？&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;pandoc&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;多くの電子書籍リーダーで利用できるepub形式&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;・epubcheck（後述）エラーの検証で手も足も出せなくなる&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;自力epub&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;変換ツールの仕様やバグの制限を受けない&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;・markdownから直接ではなく、一度HTMLに変換する必要がある&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　上記のようなファイル出力が思うように出来るか出来ないかという観点とは別に、PDFならDRMとしての簡易透かし機能が使えるとか、epubだとISBNのような識別IDをどうするのかとか手続き面のメリット・デメリット、epubだと大きな市場に投入出来るけどPDFだと電子書籍市場で不利だとかビジネス面でのメリット・デメリットもあると思います。&lt;/p&gt;

&lt;h3 id=&quot;epubcheck&quot;&gt;epubcheckとは&lt;/h3&gt;
&lt;p&gt;　実はpandocで自分にとってはほぼ満足いくepub形式のファイルに変換できてcalibre等で動作確認も出来たのですが、AppleのiBooksだと&lt;a href=&quot;https://github.com/idpf/epubcheck&quot;&gt;epubcheck&lt;/a&gt;というepub検証ツールを通過しないと出版できないという話を聞いたので試したところ原因不明のエラーが出ました。そしてエラーメッセージだけからでは原因がわからず、いろいろ推測しながら編集してエラーの原因を探ることに疲れたので、一から自前で定義ファイルを書く（自力epub）ことにしたのです。その結果epubcheckでエラーも出ないし自分で満足のいくepubファイルが作れることはわかったのですが、markdownファイルから直接epubファイルに変換しているわけではないので不満もあります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -jar ~/Downloads/epubcheck-4.0.0-alpha11/epubcheck.jar ./hoge.epub
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;　結局現時点での自分なりの結論はpandocに頼らずepubの仕様に沿って自前で定義ファイルを書いてコンパイルする（自力epub）のが一番良さそうだと思います。でもこの方法はmarkdownファイルから直接変換しているわけではなく、jekyll等でmarkdownからHTMLを生成し、それを定義にあわせて編集しているので一手間かかるのでまだ不満が残ります。ただこのやり方はepubで出力することを考慮しながらmarkdownの書き方を工夫するという余地もあるので、まだまだ試行錯誤が続きそうです。&lt;br /&gt;
　こんなことに時間を費やしているより出版したい文章を仕上げることを優先すべきなのですが、pandocの機能アップに期待しながら出版するのはもう少し先になりそうです。&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;markdownに拘らなければAmazonやAppleや楽天ブックス以外にも&lt;a href=&quot;http://bccks.jp&quot;&gt;個人出版を助けるネットサービス&lt;/a&gt;があるようですし、&lt;a href=&quot;http://www7b.biglobe.ne.jp/~yama88/make.html&quot;&gt;変換ツール&lt;/a&gt;も色々あります。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>http://happyclam.github.io/miscellaneous/2015-06-09/pancod_epub</link>
                <guid>http://happyclam.github.io/miscellaneous/2015-06-09/pancod_epub</guid>
                <pubDate>2015-06-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ハイブリッド開発（HTML5 + JavaScript）でハマったこと</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;やはりそんなにうまい話はなかった&lt;/h3&gt;
&lt;p&gt;　ObjectiveC++も使わずJavaのコードも一切書かずにiOSとandroidのアプリが一つのソースコードで作成できるというハイブリッドアプリ開発ですが、&lt;a href=&quot;/programming/2015-04-25/mongo_upsert/&quot;&gt;前回の記事&lt;/a&gt;で書いた通りとりあえず&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.herokuapp.tictactoe_cf&quot;&gt;androidアプリ&lt;/a&gt;をリリースしたのはいいけど、いろいろなトラブルに遭遇しました。そこでcordovaを使ったandroidアプリ開発に関してネット上に出回っている一般的なトラブルは除いて、特に自分だけかもしれない嵌り方をした点について書いてみようと思います。  &lt;/p&gt;

&lt;p&gt;　開発環境：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jquery-1.11.2&lt;/li&gt;
  &lt;li&gt;jquery.mobile-1.4.5&lt;/li&gt;
  &lt;li&gt;cordova 5.0.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;android23ginger-breadclick&quot;&gt;android2.3(ginger bread)でclickイベントが発火しない&lt;/h3&gt;
&lt;p&gt;　これは定番のトラブルであんただけではなくネット上によく出回ってる話じゃないかと思われた方も多いと思います、そしてclickイベントは使わないってのが基本だと仰る方も多いでしょうが、clickイベントに関するネット上で見かけるトラブルはその動作が重いから避けろというものだと思います。私は先人の教えの通りfastclick.jsを最初から使用していたので特に重いと感じることもなく普通に動いているから問題無いと思っていたのですが、エミュレータも含めてandroid4.1だと問題なくclickイベントが発生するけど、android2.3（おそらくそれ以前も）だとclickイベントが発生しないというトラブルに出くわしました。&lt;br /&gt;
　&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.herokuapp.tictactoe_cf&quot;&gt;私のアプリ&lt;/a&gt;はダイアログを表示する箇所が２箇所あるのですが、cordovaのプラグインを使っている方は問題ないのですが、もう一方の自前のwindow（SinglePageApplicationなのでdata-role=”page”を付加したページ）を呼ぶ出す部分のclickイベントが発火しないという現象でした。エミュレータ上でマウスでクリックしようが、実機にインストールして指でタップしようがうんともすんともいいません。なんでこんなことが起こるのか分からなかったのですが、JQueryMobile(JQM)を使用しているのが原因（jQueryは問題ない）のようで、試しにJQMの読み込みをコメントにするとレイアウトは崩れますが正常に動きました。でも、JQMを使わずにレイアウトを定義し直すのは面倒だし、JQMの中まで追って行って原因を追究するのも大変そうなのでネットで検索しながらいろいろ試してみた（vclickイベント、touchイベント等に置き換える）のですが効果はなく、tappable.jsというものを見つけてそれを使ってclickイベントをtappable.jsで置き換えてみてエミュレータで動いた時は喜んだのですが、エミュレータと同じandroid-10（ginger bread）の実機（IS05）で試すと相変わらずイベントが発生しないというおかしな状況になりました。どうも複数の原因が関わっているようでエミュレータで動いたのは偶々だったようです。イベントの発生順序にも関係してそうだったのでclickイベント（というかtapイベント）のcallback設定をいろんな場所（deviceready, DOMContentLoaded, load, pageinit, $document.ready）に書いて確認したのですが動いたり動かなかったりという泥沼に陥りました。しつこいようですがandroid2.3の場合だけです。&lt;br /&gt;
　いくつか&lt;a href=&quot;https://forum.jquery.com/topic/javascript-function-not-called-on-button-click-event-android-app-using-jquery-mobile&quot;&gt;ヒントになるサイト&lt;/a&gt;はあったのですがJQMがやっている処理をandroidのバージョンによって切り分ける作業が必要そうで、それは大変なので結局ダイアログの表示内容を簡素化してpluginのダイアログ（navigator.notification）を使うことで回避しました。&lt;br /&gt;
　ネットや本ではjQueryMobileは重いのでzepto.jsを使いましょう、という助言はよく見かけていたのですが、PCサイトから作り始めた私は特に問題なく動いているしパフォーマンスを気にするようなものでもなく試しに作ってみたようなシンプルなテーブルゲームアプリなのでそのままJQMを使っていたのですが、古いandroid機でも動作させるつもりなら今でもzeptoを使ったほうがいいのかもしれません。私の場合はginger breadのシェアも落ちてきているのでJQMのままで良しとしました。&lt;/p&gt;

&lt;h3 id=&quot;android41jellybeanadmob&quot;&gt;android4.1(JellyBean)でadmobを使うと広告表示のタイミングで落ちる&lt;/h3&gt;
&lt;p&gt;　エミュレータを作成して試している限りでは正常に広告が表示されるのですが、実機で試すと広告が表示されるタイミングでアプリが落ちるという現象に悩まされました。android4.1.xだけで発生するバグのよう（私の持っている実機が4.1.2です!?）で、onAdFailedToLoadイベント等でも拾うことも出来ずにいきなりアプリ毎終了します。&lt;a href=&quot;https://github.com/floatinghotpot/cordova-plugin-admob/issues/92&quot;&gt;admobのオプションでoverlap:trueにするとこのバグを回避できる&lt;/a&gt;ようなのでとりあえずそうしましたが時間を取られました。リンク先にも書かれているようにandroidのバージョンによって処理を分けるのが良さそうです。&lt;/p&gt;

&lt;h3 id=&quot;android23ginger-breadjsonp&quot;&gt;android2.3(ginger bread)だとJSONPでデータが取得できない？？？&lt;/h3&gt;
&lt;p&gt;　これもまた古いandroidの場合だけでしたが、ランキング表示ダイアログを別のhtmlファイルで作成していたものをSPA(SinglePageApplication)にするために、同じhtmlファイル内にJQMのページ（data-role=”page”）に変更したら、ダイアログ表示時にサーバーにアクセスに行かないようになってしまいました。別ファイルを読み込んだ時にscriptタグ内のJavaScriptでサーバーからデータを取得するようにしていた処理を、JQMの場合はpageinitかpageshowイベントでやるように変更しなければいけないのかと思ってpageshowイベント内に書いてみてもpageshowイベントが発生しません。android4.1の場合は何も書き換えなくてもデータ取得できるにも拘らずです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;        function cb(u){
            //省略
        }
        function ranking_regist(username){
            location.href = &quot;#win_show_ranking&quot;;

            //以下JSONPデータ取得処理
            var s = document.createElement(&#39;script&#39;);
            s.src = URL;  // http://hogehoge?callback=cb&amp;amp;…省略
            document.getElementsByTagName(&quot;head&quot;)[0].appendChild(s);
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　
　上記コードで&lt;code&gt;location.href = &quot;#win_show_ranking&quot;&lt;/code&gt;とやっているところは非同期で実行され、ページ遷移の完了を待たずにその後のコードが実行されるわけですが、その後のコードが実行される間にページ遷移の処理が何処かでキャンセルされてしまってページが表示されずサーバーへのアクセス自体も発生しなくなりました。JSONPレスポンスを受け取るのにandroidのバージョンが関係あるわけないと思いながらも、古いandroidだと何か理由があるのか？と思い、データ取得の部分をajaxに書き換えてpageshowイベントに書いて試したりしましたが、android2.3では相変わらず動きませんでした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;            $.ajax({
                type: &#39;GET&#39;,
                url: URL,
                dataType: &quot;jsonp&quot;,
                jsonpCallback: &quot;callback&quot;,
                async : true,
                success: function(u) {
                    cb(u);
                }
            });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　android4.1では動くというのが混乱の元のような気がしますが、問題は&lt;code&gt;location.href = &quot;#win_show_ranking&quot;&lt;/code&gt;の部分でした。&lt;a href=&quot;http://www.buildinsider.net/web/jquerymobileref/34&quot;&gt;このサイト&lt;/a&gt;に書いてあるようにjavascriptを使って画面遷移するのではなく、JQMのchangeメソッドを使って画面遷移しなければいけないようです。&lt;code&gt;location.href = &quot;#win_show_ranking&quot;&lt;/code&gt;と書いている部分を&lt;code&gt;pagecontainer(&#39;change&#39;, &#39;#win_show_ranking&#39;, {allowSamePageTransition: false});&lt;/code&gt;と書き換えれば問題なく動作しました。&lt;br /&gt;
　逆に何で新しいandroidだと動くのかについてはよくわかりませんが、JQMはajaxを無効にして使うことも出来るようなので、古いandroidについては面倒を見るのを止めてサポートを切り捨てたけど、新し目のバージョンに関してはどちらでも動くようになっているということでしょうか？それとも偶々動いただけかもしれません。&lt;br /&gt;
　JQMのことをよく調べずに使い始めたのがよくなかったみたいです。それに現在はJQMを使っているといってもほとんど画面レイアウトにしか使っていない状態なのでJQMの機能をもう少し取り込んで行こうと思っているのですが、そうするとまた新たな問題が出て来るのでしょう。&lt;/p&gt;

&lt;hr /&gt;

</description>
                <link>http://happyclam.github.io/programming/2015-05-29/android_app1</link>
                <guid>http://happyclam.github.io/programming/2015-05-29/android_app1</guid>
                <pubDate>2015-05-29T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>HerokuでNodeとMongoDBを使う</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;スマホアプリからサーバに接続してデータ取得&lt;/h3&gt;
&lt;p&gt;　以前から記事に書いている三目並べプログラムをとりあえず&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.herokuapp.tictactoe_cf&quot;&gt;androidアプリ&lt;/a&gt;にしてみたのですが、単なる三目並べだとつまらないので一手の時間制限を設けて連続無敗記録を保存するように変更しました。そして今度はその記録をユーザ間で競ってもらおうと思い、サーバーを用意してスマホ上でランキング表示する機能をつけることにしました。&lt;br /&gt;
　ユーザ認証などの機能をつけると利用者側にとって敷居が高くなるので、適当なハンドルネームを登録してランキング表示するだけの機能です。単純な機能（スマホからハンドルネームを登録し、JSONPでランキングデータを取得する）なのでどうせなら今までやったことない方法でと思いNode.jsとMongoDBを使うことにしました。いろいろ印象に残ったことを書いてみます。&lt;/p&gt;

&lt;h3 id=&quot;upsert&quot;&gt;今までにもあっても良さそうなのに無かったupsert&lt;/h3&gt;
&lt;p&gt;　いや、昔からどこかで使われていた機能かもしれませんが私は知りませんでした。InsertとUpdateを合わせてUpsert。document（recordとは言わないらしい）が存在していれば更新し、なければ新規登録する機能です。私の経験ではOracleにもSybaseにもSQL Serverにもなかったはずです。さすがNoSQLです。&lt;br /&gt;
　で、使ってみると新規にInsertした場合のid値をどうやって取得するのか悩みましたが、先にid値を生成してからUpsertを呼び出すようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      //uidで検索する例
      //新規とわかっている場合はuidにnullを入れてid生成
      var doc = {uid:null, name:username, score:unbeaten, date: null};
      var collection = db.collection(&quot;tictactoe&quot;);
      temp_id = new ObjectID(uid);
      collection.update({_id: temp_id}, {name:username, score:unbeaten, date: new Date()}, {upsert:true, w: 1}, function(err, result) {
        if (err) { throw err; }
        collection.findOne({_id: temp_id}, function(err, item) {
          if (err) { throw err; }
          if (item) {
            doc._id = item._id;
            doc.date = item.date;
          }
        });
      });
         
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;出来るだけ新しいバージョンで開発環境を作る&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;http://www.oreilly.co.jp/books/9784873116068/&quot;&gt;Nodeクックブック&lt;/a&gt;という本を参考にしていたのですが、ネット上に転がっていた古いコードから書き始めたのが間違いの元で、本のサンプルコードが動かない環境で一通り作った後に何度も同じ箇所を書き換えなければいけない羽目に陥りました。古いバージョンのままでも動けばいいのですが、何かトラブルに見舞われた時に「もしかしてバージョンが古いせいか？新しくしてみよう」となって直接トラブルとは関係ないのに書き直す羽目に陥ったということです。皆さんも気をつけて下さい。特にExpressはバージョンによって書式（構文）の変化が激しくて、バージョンが変わるともうそれは必要がなくなったというコードが多かったです。依存関係で深刻なものは無かったのですが、自分が使っているパッケージのバージョンは把握しておいた方が右往左往しなくて済みそうです。以下が現時点で使っているパッケージ（package.json）ファイルの一部です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  , &quot;dependencies&quot;: {
      &quot;express&quot;: &quot;4.12.1&quot;
    , &quot;jade&quot;: &quot;&amp;gt;= 0.0.1&quot;
    , &quot;mongodb&quot;: &quot;2.0.27&quot;
  },
  &quot;engines&quot;: {
    &quot;node&quot;: &quot;0.10.20&quot;,
    &quot;npm&quot;: &quot;2.8.3&quot;
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　Expressで悩まされた一例として、本に記載されている通り以下のようにlessファイルを指定したのですが&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
app.use(require(&#39;less-middleware&#39;)({
   src: __dirname + &#39;/views&#39;,
   dest: __dirname + &#39;/public&#39;,
   compress: true
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　上手くいかなくて、&lt;a href=&quot;http://stackoverflow.com/questions/22274832/public-static-directory-typeerror-arguments-to-path-join-must-be-strings&quot;&gt;ここ&lt;/a&gt;に書いてある通り以下のように修正すれば動きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//app.js
app.use(require(&#39;less-middleware&#39;)(__dirname + &#39;/public&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　src:とdest:を分けて指定するのではなく、一つ（/public）だけ指定すればそこにあるlessファイルを読み込んで同じディレクトリにcssファイルを出力するという形で上手く機能しています。よく調べればオプションがあるのかも知れません。&lt;br /&gt;
　あと、Rubyのrvm環境同様にNodeも最初からnvmを使って複数のバージョンを切り替えられるようにしておいたほうがよさそうです。&lt;/p&gt;

&lt;h3 id=&quot;heroku&quot;&gt;ローカルで動くのにHeroku上で動かない&lt;/h3&gt;
&lt;p&gt;　herokuで動かないのはMongoDBへの接続が出来ていないようだということはすぐわかったのですが、&lt;a href=&quot;http://d.hatena.ne.jp/koda_hd28v/20120512/1336799056&quot;&gt;この記事&lt;/a&gt;を見つけるまで理由がわかりませんでした。ローカルではDBオブジェクトをnewしてServer.open、herokuではconnectを使うということのようです。ローカル環境にデータベースが存在しているわけじゃないんだからopen出来ると考える方がおかしいと言われそうですが、herokuもMongoDBもどこまで私の面倒を見てくれるのかわからないんだから、ローカルで動くんだからそのまま動くと考えてしまっても仕方がないと思います。&lt;br /&gt;
　で、記事の中で説明してくれているように、以下のようにDB接続モジュールだけ分割して&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// lib/MongoBuilder.js
var mongo = require(&#39;mongodb&#39;);

module.exports.ready = function(db_name, callback){
  if ( process.env.MONGOLAB_URI ){
    mongo.connect(process.env.MONGOLAB_URI, {}, function(err, db){
      callback(db);
    });
  }else{
    new mongo.Db(&#39;tictactoe&#39;, new mongo.Server(&#39;localhost&#39;, 27017), {safe: false}).open(function(err,db){
      callback(db);
    });
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　以下のように使用すれば、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// routes/index.js
var MB = require(&quot;../lib/MongoBuilder&quot;);
var users = new Array();
exports.mypage = function(req, res){
  MB.ready(&#39;tictactoe&#39;, function(db){
    var collection = db.collection(&quot;tictactoe&quot;);
    collection.find().sort({score: -1}).limit(100).toArray(function(err, users){
      res.render(&#39;index&#39;, {title: &#39;Tictactoe Unbeaten&#39;, users: users});
    });
  });
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　ローカル環境でもheroku環境でも動くように出来ました。&lt;/p&gt;

&lt;hr /&gt;
</description>
                <link>http://happyclam.github.io/programming/2015-04-25/mongo_upsert</link>
                <guid>http://happyclam.github.io/programming/2015-04-25/mongo_upsert</guid>
                <pubDate>2015-04-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>新Macbook購入</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;発売日翌日にゲット&lt;/h3&gt;
&lt;p&gt;　発売日（４月１０日）にはアップルストアでも入手できた人はいなかったようなので、ダメモトで梅田のヨドバシに朝一番で行ってみると幸運なことに買うことができました。開店早々Appleのブースに行くと男ばかり１４、５人がたむろしていて３台の展示機に何人か並んでいました。自分は既に買うことは決めていたので試用する気もなくすぐに店員に「買えるんですか？欲しいんですけどっ」と伝えると「はい、今在庫を確認しているところです」と他の客からも質問されているらしく慌てている感じで、どういう風に対応すべきか迷っている感じでした。結局、他からも店員がワラワラと集まってきて、客たちが希望する機種を個別に聞いて在庫確認のために消えていくって感じで店に来た順番とかは関係ない感じで進んでいました。確かに購入を決めている客ばかりでも無さそうだったので順番に並んでくださいと誘導するわけにもいかなかったのでしょう。目の前で購入できている人がいるのに目当ての機種が買えなかったら辛いなぁと思いながらもラッキーなことにほどなく購入（MacBookスペースグレイ512GB）することが出来ました。自分が購入できた後はすぐに店を出たのでわかりませんが、購入できた人とできなかった人で揉めたりしたのでは無いかとちょっと心配になりました。ヨドバシとしては新MacBookに人が集まるのが意外だったのかもしれません。店に着いたとき外に行列（確認してみたところ妖怪メダル目当ての行列だったそうです）が出来ていて店員が誘導して整列させていたんですが、ヨドバシ全体の取扱商品から考えたら新MacBookなんてものはかなりマイナーなものでしかないんでしょう。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/macbook_samp0.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/macbook_samp0.png&quot; alt=&quot;MacBook 12-inch Space Gray 512GB&quot; title=&quot;MacBook 12-inch Space Gray 512GB&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/macbook_samp1.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/macbook_samp1.png&quot; alt=&quot;MacBook 12-inch Space Gray 512GB&quot; title=&quot;MacBook 12-inch Space Gray 512GB&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;vaio-type-ppc&quot;&gt;Vaio type Pは今までで一番気に入ったモバイルPC&lt;/h3&gt;
&lt;p&gt;　2009年に発売されたソニーのVAIO type P（&lt;a href=&quot;http://www.vaio.sony.co.jp/Products/P1/&quot;&gt;VGN-P90S&lt;/a&gt;）を今でも使用している人はかなり少数派だと思いますが、サードパーティから購入した中国製の予備のバッテリーを駆使しながら今まで使ってきました。キーボードは打ち易いし解像度はUWXGA（1600×768）というMacBookAirより広い環境でRailsを使ったWebアプリ開発機としてもドキュメント作成用としても結構満足して使っていましたが、CPUが非力なのでEclipseを使ったりandroidアプリ開発（エミュレータが重い）には使えないなと感じていました。&lt;br /&gt;
　私の場合Vaioは購入当初からUbuntuやLinuxMintやlubuntuに入れ替えて使っていたので、Windowsの新作モバイルPCが出る度に気は進まないけどまた購入してすぐにWindowsを削除して使おうかなんてことも考えていましたが、そこまでするほどVaioよりいいと思えるモバイルPCはなかったしiPhoneアプリの開発もやってみたいって理由もあってMacBookAirの高解像度版が出れば乗り換えようと思いながら今まで使ってきました。MacBookAir買えばいいじゃないかという人がいると思いますが、過去の経験からMacBookAir11の解像度では開発は出来ないと思っていたし、MacBookAir13は持ち歩く気はしないというか、正確に言うと持ち歩くのはまだいいんですが出先で使うときの占有面積が広いのでちょっと邪魔だなって感じです。以上のような結果として自分にとってVaioPは今までで一番長期にわたって使い尽くしたモバイルPCになりました。&lt;br /&gt;
　そこであまり他の人の役には立たないと思いますがあくまで自分目線でVaioPとの勝敗表を作ってみました。上の項目ほど自分が重視する点です。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;MacBook&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;解像度&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;○&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;キーボード&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◎&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CPU・SSD&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◎&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;バッテリーの持ち&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;◎&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ポインティングデバイス&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;○&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;重さ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;×&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;邪魔さ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;×&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;熱（ファンレス）&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;△&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;周辺機器・アクセサリー&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;×&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;◎…大差で勝ち、◯…勝ち、△…引き分け、×…負け&lt;/p&gt;

&lt;p&gt;USB機器やアクセサリー類は今後時間とともに解決していくことでしょう。まずはVaioPで使っていたような&lt;a href=&quot;http://www.sony.jp/vaio/products/VGP-CKP1/&quot;&gt;革製のケース&lt;/a&gt;が欲しいです。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/comp_vaio.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/comp_vaio.png&quot; alt=&quot;MacBook 12-inch and Vaio P&quot; title=&quot;VaioPとの比較&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h3 id=&quot;macbook&quot;&gt;新MacBookの使用感&lt;/h3&gt;
&lt;dl&gt;
  &lt;dt&gt;解像度&lt;/dt&gt;
  &lt;dd&gt;ハードウェアに関しては詳しく無いのですがRetinaディスプレイになればもっと高解像度になると思っていたので1440x900は少々残念です。これならVaioP（1600x768）と大差ありません。&lt;/dd&gt;
  &lt;dt&gt;キーボード&lt;/dt&gt;
  &lt;dd&gt;新開発のバラフライキーボードは快適です。ストロークが浅いなんて聞いていたけどまさかDELLのXPS11（型番は知りませんがフィルムタイプ？のストローク無しのキーボード）ほど酷いものでは無いだろうと思っていた通り、自分にとっては十分すぎる打ち易さです。言われてみれば確かにちょっと浅いかなって感じで、違和感はありませんでした。VaioPも小さな筐体の割には良く出来た打ち易いキーボードだと思いますが、やはりMacBookを触った後にVaioPのキーボードを打つとその違いを痛感します。あと、キーストローク音がVaioPがペチッペチッって感じなのですが、MacBookはコトコトコトって感じで高級感があります。&lt;/dd&gt;
  &lt;dt&gt;CPU・SSDスペック&lt;/dt&gt;
  &lt;dd&gt;VaioPでそこそこ満足していた自分にとっては十分過ぎる速さです。比較する意味も無いのですが、同じandroidアプリをビルドしてエミュレータ画面に起動するまでVaioPだと１５分!?（エミュレータは実機より遅いんです）かかる処理がMacBookだと２分で済みました。&lt;/dd&gt;
  &lt;dt&gt;バッテリー&lt;/dt&gt;
  &lt;dd&gt;今までは電源を確保するために仕方なくスタバを選択することも多かったので今回の買い替えでようやく電源の確保から解放されると思っていますがいつまで持つか不安です。今のところまだ出先での通常の使い方をしていないのでチェックしきれてませんが、新品の今でも動画を見るとすごい勢いでバッテリーが減っていきますので1年後には出先で電源を気にしなくていけなくなるような気がします。&lt;br /&gt;
　発熱に関してはもっとCPUを酷使してもいいのではないかと思うほどPC底面の温度は低いです。VaioPと比べても断然低くてまったく熱くなりません。冷たいといってもいいぐらいです。&lt;/dd&gt;
  &lt;dt&gt;トラックパッド&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/dt&gt;
  &lt;dd&gt;今までタッチパッドと言われる入力デバイス付きのノートPCを所有していた時期もありますが、ほとんどパッドを使ったことはなくマウスを外付して使っていました。モバイルPCを買うときにThinkPad,Libretto,C1R,VaioPと選択してきたのもトラックポイント（メーカーによって呼び名が違うようですが）が使えることが大きな要因でもありました。トラックポイントのほうが使いやすい面もありますがMacのトラックパッドは機能が豊富でこれなら外付けマウスを付けなくてもよさそうです。&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&quot;section-1&quot;&gt;まとめ&lt;/h3&gt;
&lt;p&gt;　レビューというより日記なので皆さんの役には立たなかったかもしれませんが、今のところVaioP以上に使い続けたくなるモバイルPCになるような気がしています。&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;トラックパッドについてとVaioPとの比較写真を追加しました &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>http://happyclam.github.io/hardware/2015-04-14/macbook</link>
                <guid>http://happyclam.github.io/hardware/2015-04-14/macbook</guid>
                <pubDate>2015-04-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>HTML5でアニメーション</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;タイマーを使わない&lt;/h3&gt;
&lt;p&gt;　HTML5でアニメーションを実現する方法を調べてみたら、タイマーを使う必要が無くなったらしい（タイマー間隔をブラウザ任せに出来る）のでやってみました。それぞれのブラウザ用にAPIが分かれているようで今後どうなるかわかりません（HTML5自体がまだまだ流動的だと思いますが）が、結構以前（HTML5リリース当初）からこのやり方は定着しているらしいです。手元のAndroid4.1.2の端末（GL07S）でも問題なく動きました。IEでHTML5を利用するにはIE9以上が必要です。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;二点の座標をクリックして直線を引くサンプル&lt;/h3&gt;
&lt;p&gt;　要するにRequestAnimationFrameというAPIを使えばいいという話なのですがネットでandroidの対応状況は4.1以上でも全滅という書き込みをちらほら見かけます。でも、実際にやってみると以下のCoffeeScriptをコンパイルしたanimation.jsとanimation.htmlをandroid端末（GL07s）にコピーしてURL指定すれば標準ブラウザでふつうに動作しました。ネットではjQueryといっしょに使用することで問題が出るという書き込みも見かけましたが無視することにしました。知らないうちに解決されたのでしょう&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;(^^)&lt;br /&gt;
　実際にアニメーションを駆使するスマホアプリを作るときは、既存のいろんなライブラリを使うことが多いのかもしれませんがHTML5だけで出来るほうがシンプルでいいですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-CoffeeScript&quot;&gt;#animation.coffee
$ -&amp;gt;

    return new Animation()
    
class Animation
    constructor: -&amp;gt;
        @canvas = document.getElementById(&quot;canvasMain&quot;)
        @areaStartX = document.getElementById(&quot;spanStartX&quot;)
        @areaStartY = document.getElementById(&quot;spanStartY&quot;)
        @areaEndX = document.getElementById(&quot;spanEndX&quot;)
        @areaEndY = document.getElementById(&quot;spanEndY&quot;)
        @start = {x:0, y:0}
        @end = {x:100, y:100}
        @request = null
        @amount = 0
        @startflg = true
        @setEventListener()
        @touch(@start.x, @start.y)
        @touch(@end.x, @end.y)

    touch: (clientX, clientY) =&amp;gt;
        if @startflg
            @startflg = false
            @start.x = clientX; @areaStartX.innerHTML = clientX
            @start.y = clientY; @areaStartY.innerHTML = clientY
        else
            @startflg = true
            @end.x = clientX; @areaEndX.innerHTML = clientX
            @end.y = clientY; @areaEndY.innerHTML = clientY
        
    setEventListener: =&amp;gt;
        $(&#39;#canvasMain&#39;).on &#39;click&#39;, (e) =&amp;gt;
            @touch(e.clientX, e.clientY)

        $(&#39;#btnStart&#39;).on &#39;click&#39;, (e) =&amp;gt;
            @animate()
        
    animate: =&amp;gt;
        @request = requestAnimFrame(@animate, @canvas)
        @drawanimation()

    drawanimation: =&amp;gt;
        @context = @canvas.getContext(&#39;2d&#39;)
        @context.clearRect(0, 0, @canvas.width, @canvas.height)
        @amount += 0.02
        @amount = 1 if @amount &amp;gt; 1
        @context.beginPath()
        @context.moveTo @start.x, @start.y
        @context.strokeStyle = &#39;rgba(255, 105, 180, 0.7)&#39;
        @context.lineWidth = 12
        newX = @start.x + (@end.x - @start.x) * @amount
        newY = @start.y + (@end.y - @start.y) * @amount
        @context.lineTo newX, newY
        @context.stroke()
        if newX is @end.x and newY is @end.y
            cancelRequestAnimFrame @request
            @request = null
            @amount = 0

window.Animation = window.Animation || Animation

window.requestAnimFrame = (-&amp;gt;
  window.requestAnimationFrame or window.webkitRequestAnimationFrame or window.mozRequestAnimationFrame or window.oRequestAnimationFrame or window.msRequestAnimationFrame or (callback, element) -&amp;gt;
    window.setTimeout callback, 1000 / 60
)()
window.cancelRequestAnimFrame = (-&amp;gt;
  window.cancelAnimationFrame or window.webkitCancelRequestAnimationFrame or window.mozCancelRequestAnimationFrame or window.oCancelRequestAnimationFrame or window.msCancelRequestAnimationFrame or clearTimeout
)()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;!-- animation.html --&amp;gt;

&amp;lt;!DOCTYPE HTML&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-1.11.2.min.js&quot;&amp;gt; &amp;lt;/script&amp;gt;
    &amp;lt;script type=&quot;text/javascript&quot; src=&quot;animation.js&quot;&amp;gt; &amp;lt;/script&amp;gt;
    &amp;lt;title&amp;gt;アニメーションのテスト&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;canvas id=&quot;canvasMain&quot; width=&quot;400&quot; height=&quot;400&quot; style=&quot;background-color: #2f4f4f;&quot;&amp;gt;&amp;lt;/canvas&amp;gt;
    &amp;lt;form&amp;gt;
      &amp;lt;p&amp;gt;
      開始点　X=&amp;lt;span id=&quot;spanStartX&quot;&amp;gt;&amp;lt;/span&amp;gt;:
      Y=&amp;lt;span id=&quot;spanStartY&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br /&amp;gt;
      終了点　X=&amp;lt;span id=&quot;spanEndX&quot;&amp;gt;&amp;lt;/span&amp;gt;:
      Y=&amp;lt;span id=&quot;spanEndY&quot;&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;
        &amp;lt;input id=&quot;btnStart&quot; type=&quot;button&quot; value=&quot;描画&quot;&amp;gt;
      &amp;lt;/p&amp;gt;
    &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;黒板に赤チョークのイメージです（赤チョークって確かこういうピンクっぽい色だった記憶があります）&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/animation.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/animation.png&quot; alt=&quot;実機画面&quot; title=&quot;実機（gl07s）で動作確認&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/project/2015-02-01/first_cordova/&quot;&gt;前回記事&lt;/a&gt;で作成した&lt;a href=&quot;http://tictactoe-cf.herokuapp.com&quot;&gt;サイト&lt;/a&gt;にも適用。白線もチョークっぽく掠れた感じにしようかと思いましたが暗くなるので止めました&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/3mokunarabe.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/3mokunarabe.png&quot; alt=&quot;三目並べアプリ画面&quot; title=&quot;実機（gl07s）で三目並べアプリ&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;RequestAnimationFrame APIの対応状況は&lt;a href=&quot;http://caniuse.com/#feat=requestanimationframe&quot;&gt;ここ&lt;/a&gt;です。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>http://happyclam.github.io/programming/2015-03-26/html5_anim</link>
                <guid>http://happyclam.github.io/programming/2015-03-26/html5_anim</guid>
                <pubDate>2015-03-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>iOS/Androidハイブリッドアプリ開発</title>
                <description>&lt;p&gt;Project: 「&lt;a href=&quot;http://tictactoe-cf.herokuapp.com&quot;&gt;&lt;strong&gt;CoffeeScript版三目並べ&lt;/strong&gt;&lt;/a&gt;」: &lt;a href=&quot;https://github.com/happyclam/tictactoe-cf&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;web&quot;&gt;まずは通常のWebサイトを作成&lt;/h3&gt;
&lt;p&gt;　ハイブリッド開発と言っても私は現時点ではiPhoneを持っていないのでAndroidでしか確認できませんが、HTML5とJavaScript（CoffeeScript）でPC上で開発しそれをAndroidとiPhoneで利用出来るなんて虫のいい話があるのなら是非やってみたくなります。HTML5のローカルストレージなんかもいろいろ可能性が広がる気がしますがとりあえず以前作ったRuby製コンソールアプリを使ってHTML5のCanvas機能を試してみたいと思います。&lt;br /&gt;
　まずは&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;以前の記事&lt;/a&gt;で作成した&lt;a href=&quot;https://github.com/happyclam/tictactoe_ruby&quot;&gt;Ruby製のコンソールプログラム&lt;/a&gt;をCoffeeScriptに書き換えていきます。&lt;a href=&quot;/programming/2015-01-28/ruby_to_js2/&quot;&gt;前回の記事&lt;/a&gt;以降特に苦労は無かったのですがRubyからCoffeeScriptへのコンバート作業に関しては触れずに、今回はAndroidアプリ化に関して書きます。&lt;/p&gt;

&lt;h3 id=&quot;cordovaphonegap&quot;&gt;cordova（PhoneGap）プロジェクトの作成&lt;/h3&gt;
&lt;p&gt;　作成したCoffeeScriptをコンパイル（&lt;code&gt;coffee -c tictactoe.coffee&lt;/code&gt;）したjsファイルとindex.htmlだけのサイトですが、Androidアプリ化するためにした作業は以下の通りです。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通常のWebサイトとして動作確認&lt;/li&gt;
  &lt;li&gt;cordovaコマンドを使ってプロジェクト作成&lt;/li&gt;
  &lt;li&gt;作成したプロジェクトのwwwディレクトリ内のindex.htmlファイル内のbodyタグの中身をPCサイトのindex.htmlの内容に置き換える＆作成したJavaScriptファイルを読み込むscriptタグを追記。&lt;/li&gt;
  &lt;li&gt;エミュレータ上で動作確認&lt;/li&gt;
  &lt;li&gt;実機で動作確認&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;tree
.
├── index.html
├── js
│   └── jquery-1.11.1.min.js
├── tictactoe.coffee
└── tictactoe.js

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;cordova create Tictactoe com.herokuapp.tictactoe Tictactoe -d
cd Tictactoe
cordova platform add android
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　cordovaコマンドで生成したindex.htmlの雛形にPCサイト用のindex.htmlの中身をコピペ&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#index.html
#header部は省略
    &amp;lt;body&amp;gt;
      &amp;lt;p id=&quot;title&quot;&amp;gt;三目並べ（TicTacToe）&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;
        &amp;lt;canvas id=&quot;canvasMain&quot;&amp;gt;&amp;lt;/canvas&amp;gt;
      &amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;
        &amp;lt;div id=&quot;orders&quot;&amp;gt;
          &amp;lt;input type=&quot;radio&quot; name=&quot;optOrders&quot; id=&quot;optOrder1&quot; value=&quot;-1&quot; checked=&quot;checked&quot;&amp;gt;First
          &amp;lt;input type=&quot;radio&quot; name=&quot;optOrders&quot; id=&quot;optOrder2&quot; value=&quot;1&quot;&amp;gt;Second
        &amp;lt;/div&amp;gt;
      &amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;
        &amp;lt;input id=&quot;btnStart&quot; type=&quot;button&quot; value=&quot;Start!&quot;&amp;gt;
        &amp;lt;span id=&quot;spanStatus&quot;&amp;gt;&amp;lt;/span&amp;gt;
      &amp;lt;/p&amp;gt;
      &amp;lt;script type=&quot;text/javascript&quot; src=&quot;cordova.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;script type=&quot;text/javascript&quot; src=&quot;js/index.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;script src=&quot;js/jquery-1.11.1.min.js&quot;&amp;gt; &amp;lt;/script&amp;gt;
      &amp;lt;script type=&quot;text/javascript&quot; src=&quot;tictactoe.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;cordova emulate android -d
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/tictactoe_emulator.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/tictactoe_emulator.png&quot; alt=&quot;エミュレータ画面&quot; title=&quot;エミュレータで動作確認&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;cordova run android
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/tictactoe_gl07s.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/tictactoe_gl07s.png&quot; alt=&quot;実機画面&quot; title=&quot;実機（gl07s）で動作確認&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　cordovaプロジェクト下のwww内のファイルを修正してcordovaコマンドを実行すると、platforms/android/以下にAndroid用のファイルが出力されるようです。ビルドしてエミュレータや実機にインストールして実行するまで一気に行うので上記のようにあっという間に完成しました。このビルド作業を行う環境構築の方が時間がかかるかもしれません。環境構築については&lt;a href=&quot;http://www.amazon.co.jp/Android%E5%AF%BE%E5%BF%9C-HTML5-%E3%83%8F%E3%82%A4%E3%83%96%E3%83%AA%E3%83%83%E3%83%89%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA-Software-Design/dp/4774162116/ref=tmm_pap_title_0?ie=UTF8&amp;amp;qid=1421726606&amp;amp;sr=1-1&quot;&gt;この本&lt;/a&gt;を参考にしましたが、個人的にはRubyの開発環境と同じく、ユーザ領域に構築（sudoを使わない）する方がいいのではないかと思ってます。&lt;br /&gt;
　それにしても以前droidgapコマンド（cordovaの前身？）の時はeclipseを使わなければいけなかったり、いろいろトラブルに見舞われた記憶があるのですが、思った以上に簡単でした。でも、このままだと見た目もUIも貧弱過ぎるのでjquery mobileを使って追加・修正していくことになると思いますが、そうするとPCサイト用とは別物になっていくのでしょう。そのあたりも今後確認していこうと思います。&lt;/p&gt;

&lt;hr /&gt;

</description>
                <link>http://happyclam.github.io/project/2015-02-01/first_cordova</link>
                <guid>http://happyclam.github.io/project/2015-02-01/first_cordova</guid>
                <pubDate>2015-02-01T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Ruby製プログラムをCoffeeScript（JavaScript）に書き換える</title>
                <description>&lt;h3 id=&quot;javascript&quot;&gt;クライアントサイドの入力チェック用だったJavaScriptが今は主役&lt;/h3&gt;
&lt;p&gt;　以前Titaniumを弄ったときはどうしてもJavaScriptに積極的に取り組む気にはなれなかったのですが、cordova（PhoneGap）の存在を知り&lt;a href=&quot;http://www.amazon.co.jp/Android%E5%AF%BE%E5%BF%9C-HTML5-%E3%83%8F%E3%82%A4%E3%83%96%E3%83%AA%E3%83%83%E3%83%89%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA-Software-Design/dp/4774162116/ref=tmm_pap_title_0?ie=UTF8&amp;amp;qid=1421726606&amp;amp;sr=1-1&quot;&gt;[iOS/Android対応] HTML5 ハイブリッドアプリ開発[実践]入門&lt;/a&gt;という本を読んで、またJavaScriptを使ったandroidアプリ開発への興味が戻って来ました。Titaniumを弄ったときと違って自分にとってはCoffeeScriptの存在が大きい、JavaScriptは嫌いだけどCoffeeScriptならやる気が湧きます。なので試しに以前記事を書いたRuby製の三目並べのプログラムをCoffeeScript（最終的にはJavaScriptを使ったandroidアプリ）に移植して見ようと思い取り組み始めたらいきなり問題に遭遇したのでTips的に記事を書いてみます。&lt;br /&gt;
　それにしても昔のWebシステムはブラウザのJavaScript機能がOffでも使えることを要求されたものなのに、リッチなUIを要求するユーザーの声がどんどん大きくなり、最近ではJavaScript（jQuery,Ajax）無しは考えられない感じですね。そしてどうせJavaScriptを避けることが出来ないのなら、どうにかしてJavaScriptを楽に生成しようという流れが続いてます。&lt;/p&gt;

&lt;h3 id=&quot;arrayrubyjavascript&quot;&gt;Arrayクラスを継承したRubyのクラスをJavaScriptに&lt;/h3&gt;
&lt;p&gt;　三目並べの盤を表現するArrayクラスを継承した以下のコードを&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;#tictactoe.rb
class Board &amp;lt; Array
  def initialize(*args, &amp;amp;block)
    super(*args, &amp;amp;block)
  end
end

b = Board.new([1, 2, 3, 4, 5, 6, 7, 8, 9])
p b[3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のようにCoffeeScriptに書き換えて実行したところ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;#tictactoe.coffee
class Board extends Array
    constructor: (args) -&amp;gt;
        super(args)

b = new Board([1, 2, 3, 4, 5, 6, 7, 8, 9])
console.log b[3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;画面には&lt;code&gt;undefined&lt;/code&gt;と表示されました。エラーにもなりません。コンストラクタに渡されたargsパラメータはどこに行ったのでしょうか？&lt;code&gt;super(args)&lt;/code&gt;の行を&lt;code&gt;@ = args&lt;/code&gt;とやったらエラーになります&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;br /&gt;
　以下のようにパラメータを可変個引数にして、配列要素をバラバラのパラメータにして渡しても同じです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#tictactoe.coffee
class Board extends Array
    constructor: (args...) -&amp;gt;
        super(args...)

b = new Board(1, 2, 3, 4, 5, 6, 7, 8, 9)
console.log b[3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　試しにArrayクラスに新しいプロパティを追加してあげるとそちらの方はちゃんと代入出来ました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;#tictactoe.coffee
Array::data = []
class Board extends Array
    constructor: (args) -&amp;gt;
        super(args)
        @.data = args

b = new Board([1, 2, 3, 4, 5, 6, 7, 8, 9])
console.log b[3]
console.log b.data[3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まず、JavaScriptでもクラスの拡張（オープンクラス？）が簡単に出来ることに驚きました。Rubyと同様にオブジェクト指向出来るんですね。でもこのCoffeeScriptをJavaScriptに変換した中身を見てみると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$coffee -c tictactoe.coffee
$cat tictactoe.js
// Generated by CoffeeScript 1.6.3
(function() {
  var Board, b,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Array.prototype.data = [];
  Board = (function(_super) {
    __extends(Board, _super);
    function Board(args) {
      Board.__super__.constructor.call(this, args);
      this.data = args;
    }
    return Board;
  })(Array);
  b = new Board([1, 2, 3, 4, 5, 6, 7, 8, 9]);
  console.log(b.data[3]);
  console.log(b[3]);
}).call(this);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんじゃこりゃ〜。CoffeeScriptを介さずに元のRubyのコードからこのJavaScriptのコードを書ける気がしない。慣れの問題もあるでしょうが、CoffeeScriptが見事に抽象化してくれているのがわかります。&lt;br /&gt;
　で、問題のコンストラクタに渡された引数の部分ですが、&lt;code&gt;Board.__super__.constructor.call(this, args);&lt;/code&gt;こうなっていて値を置き換えてくれても良さそうですが入りません。追加したdataプロパティの方は&lt;code&gt;Array.prototype.data = [];&lt;/code&gt;と定義されていて、JavaScriptではprototypeプロパティを介してデータを参照しているようです。なので&lt;code&gt;@.prototype = args&lt;/code&gt;とやったりしましたが値はセットされませんしエラーにもなりません。&lt;code&gt;@ = args&lt;/code&gt;はエラーになりますがpushメソッドは呼べるので、結局コンストラクタで&lt;code&gt;@.push(args[i]) for i in [0...args.length]&lt;/code&gt;とすることでRubyからCoffeeScriptを介してJavaScriptに移植することが出来ました。  &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;#tictactoe.coffee
class Board extends Array
    constructor: (args) -&amp;gt;
        @.push(args[i]) for i in [0...args.length]

b = new Board([1, 2, 3, 4, 5, 6, 7, 8, 9])
console.log b[3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　配列の大括弧（[]、bracket）さえもメソッドとして実装しているRubyとの違いかもしれませんが、とりあえず移植できてなによりです。今までJavaScriptに関して真剣に取り組んだことが無かったのですが、&lt;a href=&quot;http://www.amazon.co.jp/%E9%96%8B%E7%9C%BC-JavaScript-%E2%80%95%E8%A8%80%E8%AA%9E%E4%BB%95%E6%A7%98%E3%81%8B%E3%82%89%E5%AD%A6%E3%81%B6JavaScript%E3%81%AE%E6%9C%AC%E8%B3%AA-Cody-Lindley/dp/487311621X/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1421851059&amp;amp;sr=1-1&amp;amp;keywords=%E9%96%8B%E7%9C%BC%EF%BC%81javascript&quot;&gt;買ってきた本&lt;/a&gt;を見ながら移植を進めて、また何か問題が発生すれば記事を書いてみます。&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;CoffeeScriptでは@はthisの別名、::はprototypeの別名）。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>http://happyclam.github.io/programming/2015-01-25/ruby_to_js</link>
                <guid>http://happyclam.github.io/programming/2015-01-25/ruby_to_js</guid>
                <pubDate>2015-01-25T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>checkboxでAjaxで更新（PATCH）処理</title>
                <description>&lt;h3 id=&quot;jqueryajaxcoffeescript&quot;&gt;jQuery,Ajax,CoffeeScript覚えること多過ぎ&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;http://my-posi.herokuapp.com/&quot;&gt;先物・オプションのシミュレーションサイト&lt;/a&gt;のポジション編集画面で、チェックボックスをクリックすることでグラフのタイプを切り替える処理（データ更新後リダイレクトしている）をしているのですが、これをAjaxで実現しようとしたところ思わぬエラーに遭遇したので、新規サンプルプロジェクトを作って改めて動作を確認することにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rails _4.1.6_ new chkbox                ←バージョンを指定して新規プロジェクト作成
cd chkbox
rails g scaffold memo body:string chk:boolean
bundle install
rake db:migrate
rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/scaffold_edit.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/scaffold_edit.png&quot; alt=&quot;scaffold 編集画面&quot; title=&quot;scaffold 編集画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　あと、turbolinksを有効にしているとAjaxの動作状況が分かりにくいので&lt;a href=&quot;http://qiita.com/kazz187/items/12737363d62b9c91993c&quot;&gt;このサイト&lt;/a&gt;を参考にしてturbolinksを無効にしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;#app/views/memos/_form.html.erb
 &amp;lt;%= form_for(@memo, remote: true) do |f| %&amp;gt;
   &amp;lt;div class=&quot;field&quot;&amp;gt;
     &amp;lt;%= f.label :body %&amp;gt;&amp;lt;br&amp;gt;
     &amp;lt;%= f.text_field :body %&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;div class=&quot;field&quot;&amp;gt;
     &amp;lt;%= f.label :chk %&amp;gt;&amp;lt;br&amp;gt;
     &amp;lt;%= f.check_box :chk %&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;div class=&quot;actions&quot;&amp;gt;
     &amp;lt;%= f.submit %&amp;gt;
   &amp;lt;/div&amp;gt;
   &amp;lt;div id=&quot;status&quot;&amp;gt;&amp;lt;/div&amp;gt;
 &amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;#app/controllers/memos_controller.rb
  def update
    if @memo.update(memo_params)
      @status = &quot;O.K.&quot;
    else
      @status = &quot;N.G.&quot;
    end
    render
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;#app/views/memos/update.js.erb
$(&#39;#status&#39;).html(&quot;&amp;lt;%= j(@status) %&amp;gt;&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　scaffoldで生成された状態からformに&lt;code&gt;remote: true&lt;/code&gt;を追加してcontrollerをすこし弄ってupdate.js.erbを新規作成しただけですが、フォームのボタンをクリックするとAjax通信でデータの更新処理が完了し、コントローラから渡された文字列をビューに表示出来ます。フレームワークが用意してくれた仕組みを素直に使えば非常に簡単にAjax更新処理が実現できました。&lt;br /&gt;
　そこで今度はフォームのsubmitボタンではなく、チェックボックスをクリックすることで同じことをやろうとしてフォームのcheck_boxの行を&lt;code&gt;&amp;lt;%= f.check_box(:chk, {:onchange =&amp;gt; &quot;this.form.submit();&quot;}, &quot;t&quot;, &quot;f&quot;) %&amp;gt;&lt;/code&gt;と書き換えて、チェックボックスをクリックするとInvalidAuthenticityTokenエラーが出ました。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/invalidauthenticitytoken.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/invalidauthenticitytoken.png&quot; alt=&quot;InvalidAuthenticityTokenエラー画面&quot; title=&quot;InvalidAuthenticityTokenエラー画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　javascriptでsubmitしてしまうとcsrf-tokenが送られないということでしょう。ユーザ認証（ログイン処理）していなくてもPOST（この場合PATCH）リクエストを送る場合は必要なのか？と思いながらフォーム内に&lt;code&gt; &amp;lt;%= hidden_field_tag(:authenticity_token, form_authenticity_token) %&amp;gt;&lt;/code&gt;を記述して再度チェックボックスをクリックすると今度はTemplate is missingエラー。&lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/templatemissing.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/templatemissing.png&quot; alt=&quot;Template Missing エラー画面&quot; title=&quot;Template Missing エラー画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　フォームのPATH指定時にformatを指定してこのように&lt;code&gt;&amp;lt;%= form_for(@memo, url: memo_path(@memo, format: :js), remote: true) do |f| %&amp;gt;&lt;/code&gt;書き換えて、再度チェックボックスをクリックすると、ブラウザにupdate.js.erbファイルの中身が文字として表示されました。  &lt;/p&gt;

&lt;div style=&quot;width:320px; margin: 0 auto;&quot;&gt;

  &lt;p&gt;&lt;a href=&quot;/images/browser_disp.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/browser_disp.png&quot; alt=&quot;Text Response 画面&quot; title=&quot;Text Response 画面&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　ここまで来てもすぐには自分の間違いに気が付きませんでした。上でも自分で書いているけど、javascriptで普通にsubmitしているのだからAjax通信出来ていないようです。remote: true を書くことでフォームがAjax用になっているからform.submit()でAjax通信が出来るような錯覚をしていました。冒頭で思わぬエラーに遭遇したと書いたのはこのことです^^;&lt;br /&gt;
　HTMLのソースを見てみるとフォームには&lt;code&gt;data-remote=&quot;true&quot;&lt;/code&gt;の属性が付加されていたので、onchangeでthis.form.submit()するのではなくjavascriptの関数を作ってその中で&lt;code&gt;form.setAttribute(&#39;data-remote&#39;, true);&lt;/code&gt;とやってcheckboxに無理やり&lt;code&gt;data-remote=&quot;true&quot;&lt;/code&gt;の属性を付加してみましたが効果ありませんでした^^; Railsがどういう仕組みでAjaxを実現しているのかよくわかってませんが、Railsで予定していない使い方であることは確かなようです。 &lt;br /&gt;
　で、form.submit()ではダメだとわかったので次のようにcheckboxのonchange=のイベントを削除して、jQueryでイベントを登録してそのイベント内でAjax通信するようにしました。Ajax送信後のCallback処理もそこに記述したのでjs.erbは使いません。&lt;code&gt;render :text =&amp;gt; @status&lt;/code&gt;とすれば.doneイベント（コールバック関数）のdata引数に@statusの内容が入って来るので。&lt;code&gt;$(&#39;#status&#39;).html(data);&lt;/code&gt;として画面に表示します。これで一応UnobtrusiveなJavascriptというかHTMLとスクリプトの分離が出来たのは目出度いことです。&lt;br /&gt;
　それと、先ほどエラー回避のためにフォーム内のPATHを変更しましたが、_form.html.erbはupdateのときだけでなくcreateのときも使用しているので元に戻しておきます。そうすればチェックボックスでの更新処理はあくまで追加の機能として作成できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;#app/views/memos/_form.html.erb
&amp;lt;%= javascript_tag do %&amp;gt;
jQuery(function ($){
    $(&quot;#memo_chk&quot;).on(&#39;change&#39;, function(){
        body = $(&quot;#memo_body&quot;).val();
        authenticity_token = $(&quot;#authenticity_token&quot;).val();
        $.ajax({
            url: &#39;&amp;lt;%= memo_path(id: @memo.id, format: :js) %&amp;gt;&#39;,
            type: &#39;PATCH&#39;,
            dataType: &#39;html&#39;,
            data: {
                id: &#39;&amp;lt;%= @memo.id %&amp;gt;&#39;,
                authenticity_token: authenticity_token,
                memo: {
                    body: body,
                    chk: (this.checked) ? &#39;t&#39; : &#39;f&#39;
                    }
            }
        }).done(function(data, status, xhr) {
            $(&#39;#status&#39;).html(data);
        }).fail(function(xhr, status, error) {
            alert(&#39;Error Occured(&#39; + error + &#39;)&#39;);
        });
     });
});
&amp;lt;% end %&amp;gt;

&amp;lt;%= form_for(@memo, remote: true, html:{name: &quot;frm_chkbox&quot;}) do |f| %&amp;gt;
  &amp;lt;%= hidden_field_tag(:authenticity_token, form_authenticity_token) %&amp;gt;
  &amp;lt;div class=&quot;field&quot;&amp;gt;
    &amp;lt;%= f.label :body %&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;%= f.text_field :body %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;field&quot;&amp;gt;
    &amp;lt;%= f.label :chk %&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;%= f.check_box(:chk) %&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;actions&quot;&amp;gt;
    &amp;lt;%= f.submit %&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div id=&quot;status&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;#app/controllers/memos_controller.rb
  render :text =&amp;gt; @status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　これで一応checkboxのクリック時は動くのですが、render部分を変更したために更新ボタンをクリックした場合に何も表示されません。はじめはcheckboxイベント用の別メソッドをコントローラに追加したのですが、更新処理自体は同じものなので既存のupdateメソッドをそのまま使って表示の際に分岐するようにします。&lt;br /&gt;
　それからテンプレートとjavascriptは分けておこうと思ってjavascript部分をapp/asset/javascript/ディレクトリに別ファイル（chkbox.js）として移動したのですが、ajax呼び出し時のurl:パラメータが上手く展開されませんでした。拡張子に「erb」を追加すればRailsがちゃんと展開してくれるとどこかに書かれていたので.jsからerb.jsに拡張子を変えてみましたが上手くいきませんでした。&lt;br /&gt;
　それとRails4から新規プロジェクトを作成すると勝手にコントローラ毎のjs.coffeeファイルが作られるので、どうせならそちらに移動しようと思いcoffeescriptに書き換えて&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;最終的には以下のようにしました。  &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot;&gt;#app/assets/javascripts/memos.js.coffee
jQuery ($) -&amp;gt;
    $(&quot;#memo_chk&quot;).on &quot;change&quot;, -&amp;gt;
        id = $(&quot;#memo_id&quot;).val()
        body = $(&quot;#memo_body&quot;).val()
        chk = $(this).is(&quot;:checked&quot;) ? &quot;t&quot; : &quot;f&quot;
        authenticity_token = $(&quot;#authenticity_token&quot;).val()
        $.ajax(
            url: &quot;/memos/&quot; + id + &quot;.js&quot;
            type: &quot;PATCH&quot;
            dataType: &quot;text&quot;
            data:
                id: id
                authenticity_token: authenticity_token
                memo:
                    body: body
                    chk: (if chk then &quot;t&quot; else &quot;f&quot;)
        ).done((data, status, xhr) -&amp;gt;
            $(&quot;#status&quot;).html data
            return
        ).fail (xhr, status, error) -&amp;gt;
            alert &quot;Error Occured(&quot; + error + &quot;)&quot;
            return

        return

    return
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;#app/views/memos/_form.html.erb
&amp;lt;%= form_for(@memo, remote: true, html:{name: &quot;frm_memo&quot;}) do |f| %&amp;gt;↓
  &amp;lt;%= hidden_field_tag(:memo_id, @memo.id) %&amp;gt;↓
  &amp;lt;%= hidden_field_tag(:authenticity_token, form_authenticity_token) %&amp;gt;
  &amp;lt;div class=&quot;field&quot;&amp;gt;↓
    &amp;lt;%= f.label :body %&amp;gt;&amp;lt;br&amp;gt;↓
    &amp;lt;%= f.text_field :body %↓
  &amp;lt;/div&amp;gt;↓
  &amp;lt;div class=&quot;field&quot;&amp;gt;↓
    &amp;lt;%= f.label :chk %&amp;gt;&amp;lt;br&amp;gt;↓
    &amp;lt;%= f.check_box(:chk) %&amp;gt;↓
  &amp;lt;/div&amp;gt;↓
  &amp;lt;div class=&quot;actions&quot;&amp;gt;↓
    &amp;lt;%= f.submit %&amp;gt;↓
  &amp;lt;/div&amp;gt;↓
  &amp;lt;div id=&quot;status&quot;&amp;gt;&amp;lt;/div&amp;gt;↓
&amp;lt;% end %&amp;gt;↓
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;#app/controllers/memos_controller.rb
  def update
    if @memo.update(memo_params)
      @status = &quot;O.K.&quot;
    else
      @status = &quot;N.G.&quot;
    end
    if request.method == &quot;PATCH&quot;
      render :text =&amp;gt; @status
    else
      render template: &quot;memos/update.js.erb&quot;
    end
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;urlパラメータはRailsの_PATH表記から文字列に変更&lt;/li&gt;
  &lt;li&gt;memo.idをview内のhiddenフィールドに保存して、jQueryでその値を取得するように変更&lt;/li&gt;
  &lt;li&gt;Railsのフォームから呼ばれた場合とjQueryから呼ばれた場合でrenderするものを変更する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　これで一応checkboxでの更新＆表示処理が完成しましたが、Railsで生成したフォームからupdateメソッドを呼び出す場合とjQueryからupdateメソッドを呼び出す場合で、画面出力処理が２種類（js.erbと.doneイベント）に分かれています。このサンプルの場合@status変数に格納した文字列を画面に表示するだけの処理ですが、それでも同じ処理をするコードが２ヶ所に存在しているのはよくないでしょう。Javascript側からAjax通信を開始（request.send、$.ajax）するときにコールバック関数としてjs.erbを指定することが出来たり（もしかして出来る？）、RailsのフォームからAjax通信するときにcoffeescript（Javascript、jQuery）のコールバック関数を指定出来たりしたら出力関数を統一出来そうですがそれはそれでややこしそうです。&lt;br /&gt;
　あと、request.methodで分岐していますが、これでいいのかどうか分かりませんしこういうコードは見かけたことが無いような気がします。&lt;br /&gt;
　ということで結局実際に使用するアプリではformから更新ボタンを無くしてjs.erbは使わないやり方に統一することにしました。こんなことになるなら最初からjs.erbは使わずにjQueryとCoffeeScriptで作ることに決めておけばよかったような気がします。&lt;br /&gt;
　それと実際に使用するサイトでやりたかったことはlazy_high_chartsを使ったグラフ表示なのでdataTypeはtextでなくjsonでやりとりしています。とてつもなく&lt;a href=&quot;https://github.com/happyclam/my-posi&quot;&gt;汚いソース&lt;/a&gt;ですが興味のある方はそちらで確認出来ます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;修正前（左）と修正後（右）&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;width:320px; height:240px; float: left;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/images/my-posi-update-old.png&quot; alt=&quot;修正前グラフ編集画面&quot; title=&quot;修正前グラフ編集画面&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;width:20px; height:240px; float: left;&quot;&gt;&lt;/div&gt;

&lt;div style=&quot;width:320px; height:240px; float: left;&quot;&gt;
  &lt;p&gt;&lt;img src=&quot;/images/my-posi-update-new.png&quot; alt=&quot;修正後グラフ編集画面&quot; title=&quot;修正後グラフ編集画面&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div style=&quot;width:320px; height:280px; margin: 0 auto;&quot;&gt;&lt;/div&gt;

&lt;p&gt;　注意点としてこのアプリの場合、編集画面と新規登録画面が別々なのでよかったのですが、説明に使用したサンプルプロジェクトでは編集画面と新規登録画面で同じフォームを利用しているので新規登録画面でcheckboxをクリックしたときはjQueryイベントが発動しないようにするかフォームを分ける必要があると思います。&lt;br /&gt;
　そもそもcheckboxクリックで更新処理というのが特殊なUIなのかもしれませんが…。  &lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;javascriptをcoffeescriptに書き換えるのは&lt;a href=&quot;http://js2coffee.org/&quot;&gt;こちらのサイト&lt;/a&gt;を利用しました &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>http://happyclam.github.io/programming/2014-12-26/csrf</link>
                <guid>http://happyclam.github.io/programming/2014-12-26/csrf</guid>
                <pubDate>2014-12-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>自動でコードレビュー</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;当面は無料で提供されるらしいのでやってみて損はないかな？&lt;/h3&gt;
&lt;p&gt;　セキュリティホールをふせぐという謳い文句に惹かれて&lt;a href=&quot;http://jp.techcrunch.com/2014/04/30/%E3%82%A2%E3%82%AF%E3%83%88%E3%82%AD%E3%83%A3%E3%83%83%E3%83%88%E3%81%AE%E3%80%8Csideci%E3%80%8D%E3%81%AF%E3%80%81%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E8%87%AA/&quot;&gt;「SideCI」&lt;/a&gt;使ってみました。レビューの対象に使ったプロジェクトは&lt;a href=&quot;/programming/2014-10-27/my-posi-chart/&quot;&gt;前回の記事&lt;/a&gt;でRails4にバージョンアップしたばかりの&lt;a href=&quot;https://github.com/happyclam/my-posi&quot;&gt;これ&lt;/a&gt;です。&lt;br /&gt;
　使っている人の感想とか探せばもっと見つかると思いますが自分が参考にしたのは&lt;a href=&quot;http://blog.mah-lab.com/2014/05/14/rails-side-ci/&quot;&gt;ここ&lt;/a&gt;です。中身は&lt;a href=&quot;http://brakemanscanner.org/&quot;&gt;Brakeman&lt;/a&gt;や&lt;a href=&quot;https://github.com/railsbp/rails_best_practices&quot;&gt;Rails Best Practice&lt;/a&gt;などのツールを組み合わせたものらしいけど、統合メニューで操作できるのは確かに有難いかも。色々メニュー項目がありますが自分が使ってみたものについて感想と、指摘された改善点についてざっと書きます。&lt;br /&gt;
　自分が書いたプログラムにどのような難癖を付けられるのか気になる人もいると思いますので参考にしてください(^^)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ニュースフィード&lt;/strong&gt;&lt;br /&gt;
　Test&amp;amp;Deployの機能や通知機能を使う気がない自分にとってはあまり必要がないメニューかも&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Dashboard&lt;/strong&gt;  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;width:320px; height:240px; float: left;&quot;&gt;

  &lt;p&gt;&lt;img src=&quot;/images/dashboard_org_my-posi.png&quot; alt=&quot;ダッシュボード画面初期状態&quot; title=&quot;初レビュー時のダッシュボード画面&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div style=&quot;width:320px; height:240px; float: left;&quot;&gt;

  &lt;p&gt;&lt;img src=&quot;/images/dashboard_new_my-posi.png&quot; alt=&quot;ダッシュボード画面コード改修後&quot; title=&quot;コード改修後のダッシュボード画面&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;div style=&quot;width:320px; height:280px; margin: 0 auto;&quot;&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;セキュリティ&lt;/strong&gt;&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://brakemanscanner.org/docs/warning_types/link_to_href/&quot;&gt;Cross Site Scripting: Link to HREF&lt;/a&gt;&lt;br /&gt;
twitterで呟くための文字列をAPIに渡す以下のコードでセキュリティ警告が出ました。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;pre&gt;&lt;code&gt;&amp;lt;%= link_to(&quot;結果をTwitterでつぶやく&quot;, &quot;https://twitter.com/intent/tweet?text=#{u(@strategy.get_message_str)}&amp;amp;url=&quot; + request.url) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;　たしかRails3以降は自動で文字列をエスケープしてくれるはずと思って検索したら&lt;a href=&quot;http://www.rubylife.jp/rails/template/index7.html&quot;&gt;ここ&lt;/a&gt;にもそう書いてあります。それなのに警告が出るのはおそらくSideCI上の&lt;a href=&quot;https://github.com/railsbp/rails_best_practices&quot;&gt;Rails Best Practice&lt;/a&gt;のオプション設定の問題だと思います。もしそうだとしたらGemfileに使用しているRailsのバージョンが書いてあるのだからオプション設定もそれに合わせてほしいところですが、一応以下のように修正して警告を出さないようにすることは出来ました。&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;&amp;lt;%= link_to(&quot;結果をTwitterでつぶやく&quot;, &quot;https://twitter.com/intent/tweet?text=#{h(@strategy.get_message_str)}&amp;amp;url=#{h(request.url)}&quot;) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;念のためhtmlタグやシングルクォートを出力して確認しましたがh()で囲まなくてもちゃんとエスケープされていました。無駄な時間を取られましたが、まぁ確認する機会を得られたと前向きに考えるべきなのでしょうかヽ(~〜~　)ノ\ ハテ?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;コード品質&lt;/strong&gt;&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://rails-bestpractices.com/posts/148-protect-mass-assignment&quot;&gt;Protect mass assignment&lt;/a&gt;&lt;br /&gt;
このサイト（&lt;a href=&quot;http://qiita.com/aquamikan/items/57c6c95b39f961a18453&quot;&gt;Rails4はattr_accessibleが使えない&lt;/a&gt;）に書いてある通り、Rails4だとエラーになるからRailsをバージョンアップした時に削除したのに、そこが悪いと指摘されました。これはどういうことでしょう？これもセキュリティの警告と同じで&lt;a href=&quot;https://github.com/railsbp/rails_best_practices&quot;&gt;Rails Best Practice&lt;/a&gt;がRails4に対応していないものを使っているのか、オプション設定が厳しめになっているのかそんなところでしょう。よく分からないけど無視することにしました。こうなってくるとコードレビューしたことが混乱を引き起こすという本末転倒になってる気もしますが^^;本気でこのツールを使う気があるなら運営元に質問すればおそらく解決するでしょう。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://rails-bestpractices.com/posts/7-move-model-logic-into-the-model&quot;&gt;Move Model Logic into the Model&lt;/a&gt;&lt;br /&gt;
自分が納得したとこだけ修正しました。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://rails-bestpractices.com/posts/72-remove-empty-helpers&quot;&gt;Remove empty helpers&lt;/a&gt;&lt;br /&gt;
中身が空のヘルパーファイルがありますよ。自動生成したくなかったら&lt;code&gt;config.generators.helper = false&lt;/code&gt;しておけということですね。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://rails-bestpractices.com/posts/27-replace-instance-variable-with-local-variable&quot;&gt;Replace instance variable with local variable&lt;/a&gt;&lt;br /&gt;
納得。Rails2の頃からのソースで、よく理解していないまま書いていたコードがそのままでした。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://rails-bestpractices.com/posts/86-restrict-auto-generated-routes&quot;&gt;restrict auto-generated&lt;/a&gt; routes strategies (except: [:new])&lt;br /&gt;
以下のように定義していたルートに対して、&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;pre&gt;&lt;code&gt;resources :strategies do
  collection do
    get :children
  end
  member do
    get :paint
    post :copy
  end
  resources :positions, :only =&amp;gt; [&quot;destroy&quot;, &quot;update&quot;, &quot;create&quot;, &quot;edit&quot;]
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;　「newが使われていませんよ」と指摘してくれたわけです。これはいいかも。以下のように修正しました。&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;resources :strategies, :except =&amp;gt; [&quot;new&quot;] do
&lt;/code&gt;&lt;/pre&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://rails-bestpractices.com/posts/62-simplify-render-in-controllers&quot;&gt;Simplify render in controllers&lt;/a&gt;&lt;br /&gt;
このプロジェクトはModel用のテストスクリプト（Model用のspecファイル）しか書いていなくて、Railsのバージョンアップをした時に以下のようなRailsが出力する雛形のコードに対するテストが不十分でしたが、バグ出しツールとして役に立ちました。saveに失敗したら’new’テンプレートをrenderするとコードでは書いていますが、newテンプレートは存在していませんでした。但しファイルが存在しないことを指摘してくれたわけではありません。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;pre&gt;&lt;code&gt;  respond_to do |format|
    if @user.save
      format.html { redirect_to @user, notice: &#39;User was successfully created.&#39; }
      format.json { render action: &#39;show&#39;, status: :created, location: @user }
    else
      format.html { render action: &#39;new&#39; }
      format.json { render json: @user.errors, status: :unprocessable_entity }
    end
  end
&lt;/code&gt;&lt;/pre&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://rails-bestpractices.com/posts/61-simplify-render-in-views&quot;&gt;Simplify render in views&lt;/a&gt;&lt;br /&gt;
部分テンプレートを使うとき&lt;code&gt;:partial&lt;/code&gt;というオプションを使わなければならない機会っていうのは無いってことなのか？と、新たな疑問が湧きましたが、リンク先に書いてある通りに修正しました。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://rails-bestpractices.com/posts/60-remove-trailing-whitespace&quot;&gt;remove trailing whitespace&lt;/a&gt;&lt;br /&gt;
行末のスペースを削除しろってことだけど、これは細かい！まぁチームで開発するときには一応統一しておいたほうがいいでしょうね。&lt;br /&gt;
あと、一つのファイルで最初に見つかった行だけを指摘するみたいなので、他の場所にも存在しないかよく確認してからcommitしましょう。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;remove unused methods&lt;br /&gt;
また使うかもしれないから残しておこうなんて思ったコードが結構残っていました。自分一人のプロジェクトなので他人を混乱させる心配はないのですが、せっかくgitでバージョン管理しているのだからバッサリ削除すべきですね。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;テスト &amp;amp; デプロイ設定&lt;/strong&gt;&lt;br /&gt;
　自分が使用しているtwitterAPI用の環境変数とかSSH Keyを登録するのが不安なので使用するのは止めておきました。まぁherokuではなんの警戒もせずtwitterの認証コードを環境変数にセットして使っているのに、なんで使わないのかと問われれば返答に困りますが、仕事で使う機会があれば使ってみたいと思います。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

</description>
                <link>http://happyclam.github.io/programming/2014-11-05/sideci_review</link>
                <guid>http://happyclam.github.io/programming/2014-11-05/sideci_review</guid>
                <pubDate>2014-11-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>gruffからlazy_high_chartへ</title>
                <description>&lt;h3 id=&quot;rails3rails4&quot;&gt;Rails3からRails4への移行&lt;/h3&gt;
&lt;p&gt;　一応&lt;a href=&quot;http://my-posi.herokuapp.com/&quot;&gt;herokuで公開&lt;/a&gt;してますがほとんど誰も使っていないようだし(^^)自分が使うときはローカル環境で動かすだけなのでRails4に移行する必要も無いのですが、&lt;a href=&quot;/project/2014-05-30/tweetwatch/&quot;&gt;TweetWatch&lt;/a&gt;を作ったときにLazyHighChartが気に入ったのでグラフ描画機能を変更する目的でついでにRailsもバージョンアップしました。Rails3からRails4への以降に関しては特に大きな変更は必要なかったのでgruffからlazy_high_chartへの移行に関して書きます。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;使い方&lt;/h3&gt;
&lt;p&gt;　その前に&lt;a href=&quot;https://www.ruby-toolbox.com/categories/graphing&quot;&gt;ここのサイト&lt;/a&gt;でいろんなグラフ描画ツールが紹介されています。以前googlechartsは試したことがあるのですが、何か気に入らないことがあってgruffに戻しました。でも、その理由が何であったのか忘れてしまいました(^^)  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Gemfileに追記
　&lt;code&gt;gem &#39;lazy_high_charts&#39;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Controllerでインスタンス変数にデータをセット&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;      @graphs = LazyHighCharts::HighChart.new(&quot;graph&quot;) do |f|
        f.chart(:type =&amp;gt; &quot;line&quot;)
        f.title(:text =&amp;gt; strategy.name)
        f.tooltip(:pointFormat =&amp;gt; &#39;{series.name}: {point.y}&amp;lt;br /&amp;gt;&#39;,
                  :shared =&amp;gt; true,
                  :useHTML =&amp;gt; true,
                  :style =&amp;gt; {margin: 0}
                  )
        f.xAxis(:title =&amp;gt; {:text =&amp;gt; &quot;先物価格&quot;}, :categories =&amp;gt; labels)
        f.yAxis(:title =&amp;gt; {:text =&amp;gt; &quot;収益&quot;})
        f.series(:name =&amp;gt; &quot;満期時計&quot;, :data =&amp;gt; total_data)
        f.series(:name =&amp;gt; &quot;理論値計&quot;, :data =&amp;gt; bm_data)
        distinct.each do |d|
          f.series(:name =&amp;gt; d.keys[0], :data =&amp;gt; d.values[0])
        end
      end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;Viewに出力&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;chart&quot; style=&quot;width:640px; height:480px; margin:0 auto;&quot;&amp;gt;
&amp;lt;%= high_chart(&quot;graph&quot;, @graphs) %&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　gruffを使っていた時のコードをほぼそのまま流用できましたが一点だけ引っかかったのが一つのキャンバスに複数の折れ線グラフを描画する方法。&lt;br /&gt;
　&lt;a href=&quot;http://www.highcharts.com/docs/getting-started/your-first-chart&quot;&gt;本家サイトのサンプル&lt;/a&gt;を見てHashの配列を渡すのかと思いきや上のコードのようにseriesメソッドを複数回呼ぶようにしないとグラフを描画してくれませんでした。本家のサンプルはもちろんそのまま動きましたので、これはlazy_high_chart gemの仕様ということでしょう。普通の人は引っかからないのかぁ？たぶん普通はgemのヘルプの方を見るんですね。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;グラフ描画ツールを変えたことによる影響&lt;/h3&gt;
&lt;dl&gt;
  &lt;dt&gt;画像（ドット絵）からベクターデータへ&lt;/dt&gt;
  &lt;dd&gt;gruffを使っていた以前のバージョンはpng画像を動的に生成していたのですが、lazy_high_chartではcanvasオブジェクトへの描画になるので、高速に描画出来るようになりました。以前は画像生成という重たい処理だったのでherokuの無料枠で運用していると処理が重すぎて画像生成に失敗してグラフ画像が表示されないことがありましたが、そういうことがなくなりそうです。それとクライアント側でJavaScriptで描画されたベクターデータなので、ブラウザを拡大・縮小するとそれに伴って画質を落とすこと無くグラフを拡大・縮小させることも出来るようになりました。まぁこのサイトの場合、画像を拡大・縮小しても縮尺を変えない限りあまり意味は無い（縮尺を変える機能はすでにある）ので、とりあえず今まで通りVGAサイズ（640×480）にしていますが、&lt;s&gt;サイズ変更するとしてもCSSで変更出来るから楽です。&lt;/s&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;ただ、古いブラウザ（HTML5に対応していない）だとグラフが描画出来ないことがあるかもしれません。&lt;/dd&gt;
  &lt;dt&gt;損益分岐線を描画する必要が無くなった&lt;/dt&gt;
  &lt;dd&gt;gruffの現状はよく知らないのですがgruffを使って開発した当初はメンテが行き届いていないようで縦軸のメモリを調整するのが簡単には出来なかったので、損益分岐線（0の値）のグラフをわざわざ自前で描画していたのですが、その必要がなくなりグラフがすっきりしました。  &lt;/dd&gt;
&lt;/dl&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;gruff&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;lazy_high_chart&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/my_posi_ex1.png&quot; alt=&quot;gruffの画像1&quot; /&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/my_posi_chart1.png&quot; alt=&quot;lazy_high_chartの画像1&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/my_posi_ex2.png&quot; alt=&quot;gruffの画像2&quot; /&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/images/my_posi_chart2.png&quot; alt=&quot;lazy_high_chartの画像2&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　それとグラフ上にマウスを持ってくるとグラフの数値をポップアップで表示してくれるのもいいですね。  &lt;/p&gt;

&lt;div style=&quot;width:320px; height:240px; margin:0 auto;&quot;&gt;

  &lt;p&gt;&lt;img src=&quot;/images/my_posi_chart3.png&quot; alt=&quot;マウスオーバーによるポップアップの画像&quot; /&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　また、ググればいろいろ出て来ますが、gruffをruby1.9.3で使用するためとかLineメソッドを使うためにパッチを当てたりしなければいけませんでしたが、そういう無駄な作業からも開放されました。まあRubyだからモンキーパッチで簡単に出来る作業ではありましたが。&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;cssでwidthが変化するのでてっきり反映出来ているものと思っていましたが、&lt;a href=&quot;http://api.highcharts.com/highstock#chart.height&quot;&gt;highchartsのドキュメント&lt;/a&gt;に書いてある通りデフォルトの高さに関しては400pxのようです。ソースコードは修正済みです。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>http://happyclam.github.io/programming/2014-10-27/my-posi-chart</link>
                <guid>http://happyclam.github.io/programming/2014-10-27/my-posi-chart</guid>
                <pubDate>2014-10-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>三目並べ（tic tac toe）で遊んでみた（続き）</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;先読み手数を制限しても必勝の結論は出ないはず&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/software/2014-09-23/tictactoe_arrange/&quot;&gt;前回の記事&lt;/a&gt;で自分が作ったプログラムは千日手対応をしていないから先手必勝の結論が出ても信用できないって書きましたが、よく考えてみたら千日手対応していなくても先手必勝の評価が出てくるってことは、ArrangeLineってゲームが先手必勝であるか検証に使った自分のプログラムがバグっているかのどちらかであると気づきました。評価関数が返す値は一つの局面に関して勝ちか負けか引き分けかの三種類にしか分けていないので、千日手の局面は引き分けの一局面として評価しているはずで、引き分けに成り得るなら後手は引き分けになる手を選択し先手勝ちの評価にはならない。スタンダードの三目並べを調べた場合と違って、11手読みという手数を限定して先読みをしているわけだからそんなこともあるかと流してしまったけど、読み切っていないから勝ちか負けか決められない（引き分けになる）という評価が返ってくることはあっても、引き分けがあり得るのに必勝・必敗の評価を返してくるというのはバグっている可能性が高いのではないか。でも一応スタンダードな三目並べでは問題なさそうだし、バグの見当が付かなかったのでまずは先に千日手対応をしてみることにしました。&lt;br /&gt;
　その前にArrangeLineをダウンロードして自分のプログラムと対戦させて確認したのですが、ArrangeLineのLevel2で自分のプログラムが先手なのに千日手になり決着が付かないケースがありました。実際に千日手になることを確認していたためArrangeLineは双方最善手を打てば千日手になるゲームだと思ってしまったのですが、繰返しますが千日手になるのであればやっぱり先手必勝の結論が出るのはおかしい。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;千日手対応&lt;/h3&gt;
&lt;p&gt;　先読みの最中に過去に現れた局面が一定周期で続いて現れるかどうかを判定するってプログラムが重くなりそうだし、難しそうな気がして対応する気がしなかったのですが、よく考えてみると先読みの最中である必要は無く、実際に打った一手だけを局面毎に保存しておいて、先読みを開始する一手目の時だけ過去に同一局面があったかどうかを調べるだけで済みそうです。これなら重くなることもありません。&lt;br /&gt;
　※&lt;a href=&quot;/software/2014-09-23/tictactoe_arrange/&quot;&gt;前回の記事&lt;/a&gt;で必ず千日手になることを証明するのは難しいと書いたのは、完全読み切りが出来ない場合（将棋もその一つ）はたしかにその通りですが、先手必勝あるいは後手必勝という結論を返してくるということは完全読み切りが出来ているということなので、その時点で千日手は結論に関係無かったと言うことです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #過去に同一局面があったかどうか判定
  def check_dup(sengo)
    temp = self.dup
    temp.unshift(sengo)
    return @duplication.has_key?(temp.hash)
  end
  #局面データのハッシュ値だけ保存
  def set_dup(sengo)
    temp = self.dup
    temp.unshift(sengo)
    @duplication[(temp).hash] = temp
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　局面データと手番データからハッシュ値を生成して保存するメソッドと、そのハッシュ値を検索するメソッドを追加。&lt;br /&gt;
　過去に評価した局面を再現したりその時の評価値を再利用したりするわけでは無く、過去に同一局面があったかどうかを判断するだけなので保存するのはハッシュ値だけでもいいのですが、一応局面と手番のデータを保存しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        if board.check_dup(turn)
          temp_v = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　そして局面を評価した後に過去に現れた局面なら強制的に評価値を引き分け（DRAW=0）にする処理を追加しただけです。引き分けでなく同じ局面を再現させたら負けとすることも考えられますが、それだとArrangeLineと対戦させたときにこのソフト側だけが不利なルールで戦うことになるのでよくありません。その他にも評価値を少し下げるとかいろいろ奥が深そうですが、将棋のように何らかの千日手に関するルールが無い限りは引き分けの評価（0）でよさそうです。&lt;br /&gt;
　ということで、同一局面を出現させたら引き分けという評価を返す状態で、前回の記事同様に一手打った状態から検証プログラムを動かしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; |1|2|3|
 |4|5|6|
 |7|X|9|
2手目: 1 評価値: 9
2手目: 2 評価値: 9
2手目: 3 評価値: 9
2手目: 4 評価値: 9
2手目: 5 評価値: 9
2手目: 6 評価値: 9
2手目: 7 評価値: 9
2手目: 9 評価値: 9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　前回と同じく初手に辺の部分に打てばやっぱり先手必勝になるという結果になります。そして実際のandroidアプリと対戦させて見たところ、以前は先手なのに必ず千日手になっていたケースでも千日手を避けるようになり、先手の場合に限っては必ず勝利することが出来るようです。なのでArrangeLineは先手必勝のゲームと言っていいでしょう。もし何か間違いに気づいた人がいれば連絡して下さい。景品を差し上げます…ウソです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;自作プログラムの対戦状況&lt;/em&gt;  &lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;先手・後手\ArrangeLineのLevel&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Level 1&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Level 2&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Level 3&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;自作プログラムが先手&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;自作プログラムが後手&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;初手が辺&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;負け&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;^&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;初手が辺以外&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;千日手&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　ArrangeLineは乱数を使っているようなのでこの表の結果はいつも同じではないはずですが、自作プログラムが先手の場合はいつも勝ちます。それと千日手対応したのに千日手になることがあるのは自作のプログラムが後手で、負けるはずなのにArrangeLine側が初手で辺の部分（2,4,6,8）を取らなかったために起きる現象です。自作ソフト側としては後手なので勝てないから千日手に持っていくしか無い状況ってことです。これは&lt;a href=&quot;/software/2014-09-23/tictactoe_arrange/&quot;&gt;前回の記事&lt;/a&gt;で初手から検証した時に以下の結果になったことと符合します。初手で辺の部分を取らない場合は、勝てるとは限らないということです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; |1|2|3|
 |4|5|6|
 |7|8|9|
1手目: 1 評価値: 0
1手目: 2 評価値: 9
1手目: 3 評価値: 0
1手目: 4 評価値: 9
1手目: 5 評価値: 0
1手目: 6 評価値: 9
1手目: 7 評価値: 0
1手目: 8 評価値: 9
1手目: 9 評価値: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;先手・後手が決まった段階で勝負は既に決まっている&lt;/h3&gt;
&lt;p&gt;　androidアプリのArrangeLine側は乱数を使っているようなので必ず再現するわけではないのですが、私のプログラムが先手の場合は必ず勝つのですが、後手の場合は最短の5手で負ける場合があります。  &lt;/p&gt;

&lt;div style=&quot;width:240px; height:287px; margin:0 auto;&quot;&gt;

  &lt;p&gt;&lt;img src=&quot;/images/arrangeline.png&quot; alt=&quot;負け画像&quot; /&gt;  &lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;　先手がリーチ（あと一手でラインが揃う）状態になっても揃うことを防ごうとしないことがあるのです。最初はバグか？と思いましたが、これもよく考えてみると私のソフト側は後手で尚且つ初手で辺の部分を取られていると、どう足掻いても負けることがわかっているので勝つことを諦めているわけです。&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;以前の記事&lt;/a&gt;に通常ルールの三目並べソフトが初手に有利なはずの真ん中を取らないことを書きましたが、初手にどこを取っても引き分けになることを読み切っている（初手にどこを選んでも引き分けの評価値が返ってくる）ので、1（左上隅）の場所から順に読み始めて最後に評価した9の場所（右下隅）を取る現象と同じです。ArrangeLineでも初手に辺の部分を取られているとその後どういう変化をしようが負けることがわかっている（先手勝ちの評価値MAX_VALUE=9が返ってくる）ため、相手がリーチをかけていようがいまいが関係なくたまたま最後に評価した場所を選んでしまいます。一回リーチを防いでも負けることが分かってるのですから…。&lt;br /&gt;
　この現象を防ぐにはどうすればいいのか、前にも書きましたが将棋にしろオセロにしろ局面の形勢判断用の評価関数と読み切り用（将棋で言えば詰将棋用）の評価関数を分けて使用するか、リーチを優先的に防ぐ処理（将棋で言えば王手放置を避ける）を用意すればいいのでしょうが、相手が間違えない限り手数を伸ばすだけで、勝敗は既に決まっています。将棋と違って完全読切りが完了しているゲームでこの処理を入れるのは虚しいだけでしょう。ただ、このArrangeLineに関して言えばandroid端末用のゲームなので完全読切りするにはマシンパワーの制限で難しいからそれなりに形勢判断用の評価関数を工夫する意味はあると思います。自分はあまり興味湧きませんが…&lt;br /&gt;
　今回の記事の中で「よく考えてみると」と何度も書いてますが、この手のソフトは自分の意図通りに動いているのかうまくいっていないのか結構悩まされます。最後の例でもそうですが、考えて納得して改良したあとにいきなり5手で負けたりするとさっぱり意味が分からなくなりました。でも、特別なアルゴリズムを使わなくても完全読み切りが出来るわけですから、将棋なんかに較べたら作り易いゲームではあると思います。今回、千日手回避のために他にもいろいろ試行錯誤したのでそれらの手法を使って将棋作りに活かしてみようと思っています。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/software/2014-10-04/arrange_line</link>
                <guid>http://happyclam.github.io/software/2014-10-04/arrange_line</guid>
                <pubDate>2014-10-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>三目並べ（tic tac toe）で遊んでみた</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;いろんなテストケース&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;以前作った三目並べのプログラム&lt;/a&gt;でいろいろ遊んでみました。&lt;a href=&quot;https://github.com/happyclam/tictactoe_ruby&quot;&gt;githubに公開&lt;/a&gt;しているので暇な人はソースをいじって試すこともできます。但し、短いソースとはいえ自分でコードを読んで編集する必要があります。もともとは対戦用プログラムとして作ったものですが、テスト用に9ヶ所の升目を順に取っていってその時の評価値を表示するように作った関数を使って、いろんなケースでプログラムの検証をしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NOUGHT = -1
CROSS = 1
DRAW = 0
MAX_VALUE = 9
MIN_VALUE = -9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　上記のように定数を定義しています。CROSSは×（バツ）NOUGHTは◯（マル）でCROSSが先手です。評価関数は先手勝ち（MAX_VALUE）、後手勝ち（MIN_VALUE）、引き分け（DRAW）の3値の内どれかを返すようになっています。&lt;br /&gt;
　テスト用の関数は先手から交互に1～9の升目を取っていって、その時に先読み関数から返ってくる評価値を順に画面に表示していくようになってます。三目並べはパスが無いので奇数手目は先手×で偶数手目は後手◯になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo@bar:~$ ruby play.rb 

 |1|2|3|
 |4|5|6|
 |7|8|9|
1手目: 1 評価値: 0
1手目: 2 評価値: 0
1手目: 3 評価値: 0
1手目: 4 評価値: 0
1手目: 5 評価値: 0
1手目: 6 評価値: 0
1手目: 7 評価値: 0
1手目: 8 評価値: 0
1手目: 9 評価値: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　1手目に1の場所（先手は×）を取れば0の評価値が返ってきたという意味ですが、どこの場所を取っても評価値0が返ってきてます。どこの場所を取っても引き分けになると言うことを示していますが、これではプログラムがうまく動いているかどうかわかりません。初手に先手が5を取った局面から先読み開始してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; |1|2|3|
 |4|X|6|
 |7|8|9|
2手目: 1 評価値: 0
2手目: 2 評価値: 9
2手目: 3 評価値: 0
2手目: 4 評価値: 9
2手目: 6 評価値: 9
2手目: 7 評価値: 0
2手目: 8 評価値: 9
2手目: 9 評価値: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　2手目に後手◯が奇数の場所1、3、7、9（隅）を取った場合の評価値はすべて0になっています。お互いに最善手を選択すれば引き分けになるということです。2手目に後手○が2、4、6、8の辺部分を取るとすべて最大値（9）の評価が返ってきています、その後双方が最善を尽くせば先手が勝つということです。最小値（-9）が返ってくれば後手が勝つという意味です。&lt;br /&gt;
　そういえば三目並べでは初手で真ん中を取って、相手が2手目で隅（角）以外の部分を取ると先手が勝つことを思い出しました。念のため確認してみましょう。&lt;br /&gt;
　初手で真ん中を取り、2手目で辺を取った場合と隅を取った場合を順に確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1手目5、2手目に辺（8）の場合：
       
 |1|2|3|
 |4|X|6|
 |7|O|9|
3手目: 1 評価値: 9
3手目: 2 評価値: 0
3手目: 3 評価値: 9
3手目: 4 評価値: 9
3手目: 6 評価値: 9
3手目: 7 評価値: 9
3手目: 9 評価値: 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　3手目に先手が2の場所を取った場合以外は先手が勝つ（評価値が9）となります。MIN-MAX法（αβ法）は互いに最善手を打つことが前提となっていますので、2手目で後手◯が辺を取った後、先手が最善手を打てば勝つことが出来るのですが、間違えて2の場所を取ると勝てないことを示しています。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;　ちなみに2手目に辺を取るとなぜ後手◯が負けるのかというと、先手が3手目に隅を取れば下図のように２ヶ所同時に、あと一つで揃う局面に出来るからです。後手は２ヶ所同時に防ぐことが出来ません。

|X| |O|
| |X| |
|X|O| |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1手目5、2手目に隅（3）の場合：

 |1|2|O|
 |4|X|6|
 |7|8|9|
3手目: 1 評価値: 0
3手目: 2 評価値: 0
3手目: 4 評価値: 0
3手目: 6 評価値: 0
3手目: 7 評価値: 0
3手目: 8 評価値: 0
3手目: 9 評価値: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　すべてのケースで引き分けになることを示していて、最初のテスト結果と符合しますので、一応プログラムは正常に動作しているようです。&lt;br /&gt;
　あと、&lt;a href=&quot;/software/2014-09-16/ab_method/&quot;&gt;前回の記事&lt;/a&gt;にも書きましたが、αβ法がうまく機能していれば最終的な評価値の結果がMIN-MAX法と一致するはずです。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      if (temp_v &amp;gt;= value &amp;amp;&amp;amp; turn == CROSS) 
        value = temp_v 
        locate = i
#        break if threshold &amp;lt; temp_v
      elsif (temp_v &amp;lt;= value &amp;amp;&amp;amp; turn == NOUGHT)
        value = temp_v 
        locate = i
#        break if threshold &amp;gt; temp_v
      end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　上記のようにプログラム中の枝刈り部分のコード２行をコメントにして、上記のテスト結果と同じ結果が得られましたので枝刈りも正常に機能しているようです。ちなみに評価関数が呼び出される回数を数えて見たところ、すべての手を読み切るまでにMIN-MAX法では255,168回、αβ法では100,645回でした。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;ちょっと変わった三目並べ&lt;/h3&gt;
&lt;p&gt;　Twitter使っていると&lt;a href=&quot;https://androider.jp/official/app/4f0d853da0473562/&quot;&gt;「ちょっと変わった三目並べ Arrange Line」&lt;/a&gt;というアプリを見かけたのでルールを確認してみると、なんと今弄っている三目並べをほとんどそのまま流用出来そうじゃないですか？なんか神様から使命を授かったような気になったので作って見ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Board.initializeに追加
    @c_q = Array.new
    @c_bk = Array.new
    @n_q = Array.new
    @n_bk = Array.new
#Board.initに追加    
    @c_q.clear
    @c_bk.clear
    @n_q.clear
    @n_bk.clear
#Boardクラスに追加
  def set(i, v)
    if self[i]
      raise &quot;Error!&quot;
    else
      self[i] = v
    end
    if v == CROSS
      @c_q &amp;lt;&amp;lt; i
      if @c_q.size &amp;gt; 3
        idx = @c_q.shift
        @c_bk.push([idx, self[idx]])
        self[idx] = nil
      end
    elsif v == NOUGHT
      @n_q &amp;lt;&amp;lt; i
      if @n_q.size &amp;gt; 3
        idx = @n_q.shift
        @n_bk.push([idx, self[idx]])
        self[idx] = nil
      end
    end
  end

  def unset(v)
    if v == CROSS
      if @c_bk.size &amp;gt; 0
        h = Hash[*(@c_bk.pop)]
        temp = h.each{|k, v| self[k] = v}
        @c_q.unshift(temp.keys[0])
      end
      idx = @c_q.pop
    elsif v == NOUGHT
      if @n_bk.size &amp;gt; 0
        h = Hash[*(@n_bk.pop)]
        temp = h.each{|k, v| self[k] = v}
        @n_q.unshift(temp.keys[0])
      end
      idx = @n_q.pop
    end
    self[idx] = nil
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　評価関数や画面出力部分はまったく変更する必要は無く、Boardクラスに指し手を記憶するための配列を追加し、setメソッドとunsetメソッドを追加して、今まで&lt;code&gt;board[n] = CROSS&lt;/code&gt;等、配列に値を代入していたところを&lt;code&gt;board.set(n, CROSS)&lt;/code&gt;のように変更し、&lt;code&gt;board[n] = nil&lt;/code&gt;としていたところを&lt;code&gt;board.unset(CROSS)&lt;/code&gt;に変えるだけです。&lt;br /&gt;
　で、初手から読み切りさせて見たところ、敢えなくスタックオーバーフロー。でもこれは将棋でいうところの千日手になるケースがあるのだろうと思ったので、先読み手数を制限して9手読み、10手読みと試していきました。すると、10手読みのところまでは三目並べと同じように全部0の評価だったのですが、11手読みまで増やすと以下のような結果が出ました。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt; |1|2|3|
 |4|5|6|
 |7|8|9|
1手目: 1 評価値: 0
1手目: 2 評価値: 9
1手目: 3 評価値: 0
1手目: 4 評価値: 9
1手目: 5 評価値: 0
1手目: 6 評価値: 9
1手目: 7 評価値: 0
1手目: 8 評価値: 9
1手目: 9 評価値: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　初手に偶数の場所つまり辺の部分に先手が着手すれば先手が勝つことが出来ると言ってます。普通の三目並べと違って真ん中を取るのはよくないようです。&lt;br /&gt;
　あと、10手読みまでは三目並べと同じように評価0ばかりだったと言っても、三目並べの場合は完全に読み切った上で引き分けになることを示しているのですが、この新しいルールの三目並べは先読み手数を制限しているので、制限手数内で先読みした限りでは勝負がつかないということを示しているだけです。&lt;br /&gt;
　次に辺の部分に初手を打てば勝てるということなのでその局面から先読み開始してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; |1|2|3|
 |4|5|6|
 |7|X|9|
2手目: 1 評価値: 9
2手目: 2 評価値: 9
2手目: 3 評価値: 9
2手目: 4 評価値: 9
2手目: 5 評価値: 9
2手目: 6 評価値: 9
2手目: 7 評価値: 9
2手目: 9 評価値: 9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　全部先手勝ちとなりました。これで「ちょっと変わった三目並べ（Arrage Line）」というゲームは先手必勝のゲームであることが確認出来たと早合点して&lt;a href=&quot;https://twitter.com/SappierBoy/status/512377344582225920&quot;&gt;Twitterにも呟いてしまった&lt;/a&gt;んですが、千日手（同じ手の繰り返しで局面が進まない状態）に対応していないのでなんとも言えません。どうもこのゲームは互いに最善手を打ちつづけると千日手になるような気もしますが、それを証明するのは結構難しそうです。&lt;br /&gt;
　本来の三目並べやオセロゲームは指し手が盤上を埋めていき、選択肢がだんだん減っていくので読みやすくなっていきますが、このArrangeLineや将棋は盤上のスペースを埋めていくわけでは無いので、先読みプログラムを作る方は大変です。結局、前回の記事同様先読みプログラム作りの大変さを再認識する結果になってしまいました。おもしろい題材なのでArrangeLineについてはまた何か発見があれば記事を書いてみようと思います。&lt;/p&gt;

&lt;hr /&gt;

</description>
                <link>http://happyclam.github.io/software/2014-09-23/tictactoe_arrange</link>
                <guid>http://happyclam.github.io/software/2014-09-23/tictactoe_arrange</guid>
                <pubDate>2014-09-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>MIN-MAX法とαβ法</title>
                <description>&lt;h3 id=&quot;min-max&quot;&gt;MIN-MAX法&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/tree_min-max.png&quot; alt=&quot;min-max法&quot; style=&quot;width: 800px; vertical-align:middle;&quot; /&gt;
　MIN-MAX法とは、オセロゲームなどのある局面で先手、後手、どちらが有利か判断する評価関数を用意し、先手、後手が互いに最善手を打つと仮定して先読みを行うアルゴリズムです。先手をプラス方向の値（MAX値）後手をマイナス方向の値（MIN値）で評価することが多いようです。&lt;br /&gt;
　上の図はオセロゲームで3手読みをする場合の例ですが、◯図形はオセロの一局面（ノード）で□内の数字が3手目を打ったときの評価値になります。3手目と書いてあるノードは先手が打つことが出来るすべての手を順番に評価していくためのループで、2手目となっているノードが後手が打つことが出来るすべての手を順番に評価していくためのループです。実際のプログラムではこのツリー構造を左から右の順に局面を評価していくことになります。&lt;br /&gt;
　全体図は1手目を先手が打った場合に後手が2手目を打つことが可能な手が2通りあり、その後先手が打てる手がそれぞれ3通り、2通りあることを表しています。まず左側のtreeを見ていくと、3手目に先手が打った局面で評価関数を呼ぶと15、22、-5という3つの評価値が得られたということです。で、先手は自分にとって最善手である一番評価値が高い22の局面を選び、取りあえずその評価値と指し手を記憶しておきます。次のノードで同様に3手目まで手を進めて14、25、9、33という4つの評価値を得て先手が選んだ最大値33と先ほどの評価値22を比較して、後手は自分に取って最善手である小さい方の22を選ぶという具合です。先手（3手目）では最大値、後手（2手目）では最小値を選択するというやり方で進めて、評価値が18という左側のtreeの2手目の評価が完了します。次に、右側のtreeでも先手（3手目）は最大値、後手（2手目）は最小値を選び-11という評価値が残ります。最終的には18と-11を比較して先手は大きい方の18を選び、1手目の先手の評価が完了します。&lt;br /&gt;
　最終的に指し手を決めるまでに、3手目の局面の数の分だけ評価関数を呼び出したことになるので、1手目の評価が完了するまでに14局面評価したことになります。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;αβ法&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/tree_ab-method.png&quot; alt=&quot;αβ法&quot; style=&quot;width: 800px; vertical-align:middle;&quot; /&gt;
　αβ法はMIN-MAX法と同じ結果を得られるにもかかわらず、局面を枝刈りすることで時間短縮が出来るというすばらしいアルゴリズムです。なぜ局面の枝刈り（評価の回数を減らす）をしながら同じ結果が得られるのか見ていきましょう。&lt;br /&gt;
　まずMIN-MAX法と同様に左の3つの評価値から22という評価値が得られます。この22を基準値として読み進めると14、25という評価値を得ますがこの25という評価値を得た時点で、このノードは選ばれないことがわかります。なぜなら一つ上の後手のノードでは常に最小値を選ぶからです。この先読み進めて25より大きい評価値を得られたとしても一つ上の後手のノードで、22より大きな値が選ばれることはないので、ここで読みを打ち切っても問題ない（MIN-MAX法と同様の結果が得られる）わけです。これをβカットと言うそうです。その後同じく22を基準値として、次のノードに移り18という評価値を得ますが、18は22より小さいのでそのまま読み進みます。そして18と-12の大きい方である18が選ばれ、後手のノードで18と基準値の22を比較し小さい方の18が選ばれます。これで2手目の候補手が一つ決まりました。&lt;br /&gt;
　次に右サイドのtreeに移りますが、1手目の候補手から読み直すので、基準値は無く新たに末端ノードの3手目を順に評価することになります。得られた8と16を比較して先手（3手目）では最大値である16が選ばれます。16という後手の候補手が一つ得られたわけですが、後手の候補手はより小さい評価値が選ばれるわけですから、今のノードから分岐する3手目をいくら読み進んでいっても16以上になることはないということがわかります。そして一つ上の1手目の先手のノードでは先程の評価値18と比較して大きな方が選ばれることが分かっているわけです。つまり18より小さい評価値が後手（2手目）の候補手に一つでも現れた時点で、この後手のノードから分岐する先の手は読む必要がないことがわかります。これをαカットと言うそうです。ということで先程の18と今読みを打ち切った16を比較して、MIN-MAX法と同じ18が選ばれます。&lt;br /&gt;
　この例ではMIN-MAX法と比較して評価関数を呼び出す回数を5回減らすことが出来ただけで、それほど有り難みが伝わらないかもしれませんが、例えば一局面で選択できる手が3手だったとして3手先まで読むとMIN-MAX法だと&lt;script type=&quot;math/tex&quot;&gt;3^3&lt;/script&gt;回（27回）評価関数を呼ぶことになりますが、評価する局面の順番が理想的な場合αβ法だと&lt;script type=&quot;math/tex&quot;&gt;3^\frac{3}{2}&lt;/script&gt;回（約6回）で済むそうです。&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;前回記事&lt;/a&gt;で紹介した&lt;a href=&quot;https://github.com/happyclam/tictactoe_ruby&quot;&gt;三目並べのプログラム&lt;/a&gt;の例の場合、まさにこれぐらいの高い効果が得られたと思います。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;オセロと将棋の違い&lt;/h3&gt;
&lt;p&gt;　今までにいろんなプログラミング言語でオセロを作った経験があるのですが、オセロを作った同じやり方で三目並べを作るとうまく出来ませんでした。三目並べを作った顛末は&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;ここ&lt;/a&gt;に書いていますが、どのような問題があったかというと、オセロの局面の評価は末端ノード（葉）で行うため、三目並べで同様の作り方をすると途中でラインが揃って勝負がついているにも関わらず先読みを続けてしまうという不都合が起こり、間違った結果が返ってきます。各ノードで局面の評価を先にしてから先読みを続けるかどうか判断するという作り方にしなければなりません。その違いに気づくまで私は結構悩みました。&lt;br /&gt;
　将棋も三目並べと同じでゲームがいきなり終了する（詰み）ことがあるので、有限手数先を読みそこで評価する作り方をしているとあり得ない局面を読んでいて間違った評価をすることになります。では、オセロはゲームがいきなり終了することは無いのかというとそうでもなく、頻度は低いと思いますがオセロにもパーフェクトで勝負がつくケースというのがあるので、その対策は必要です。でも自分がオセロプログラムを作った経験から言うと、特にパーフェクト負けへの対応をしていなくても自然と回避されるケースが多いと思います。巷に出回っているオセロのソフトも偶々うまくいっているというケースが多いのではないでしょうか。&lt;br /&gt;
　もう20年以上前のことですが、自分が作ったオセロプログラムがどれほどの強さなのか他のプログラムと手動で対戦させていた頃、とても強くて自分が作ったソフトは歯が立たないフリーソフトがあったんですが、そのソフトに自分の作ったソフトが何度か序盤（オセロ盤に打つ場所がいっぱい残っている状態）でパーフェクト勝ちをしたことを思い出しました。その強いオセロソフトはパーフェクト負けへの対応をしていなかったのでしょう。三目並べを作って見るまではオセロも三目並べも将棋も同じようなゲームだと思っていたのに、そんな違いがあることに今更ながら驚きました。ちょっと大袈裟かもしれませんが自分にとっては新発見でした。  &lt;/p&gt;

</description>
                <link>http://happyclam.github.io/software/2014-09-16/ab_method</link>
                <guid>http://happyclam.github.io/software/2014-09-16/ab_method</guid>
                <pubDate>2014-09-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>将棋はやっぱり深く読まなくてはダメ</title>
                <description>&lt;h3 id=&quot;tictactoe&quot;&gt;三目並べ（tictactoe）作成後&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;前回の記事&lt;/a&gt;で自分で作った将棋ソフトが弱い原因を確認するために三目並べ（tictactoe）プログラムを作ったことを書きましたが、一応その後の結果を書いておこうと思います&lt;br /&gt;
　&lt;a href=&quot;https://github.com/happyclam/tictactoe_ruby&quot;&gt;三目並べプログラム&lt;/a&gt;で先読み関数には問題ないと確認出来たので、将棋プログラムの先読み部分もそれと同じように修正してみました。将棋の前にオセロプログラムも作って確認したのですがここではその話は置いておきます。それと、三目並べと同じように修正したと言っても将棋には盤上の駒を動かす場合と持ち駒を打つ場合があったり、相手の駒を取ったりするので、三目並べと同じにはならないのですが、どういうパラメータを与えるかとかどこで評価関数を呼んでどこで再帰関数から抜けるのかとかそういう部分を同じにしたということです。将棋プログラムでは、評価関数を呼び出す場所を先読み再帰関数の先頭にしてみたりforループの中にしたり、評価部分の等号・不等号の違いや評価する局面の枝刈りをする場所変えたりいろいろ試行錯誤しているうちに正確に先読み・枝刈りが出来ているかどうかわからなくなってきたので、三目並べで確認したかったんです。&lt;br /&gt;
　この類のゲームを作ったことがある人なら分かると思いますが、自分の書いたプログラムが膨大な局面の評価値のtree構造をどのように遷移して結論を出したのか確認するのは結構面倒です。評価の遷移を出力して確認するためのテストコードを書くのが王道かもしれませんが、それより簡単そうで面白そうなので三目並べを作って確認し、それと同じ作りにしてしまおうということです。&lt;br /&gt;
　で、結論はどうだったかというと、先読み部分を三目並べと同じように変更しても将棋ソフトは全然強くなりませんでした。結局、先読み部分には大きな問題はなく、ソフトが弱い原因は先読み手順以外の部分（評価関数や読む深さ）にあるということがはっきりしたわけです。今の評価関数は駒の重み（飛車=85点、竜=100点、玉=9999点、金=50点、歩=10点…等）の合計値を使って局面を評価しているだけなので、いい結果が望めないのは当然といえばそうなのですが、&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;前回の記事&lt;/a&gt;で書いたように、駒の重みだけの評価関数でオセロを作った場合には非常に強いソフトになるのに将棋だとなんでこんなに弱いのか納得出来なかったので念のため確かめたって感じです。&lt;br /&gt;
　仕方がないので疑問手を指した局面で、何でこんな手を指すのか地道にコードを追っていって調べたところ何となくオセロとの違いが分かってきましたので、実際にソフトが指した手を示しながら説明したいと思います。&lt;br /&gt;
　というか本当に強い将棋ソフトを作りたいのなら、今のご時世ならソースコードが公開されているらしいBonanzaのソースコードを調べてそれに倣うのが一番手っ取り早いと思いますが、それでは面白く無いのであくまで自己流でやってます。  &lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;テスト局面の例&lt;/h3&gt;
&lt;p&gt;　本将棋もどうぶつ将棋もプレイ出来るような作りにしているのですが、本将棋（９×９）だと確認が大変なのでミニ将棋（５×５）で確認しました。  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ケース１&lt;br /&gt;
&lt;img src=&quot;/images/scr1-1.png&quot; alt=&quot;局面1-1&quot; /&gt;&lt;br /&gt;
　先手＝ソフト、後手＝人間で上の図の初期配置から先読みをせずに、というか１手先を読む設定でソフトに初手を指させると「１二飛」と指します&lt;br /&gt;
&lt;img src=&quot;/images/scr1-2.png&quot; alt=&quot;局面1-2&quot; /&gt;&lt;br /&gt;
　ソフトは自分が一手指した局面で評価（自分の駒の重みの合計点ー相手の駒の重みの合計点）を計算しますので、この局面では歩を一枚得をした状態なので自分が有利と判断します。次の一手で後手に飛車を取り返されて大損するにもかかわらずです。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ケース２&lt;br /&gt;
局面２ー１:&lt;br /&gt;
&lt;img src=&quot;/images/scr2-1.png&quot; alt=&quot;局面2-1&quot; /&gt;&lt;br /&gt;
　先手＝ソフト、後手＝人間で、既に後手有利な局面ですが、ここで５一の飛車を使うために４三角と指します。&lt;br /&gt;
局面２ー２:&lt;br /&gt;
&lt;img src=&quot;/images/scr2-2.png&quot; alt=&quot;局面2-2&quot; /&gt;&lt;br /&gt;
　もし、ソフトが角を取れば４五飛車の一手詰という仕掛けです。3手先を読む設定にしたソフトで、この局面で指させると下図のように堂々と４三金と角を取ってしまいます。&lt;br /&gt;
局面２ー３:
&lt;img src=&quot;/images/scr2-3.png&quot; alt=&quot;局面2-3&quot; /&gt;&lt;br /&gt;
　ソフトからすると４三金（1手目）、４五飛（2手目）と進んでも４五同玉（3手目）とすれば自分が有利と計算することになるからです。&lt;br /&gt;
局面２ー４:
&lt;img src=&quot;/images/scr2-4.png&quot; alt=&quot;局面2-4&quot; /&gt;&lt;br /&gt;
　４五同玉と取った時点の駒の重みの合計点は飛車の分が加算されて先手のソフト側の点数がかなり高くなります。この飛車を取ることが出来るというところまで読んで「局面２ー２」の時点で４三金と角を取る手を選んでしまうわけです。その次の一手で後手に４五同馬と玉を取られるにもかかわらずです。ソフトを4手先を読む設定にすれば、その先で自玉が取られて合計点が大幅に減ることが分かるので「局面２ー２」で４三金とは指しません。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;オセロとの違い&lt;/h3&gt;
&lt;p&gt;　ケース１では飛車が取られる、ケース２では玉が取られるという、序盤であれ終盤であれ一手違うだけで評価値が激変するのが将棋のオセロに無い特徴だと思います。将棋以外のゲームでも勝ちか負けかという局面では評価値が激変するのは当然ですが、将棋は一手毎に駒を打つ場所が少なくなるオセロや囲碁と違って、徐々にゲームの終わりが近づいているわけではありません。いつ終了するか（いつ玉が詰まされるか）わかっていないので常に局面を厳しく評価する必要があるのです。オセロの評価関数は序盤でいい加減な評価関数を使用していたとしても、ゲームの終盤で残り15手とか20手になったときに最後まで読み切ることが可能なので強いソフトが比較的簡単に作れるのでしょう。三目並べも同様です。将棋の場合、読み切りと言えば詰みを探すということになりますが、初手から詰みを探しても時間の無駄ですし、オセロのように一手毎に終わりが近づいているわけではないので、残り何手になったら詰みを探すという作りにも出来ません。常に局面を正確に評価し、詰みがある局面ではそれを逃さないような作りにする必要があります。&lt;br /&gt;
　それともう一つオセロや三目並べは、手が進むに連れて徐々に手の選択肢が少なくなるので深く読むことが容易になっていきますが、将棋にはそういうことがありません。むしろ持ち駒が増えると読む手が増えていきます。&lt;br /&gt;
　ということで、まずはもっと深く読むことが必要だと思うので、クラスの構成やデータ構造も見直して作り直そうかと思っています。駒の働きや玉の固さなども考慮した凝った評価関数を作るとなると、結局速度が必要になるのでデータ構造も出来るだけ単純にすべきなのですが、そもそもRubyで実効速度は期待出来ないと思っていたし、ミニ将棋ならオセロより駒の数も少ないし特に凝ったことしなくても自然と強いソフトになるだろうなんて甘い見通しだったのがいけなかったようです。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;おまけ&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;http://sdin.jp/browser/board/55shogi/&quot;&gt;SDIN将棋のサイト&lt;/a&gt;で自分が作ったソフトとCPU対戦したところ、4手読みの設定でいい加減な評価関数でもレベル２には常に勝てるようです。レベル３には勝てませんので、これに勝つことを当面の目標にしてみます。&lt;br /&gt;
　それと、つい最近まで開発の動機なども含めてgithubのwikiに書いて「Shoes de shogi」という名前でgithubで公開していたのですが、とりあえずもう少し強くできるまで一時的に削除することにしました。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/software/2014-09-09/pre_shogi</link>
                <guid>http://happyclam.github.io/software/2014-09-09/pre_shogi</guid>
                <pubDate>2014-09-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>三目並べ（tictactoe）</title>
                <description>&lt;p&gt;Project: 「&lt;strong&gt;三目並べ&lt;/strong&gt;」: &lt;a href=&quot;https://github.com/happyclam/tictactoe_ruby&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;開発の動機&lt;/h3&gt;
&lt;p&gt;　Ruby用のGUI開発ツールShoesを使って一通り機能を備えた将棋ソフトを作ってみたのですが、思っていた以上に弱い。大昔にオセロのソフトを作ったことがあるのですが、min-max法とαβ法を使えば普通の人では勝てないぐらいのものが簡単に作れました。オセロでは四隅を取ると有利になるので、隅のコマは点数を高くして、その隣の位置は点数を低くするという、コマを置く盤面の位置に重み付けすることで局面を評価するよくある評価関数を使えば十分でした。&lt;br /&gt;
　だから将棋の場合もそれぞれの駒に重み付けをして評価関数を作れば、オセロに比べると読む局面の数が多くなるとはいえ、それなりに強いものが出来ると思っていたのにあまりにも弱かったのです。そこで評価関数は置いといて局面の先読み部分がうまくいってるのか確認するために、まずはより単純なゲームである三目並べで確認しようと思ったのが作成のきっかけです。三目並べ（tictactoe）なら初手からゲーム終了まで読みきれるので先読み関数に問題がないかどうか判断しやすいと思ったからです。  &lt;/p&gt;

&lt;h3 id=&quot;min-max&quot;&gt;min-max法&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;  #先手×は最大値、後手○は最小値を選択するように再帰しながら局面を先読み
  def lookahead(board, turn, cnt)
    if turn == CROSS
      value = MIN_VALUE
    else
      value = MAX_VALUE
    end
    locate = nil
    board.each_with_index {|b, i|
      next if b
      board[i] = turn
      temp_v = evaluation(board)
      teban = (turn == CROSS) ? NOUGHT : CROSS
      if (temp_v != MAX_VALUE &amp;amp;&amp;amp; temp_v != MIN_VALUE &amp;amp;&amp;amp; cnt &amp;lt; SIZE - 1)
        #指定した深さまで再帰呼出し
        temp_v, temp_locate = lookahead(board, teban, cnt + 1)
      end
      board[i] = nil
      #先手×の番と後手○の番で、同じ深さでの最小、最大の評価値をvalueに保存
      if (temp_v &amp;gt; value &amp;amp;&amp;amp; turn == CROSS) || (temp_v &amp;lt; value &amp;amp;&amp;amp; turn == NOUGHT)
        value = temp_v 
        locate = i
      end
    }
    #同じ深さでの最小、最大の評価値を返す
    return value, locate
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;αβ法&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;min-max法に、親局面の評価値を子局面に伝えるための引数（α値＝下限値、β値＝上限値）を追加&lt;/li&gt;
  &lt;li&gt;引数で渡された親局面の評価値と現局面を比較して、現局面が選択されることがないことがわかったら、先読みを中断してreturnする（αカットとβカット）&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;  #現局面の評価値を子局面に渡しながら再帰関数で局面を先読み
  def lookahead(board, turn, cnt, threshold)
    if turn == CROSS
      value = MIN_VALUE
    else
      value = MAX_VALUE
    end
    locate = nil
    board.each_with_index {|b, i|
      next if b
      board[i] = turn
      temp_v = evaluation(board)
      teban = (turn == CROSS) ? NOUGHT : CROSS
      if (temp_v != MAX_VALUE &amp;amp;&amp;amp; temp_v != MIN_VALUE &amp;amp;&amp;amp; cnt &amp;lt; SIZE - 1)
        temp_v, temp_locate = lookahead(board, teban, cnt + 1, temp_v)
      end
      board[i] = nil
      #先手×の番
      if (temp_v &amp;gt; value &amp;amp;&amp;amp; turn == CROSS) 
        value = temp_v 
        locate = i
        #上限値を上回ったら先読み中止
        return value, locate if threshold &amp;lt; temp_v
      #後手○の番
      elsif (temp_v &amp;lt; value &amp;amp;&amp;amp; turn == NOUGHT)
        value = temp_v 
        locate = i
        #下限値を下回ったら先読み中止
        return value, locate if threshold &amp;gt; temp_v
      end
    }
    #同じ深さでの最小、最大の評価値を返す
    return value, locate
  end

end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※min-max法に僅かなコードを追加しただけで素晴らしい効果が得られました。&lt;a href=&quot;http://www.vaio.sony.co.jp/Products/P1/spec_vom1.html&quot;&gt;vaio type p (VGN-P90S)&lt;/a&gt;という非力なPCで比較したところ、単なるmin-max法で完全読み切りに３０秒ほどかかったのに、αβ法なら５秒で完了しました。評価関数が、勝ち、負け、引き分けの３値しかない単純なものだったせいもありますがすごいです。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;検証と意外だったこと&lt;/h3&gt;
&lt;p&gt;　先読みがうまく機能しているかは、初手をどこに打ってゲーム開始しても引き分けという結果が返ってくることや、先手・後手でそれぞれ何度か三目並べで遊んでみて確認した程度ですが、それで十分でしょう。&lt;br /&gt;
　でも作ってみて意外だったのは初手から完全読み切りするわけだから、ソフトに初手を指させたら当然真ん中に×をつける（打つ？指す？）と思っていたのに真ん中には打ってこなかったことです。人間ならすぐに一番勝つ可能性が高い真ん中を取るはずですが、ソフトは双方が最善手を指せば引き分けになることを読み切っているので、結局どこに打っても同じと判断するわけです。評価関数が勝ち、負け、引き分けの三値しか返さない関数なので、初手に真ん中に打てばラインを揃える可能性が一番高いとはいえ、引き分けには違いないので区別しないのだと一応納得しました。&lt;br /&gt;
　念の為、真ん中は２点、隅は１点、その他は０点という場所による重み付けをしてその点数による評価関数を作って、それを使えば真ん中に打つことは確認しましたが、そんな評価関数では当然弱いソフトになりました。それ以外にも何とか初手に真ん中を選択しながら、強い評価関数はどうすればいいか考えてみましたが、シンプルでいい方法は思いつきませんでした。&lt;br /&gt;
　結局オセロでも将棋でもそうですが、局面の形成判断をする評価関数と読み切り用の評価関数は分けて作るのがいいのかもしれません。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/project/2014-08-05/tictactoe</link>
                <guid>http://happyclam.github.io/project/2014-08-05/tictactoe</guid>
                <pubDate>2014-08-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>BlueToothマウス</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;携帯する気は無いが、マウスのケーブルは細い方がいい&lt;/h3&gt;
&lt;p&gt;　まだ一年程しか使っていなかったマウスが壊れました。ケーブルが平べったいタイプでUSB端子をマウスの中に収納できるタイプのもの。ケーブルが巻き取れるタイプのものは携帯用の小さなマウスばかりですが、USB端子も本体に収納出来るようになっているため比較的マウス本体も大きめの作りでまぁまぁ気に入っていたのに短い命でした。このタイプのマウスでもう一つお気に入りのマウスを持っているのですが、それはビックカメラ製の今はもう製造していないであろう珍しいもの（だと思います）。10年以上前に新横浜のビックカメラで買ったものですが、ELECOM等のOEM製品だと思いますが、どういう経緯で自社ブランドで販売したのか知りませんが、確かにビックカメラ製と銘打っていたと記憶しています。あの時まとめて買いだめしておけばよかったと思います。&lt;br /&gt;
&lt;img src=&quot;/images/biccamera_mouse.png&quot; alt=&quot;ビックカメラ製マウス&quot; style=&quot;float: left;&quot; /&gt;
　大きいマウスの方が使いやすいのですが、ケーブルが太いと、わずかではあるけどケーブルに操作を持っていかれる時があるので好きではありません。だからと言ってケーブルの無い無線方式だと何となく信頼できないというか、安心できないというかイザというとき困るんじゃないかとか、CPU切替器も使っているのでちゃんと動くかどうかわからないという不安が先走って、未だに無線方式のものは使わずにいます。マウスに関してはキーボードほど使い勝手にこだわりは無いのでそろそろ無線を試してもいいかもと思いながらも、あくまで細いケーブルの大きなマウスを求めていろんな店舗を見て回ることにしました。  &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;予定していた行動とまったく違うことすることってありますよね&lt;/h3&gt;
&lt;p&gt;　細く平たいケーブルのマウスか、それが無ければ無線マウスを買うつもりで家を出たのに、家に持ち帰ったのはBuffalo製の&lt;a href=&quot;http://buffalo.jp/product/input/mouse/bsmbb17/&quot;&gt;BlueToothマウス&lt;/a&gt;でした。細いケーブルのマウスは携帯用の小さいものしか無く、目当てのものが売っていなかったのが最大の原因ですが、無線のマウスは専用のレシーバが必要なのが何となく嫌で躊躇していたところにそれ以外の選択肢が目についてしまったのです。プログラマっていうのはXXX社製専用というのが何となく美しくないと感じてしまうものです、そう、縛られるのが嫌いなのでしょう。BlueToothマウスもBlueTooth機能を備えていないPCで使う場合はドングルというレシーバが必要なわけですが、マウスと同じメーカーでなくても使えます。マウスと同じメーカーの対になったレシーバしか使えないという不自由さが気に入らないのでしょう（家でしか使わないならそれで十分なのに…）。そういえば昔買ってほとんど使わずじまいのドングルが家に何個かあるなぁと思い出してしまったことも購入に踏み切った原因だと思います。  &lt;/p&gt;

&lt;h3 id=&quot;ubuntu1204&quot;&gt;Ubuntu12.04では使えない？&lt;/h3&gt;
&lt;p&gt;　家では主にUbuntu12.04を使っているのですが、そのままでは認識すらしてくれませんでした。Windows7のノートPCでは２つのドングル（&lt;a href=&quot;http://www.planex.co.jp/product/bluetooth/bt-microedr2x/&quot;&gt;BT-MicroEDR2X&lt;/a&gt;、&lt;a href=&quot;http://www.planex.co.jp/product/bluetooth/bt-01ude.shtml&quot;&gt;BT-01UDE&lt;/a&gt;）で確認したので故障ではありません。dbusを最新のものに入れ替えたらデバイス検索でBSMBB17を検出してはくれたものの動作しませんでした。そこで以前から更新しようと思っていながら放ったらかしにしていたUbuntu14.04へのアップグレード（do-release-upgradeコマンド一発）をやってみたらすぐに認識することが出来、使えました。メデタシメデタシ。って結局マウスが壊れたおかげで以前から懸案だったUbuntuアップグレード作業をすることが出来たことが収穫って感じです。マウスが壊れたところから神様のお導きだったのかもしれません。&lt;br /&gt;
&lt;a href=&quot;http://buffalo.jp/product/input/mouse/bsmbb17/&quot;&gt;&lt;img src=&quot;/images/bsmbb17_mouse.png&quot; alt=&quot;BSMBB17&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
　で、肝心のBlueToothマウスの使い勝手ですが、頻繁に動作が引っかかる感じでとても使い続ける気にはなりませんでした。自分的にはBlueToothマウスはまだまだ実用には堪えられないって感じです。あくまでlinuxで使う場合の話ですが…。結局マウスはしばらく買わずに、とっておきのビックカメラ製のものを使うことにします。チャンチャン。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/hardware/2014-07-12/bt_mouse</link>
                <guid>http://happyclam.github.io/hardware/2014-07-12/bt_mouse</guid>
                <pubDate>2014-07-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>production環境でjQueryが発動しない</title>
                <description>&lt;h3 id=&quot;deployment&quot;&gt;自宅サーバーにdeployment&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;/project/2014-05-30/tweetwatch&quot;&gt;TweetWatch&lt;/a&gt;がとりあえず完成したので、自鯖（Apatch）で動かしてみたらjQueryの一部（画面描画時&lt;code&gt;$(document).ready()&lt;/code&gt;の処理だけ）が上手く動かなかったので動くようになったまでの顛末を書きます（Rails 4.0.2, ruby 2.0.0p353）。&lt;br /&gt;
コードは以下の通りです&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#app/assets/javascripts/users.js
$(document).ready(function(){
    $.ajax({
        url: &#39;/tweets/check&#39;, 
        data: {},
        dataType: &quot;script&quot;
    }).done(function(data, status, xhr) {
    }).fail(function(xhr, status, error) {
        alert(&#39;Error Occured(&#39; + error + &#39;)&#39;);
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;処理の内容はあまり関係ないと思いますが、jQueryからcontrollerのメソッドを呼び出し、サーバースクリプトが動いているかどうかをチェックして画面にstatusを表示する処理をしています。このusers.jsがdevelopment環境では動くのにproduction環境では動かないという現象に悩まされました。動くようになるまでに辿った作業を順に箇条書きにしてみると以下のようになります。  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;p&gt;1. Apache+Passenger環境でうまく動かないので、以下の設定でwebrickでproduction環境を試す。特にwebrick用の設定とも言える&lt;code&gt;serve_static_assets = true&lt;/code&gt;がdevelopment環境との大きな違い&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;pre&gt;&lt;code&gt;
    #config/environments/production.rb
    config.assets.compile = false
    config.assets.js_compressor = :uglifier
    config.serve_static_assets = true
    config.assets.digest = true
    config.assets.debug = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;rake assets:precompile RAILS_ENV=production&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;rails s -e production&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;p&gt;2. 変化が無かったのでjquery-turbolinks gemを追加してみる&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;pre&gt;&lt;code&gt;
    #Gemfile
    gem &#39;jquery-turbolinks&#39;  &amp;lt;- 追加
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    #app/assets/javascripts/application.js
//= require jquery
//= require jquery_ujs
//= require bootstrap
//= require users.js
//= require turbolinks
//= require jquery.turbolinks     &amp;lt;- 追加
//= require highcharts/highcharts
//= require highcharts/highcharts-more
//= require highcharts/highstock
//= require_tree .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;rake assets:precompile RAILS_ENV=production&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;rails s -e production&lt;/code&gt;
&lt;/p&gt;
※&amp;lt;a href=https://github.com/kossnocorp/jquery.turbolinks/blob/master/README.md&amp;gt;jquery-turbolinksのドキュメント
&lt;/dd&gt;
&lt;br /&gt;
&lt;dt&gt;&lt;p&gt;3. jquery-turbolinks gemを追加してもダメだったので、今度は逆にturbolinksを無効にしてみる&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;pre&gt;&lt;code&gt;
    #Gemfile
#    gem &#39;turbolinks&#39;         &amp;lt;- コメント化
#    gem &#39;jquery-turbolinks&#39;  &amp;lt;- コメント化
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
    #app/assets/javascripts/application.js
//= require jquery
//= require jquery_ujs
//= require bootstrap
//= require users.js
//= require turbolinks            &amp;lt;- この行を削除
//= require jquery.turbolinks     &amp;lt;- この行を削除
//= require highcharts/highcharts
//= require highcharts/highcharts-more
//= require highcharts/highstock
//= require_tree .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    #app/views/layouts/application.html.erb
    #変更前
  &amp;lt;%= stylesheet_link_tag    &quot;application&quot;, media: &quot;all&quot;, &quot;data-turbolinks-track&quot; =&amp;gt; true %&amp;gt;
  &amp;lt;%= javascript_include_tag &quot;application&quot;, &quot;data-turbolinks-track&quot; =&amp;gt; true %&amp;gt;
    #変更後
  &amp;lt;%= stylesheet_link_tag    &quot;application&quot;, media: &quot;all&quot; %&amp;gt;
  &amp;lt;%= javascript_include_tag &quot;application&quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;rake assets:precompile RAILS_ENV=production&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;rails s -e production&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;p&gt;4. turbolinksは関係なかったので、関係ないと思ったけど今度はcoffee scriptに変えてみる&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;span&gt;jqueryとturbolinks両イベント対応の書き方&lt;/span&gt;
&lt;pre&gt;&lt;code&gt;
#app/assets/javascripts/user.js.coffee
$(document).on &#39;ready page:load&#39;, -&amp;gt;
  url = &#39;/tweets/check&#39;
  dfd = $.ajax
    url: url
    format: &#39;script&#39;
    data: {}
    method: &#39;get&#39;
  promise = dfd.promise()
  promise.done((data, status, xhr) -&amp;gt;
  )
  promise.fail((xhr, status, error) -&amp;gt;
    alert(error)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;span&gt;jqueryイベントとturbolinksイベントを分けた書き方&lt;/span&gt;
&lt;pre&gt;&lt;code&gt;
#app/assets/javascripts/user.js.coffee
ready = -&amp;gt;
  url = &#39;/tweets/check&#39;
  dfd = $.ajax
    url: url
    format: &#39;script&#39;
    data: {}
    method: &#39;get&#39;
  promise = dfd.promise()
  promise.done((data, status, xhr) -&amp;gt;
  )
  promise.fail((xhr, status, error) -&amp;gt;
    alert(error)
  )

$(document).ready(ready)
$(document).on(&#39;page:load&#39;, ready)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;rake assets:precompile RAILS_ENV=production&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;rails s -e production&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;p&gt;5. どっちのcoffee scriptでもダメなので、こんどは正常に動作しているdevelopment環境の設定をproduction環境と同じにして確認。&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;pre&gt;&lt;code&gt;
    #config/environments/development.rb
    config.assets.compile = false
    config.assets.js_compressor = :uglifier
    config.serve_static_assets = true
    config.assets.digest = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;デフォルトでは書かれていない上記設定をdevelopment環境の設定ファイルに追加して&lt;code&gt;rails s -e development&lt;/code&gt;すると、めでたく？production環境と同じくページload時のjqueryだけが発動しない現象が再現しました。結局config.assets.compileがtrueかfalseかで動作が変わるようです。念のためdevelopment環境でconfig.assets.compileの値だけを書き換えて現象の発生の有無を確認しました。&lt;br /&gt;
　でも本番（production）環境でconfig.assets.compile = trueにして運用することは、重くなるので普通はしないと思いますし、結局config.assets.compile = falseのままではturbolinksの有効・無効に関係なく、このjqueryを発動させることは出来ませんでした。
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;p&gt;6. 何か方法はないかとテンプレートファイルに直接jqueryを直書きしてみたところ&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;pre&gt;&lt;code&gt;
#app/views/users/show.html.erb
&amp;lt;%= javascript_tag do %&amp;gt;
$(document).ready(function(){
    $.ajax({
        url: &#39;/tweets/check&#39;, 
        data: {},
        dataType: &quot;script&quot;
    }).done(function(data, status, xhr) {
    }).fail(function(xhr, status, error) {
        alert(&#39;Error Occured(&#39; + error + &#39;)&#39;);
    });
});
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでdevelopment環境でもproduction環境でもページ読み込み時のjqueryが正常に動作しました。&lt;br /&gt;
config.assets.compile = falseでdevelopment,production両方の環境で動きます。いろいろ環境を弄りましたが元の環境からjqueryをテンプレートに直書きするように変えるだけで他は変更しなくてよかったみたいです。turbolinksが有効でも無効でも大丈夫です
&lt;/p&gt;
&lt;/dd&gt;

&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;結論&lt;/em&gt;&lt;br /&gt;
「$document.readyイベントを使うjqueryが動作しない時は、テンプレートに直書きしてみる。」&lt;/p&gt;

&lt;p&gt;　※ネットの情報を漁っていると、jquery-turbolinks gemを使えば解決するというものが多いのですが、document.readyイベントに関してはそういうわけにはいかないようです。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/programming/2014-07-07/rails_env</link>
                <guid>http://happyclam.github.io/programming/2014-07-07/rails_env</guid>
                <pubDate>2014-07-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ツイートを監視して集計する（client側）</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;サーバースクリプトの状態遷移&lt;/h3&gt;
&lt;p&gt;　言うまでもなくclient側と言ってもWebサーバ上で動いているわけなのでユーザから見ればサーバーとして機能しているわけですが、TwitterAPIを使ってデータをDBに保存するサーバースクリプトに対してclient側ということです。&lt;br /&gt;
state_machine gemを利用してサーバースクリプトの状態を管理しています。
&lt;img src=&quot;/images/tweetwatch.png&quot; alt=&quot;状態遷移図&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;状態遷移表&lt;/em&gt;  &lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;status\method&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;start&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;store&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;stop&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;停止中(down)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;待機中(prepared)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;待機中(prepared)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;集計中(storing)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;停止中(down)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;集計中(storing)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;停止中(down)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;サーバー停止中のユーザー画面&lt;/em&gt;&lt;br /&gt;
&lt;img src=&quot;/images/state1.png&quot; alt=&quot;サーバー停止中&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;サーバー集計中のユーザー画面&lt;/em&gt;&lt;br /&gt;
&lt;img src=&quot;/images/state2.png&quot; alt=&quot;サーバー集計中&quot; /&gt;&lt;br /&gt;
　ユーザ向け画面では「停止中」と「集計中」の２つの状態しかないのですが、EventMachineを使用しているサーバースクリプトでは、接続確立が完了した状態（post_initイベントが発生後）にならないとコマンドラインで渡したパラメータが有効にならないので、サーバースクリプトを起動した直後の状態を「待機中」として管理しています。&lt;br /&gt;
&lt;!-- other list --&gt;&lt;/li&gt;
  &lt;li&gt;停止中 —– サーバースクリプト停止中&lt;/li&gt;
  &lt;li&gt;待機中 —– サーバースクリプトが起動しているが、TwitterAPIを呼び出していない状態&lt;/li&gt;
  &lt;li&gt;集計中 —– TwitterAPIを呼び出しツイートデータをDBに保存している状態&lt;br /&gt;
※「集計中」から「待機中」には遷移できません（停止して再起動）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;機能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;server側スクリプトの制御（起動、終了、状態確認）&lt;br /&gt;
※遅いノートPC（Atom機）で試したところserver側スクリプト起動に時間がかかり、接続がタイムアウトすることがあったので５秒のsleepを入れています。&lt;/li&gt;
  &lt;li&gt;server側のスクリプトがDBに保存したツイートデータを集計してグラフ表示する。&lt;br /&gt;
※Twitterのデータ構造はハッシュタグを本文とは別に保持しているようですが、SQLで集計する際にハッシュタグで集計するのはコストがかかるので、本文の内容でgroup byするという単純なやり方で妥協しています。詳細は別記事にするつもりです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;er&quot;&gt;ER図&lt;/h3&gt;
&lt;object data=&quot;/pdf/struct_tweetwatch.pdf&quot; width=&quot;600&quot; height=&quot;600&quot;&gt;
&lt;p&gt;ご覧の環境では、object要素がサポートされていないようです。&lt;a href=&quot;/pdf/struct_tweetwatch.pdf&quot;&gt;PDFファイルをダウンロードしてください&lt;/a&gt;&lt;/p&gt;
&lt;/object&gt;

&lt;ul&gt;
  &lt;li&gt;Tweetテーブルへの書き込みはサーバースクリプトのみで、client側のRailsアプリからTweetテーブルへのアクセスはRead onlyです。  &lt;/li&gt;
  &lt;li&gt;Servモデルはユーザがサーバースクリプトを起動する時に指定したTwitter検索タグとサーバースクリプトの状態を管理します。  &lt;/li&gt;
  &lt;li&gt;ユーザは複数のTrackモデル（検索タグ）を保存できますが、サーバースクリプト起動時に指定出来るタグは一つだけです。  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/project/2014-06-07/tweetwatch_client</link>
                <guid>http://happyclam.github.io/project/2014-06-07/tweetwatch_client</guid>
                <pubDate>2014-06-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ツイートを監視して集計する（server側）</title>
                <description>&lt;h3 id=&quot;eventmachine&quot;&gt;EventMachineで簡単インターフェース&lt;/h3&gt;
&lt;p&gt;　初めて&lt;a href=&quot;http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/&quot;&gt;morizyun氏のこの記事&lt;/a&gt;を読んだときはEventMachineとかforemanとかって何をするものか知らなかったのですが、EventMachineというのは「&lt;a href=&quot;https://morizyun.github.io/blog/reactor-pattern-ruby/&quot;&gt;[Ruby] Reactorパターンについて&lt;/a&gt;」にも書いてある通り、ソケットの受信待機をして貰って簡単にReactorパターンを実現することが出来るツールってことのようです。だからわざわざ自分でプロセス間通信の手続きを書く必要がなくアプリケーションレベルのコマンドを用意してあげるだけで済むのではないか？と思いながら作ったら思惑通りにうまく動いたって感じです。実際に組み込む前には、以下のような単純なサンプルで確認しました。  &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;#server側サンプル  
require &#39;eventmachine&#39;

class Serv &amp;lt; EM::Connection
  attr_accessor :track
  def post_init
    puts &quot;myserv: init&quot;
  end

  def receive_data(data)
    puts data
    send_data @track
    EM.stop if data =~ /stop/i
  end

  def connection_completed
    puts &quot;myserv: completed&quot;
  end

  def unbind
    puts &quot;myserv: unbind&quot;
  end
end

EM.run do
  EM.start_server(&quot;127.0.0.1&quot;, 10000, Serv) do |conn|
    conn.track = ARGV[0]
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以下のようにコマンドラインパラメータを付加して起動し、  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby myserv.rb O.K.&lt;/code&gt;&lt;br /&gt;
クライアント接続時にServクラスのプロパティに保持されていることを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;#client側サンプル
require &quot;net/telnet&quot;

begin
  localhost = Net::Telnet::new(&quot;Host&quot; =&amp;gt; &quot;localhost&quot;,
                             &quot;Port&quot; =&amp;gt; 10000,
                             &quot;Timeout&quot; =&amp;gt; 1,
                             &quot;Telnetmode&quot; =&amp;gt; false,
                             &quot;Output_log&quot; =&amp;gt; &quot;./temp0.log&quot;,
                             &quot;Prompt&quot; =&amp;gt; &quot;O.K.&quot;)
  localhost.cmd(&quot;search word&quot;) { |c| print c }
  localhost.close
  localhost = nil
  p &quot;end&quot;
rescue Net::ReadTimeout
  p &quot;readtimeout&quot;
  p $!.to_s
rescue
  p $!.to_s
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このserver側の処理を、twitterAPIを使ってDBに検索結果を保存するスクリプトに組み込んで、client側の処理をRails製のサイトに組み込めばいいわけです。&lt;br /&gt;
　あと、server側のスクリプトは、ユーザ毎に起動してユーザがWebサイトから制御しなければならないので、foremanは必要無さそうです。  &lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;サーバースクリプトへのパラメータの受け渡し&lt;/h3&gt;
&lt;p&gt;　EventMachine::Connectionを継承したクラスServにユーザ情報を保存するメンバ変数（プロパティ）を用意して、Webサイト（client側）からサーバースクリプトを起動する時にコマンドライン引数でそれらの値を渡してあげます。起動の際に「10000+ユーザID」をポート番号に指定することでWebサイト利用者とサーバースクリプト利用者を一致させています。EventMachineを使ったプログラム同士が変数を共有する仕組みのようなものがあるかもしれませんが、ステートレスなHTTPで動いているWebサイトから起動するのだから、コマンドラインで渡すのがちょうど良さそうです。&lt;br /&gt;
　twitterのStreamingAPIを使用する部分は&lt;a href=&quot;/project/2014-05-30/tweetwatch&quot;&gt;以前書いた記事&lt;/a&gt;で紹介したmorizyun氏のコードをServ.trackingメソッドに閉じ込めてほぼそのまま動かしています。twitter側でエラーが発生した場合このままでいいのかよく分かりませんが、エラーになればWebサイト側からサーバースクリプトを再起動してもらえばいいという考え方で作ってます。&lt;br /&gt;
　client側からserver側スクリプトに受け渡すパラメータはTwitterAPIを利用するために必要な認証key文字列（４種類）とユーザIDとTwitterのfilterAPIに渡す検索文字列（検索タグ）です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;#実際のソースの一部
require &#39;eventmachine&#39;
require &#39;optparse&#39;

class Serv &amp;lt; EM::Connection
  attr_accessor :uid
  attr_accessor :track
  attr_accessor :c_key
  attr_accessor :c_secret
  attr_accessor :a_key
  attr_accessor :a_secret
  def receive_data(data)
    case data
    when /stop/i
      send_data &quot;O.K.&quot;
      EM.stop
    when /check/i
      send_data @track
    省略
      :

  def tracking(track, c_key, c_secret, a_key, a_secret, uid)
    stream = Twitter::JSONStream.connect(
  省略
    :

EM.run do
  EM.start_server(&quot;127.0.0.1&quot;, 10000 + params[&quot;p&quot;].to_i, Serv) do |conn|
    conn.track = params[&quot;t&quot;]
    conn.uid = params[&quot;p&quot;].to_i
    conn.c_key = params[&quot;c&quot;]
    conn.c_secret = params[&quot;k&quot;]
    conn.a_key = params[&quot;s&quot;]
    conn.a_secret = params[&quot;a&quot;]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://keijinsonyaban.blogspot.jp/2010/12/eventmachine.html&quot;&gt;【翻訳】EventMachine入門 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gihyo.jp/dev/serial/01/ruby/0032&quot;&gt;Reactorで非同期処理をやってみよう（2）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>http://happyclam.github.io/project/2014-06-06/tweetwatch_server</link>
                <guid>http://happyclam.github.io/project/2014-06-06/tweetwatch_server</guid>
                <pubDate>2014-06-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ツイートを監視して集計する</title>
                <description>&lt;p&gt;Project: 「tweetwatch」: &lt;a href=&quot;https://github.com/happyclam/tweetwatch&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;開発の動機&lt;/h3&gt;
&lt;p&gt;　今年の都知事選の頃、多くのフォロワーを抱えている人（以下a氏と表記）が
&amp;gt;Twitterで&lt;strong&gt;#都知事選&lt;/strong&gt;というタグをつけて自分が投票した候補者の名前を呟けば、それを集計してくれるアプリ作れないかな～&lt;/p&gt;

&lt;p&gt;と物欲しそうに呟いていたのが目に止まりました。&lt;br /&gt;
Yahooのアンケートのように、誰がどれぐらい票を獲得しているかtwitterで独自に確認しようという意図のようです。
　プログラマたるもの、そこで「すぐ出来ますよ」とリプライするような軽率な行動をとってはいけません。職業プログラマなら尚更です。誰かが手を挙げるかもと思いながらしばらく様子を見ていましたが、その呟きに対して反応する人はいなかったようです。こういう場合、相手がどれほどのものを要求しているかわからないので迂闊に出来ますなんて言えませんが、StreamingAPI使えばとりあえず使える程度のものであれば、すぐ出来るんじゃないかと思い調べてみました。  &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;とりあえずローカル環境で動くもの&lt;/h3&gt;
&lt;p&gt;　「StreamingAPI」で検索すると役に立ちそうなサイトはすぐに見つかりました→&lt;a href=&quot;http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/&quot;&gt;「Herokuの無料枠でTwitter Stream APIを常時監視 =&amp;gt; DBに保存するRubyコード」&lt;/a&gt;&lt;br /&gt;
このmorizyunって人のサイトは調べ物をしている際にはよくお世話になっていますが、今回見つけた記事も自分の要望その物です。私はherokuは使いませんでしたがほぼこの記事のコードそのままがローカル環境で動作しました。ツイートの集計がしたいのであればDBに溜まったデータに対してSQLを打ち込めば好きな結果が得られます。a氏に教えてあげようかとも思いましたが、おそらくプログラミングやSQLも知らないa氏が実際に自分のPCで動かすためにはそうとうな時間をかけてサポートしてあげないと無理だろうと思って止めておきました。自分が良かれと思って教えても、逆に恨まれることになり兼ねません。そうなんです、自分でニタニタ楽しむためのソフトを作れたとしても、それをひと様に使ってもらおうとするとまた一段とハードルが高くなるんですねぇ（今回は自分で楽しむものさえパクリですが）。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;ひと様が使えるようにするために&lt;/h3&gt;
&lt;p&gt;　最初はDBにデータを格納するだけのシェルスクリプトを起動しながら、ユーザー向けのwebインターフェースを提供してあげればいいだけだからそれほど手間はかからないと思いましたが、そうすると２プロセス動かすことになり、herokuの無料枠では済まなくなります。それに運用環境を何とか用意したとしても、自分のtwitterアカウントの認証キーをそのサービスで利用するとなると、一人しか利用できないwebサービスになってしまいます。twitter社にAPI利用料を支払えば解決ですが、そこまでする気もないので開発に取りかかるのは躊躇してました。&lt;br /&gt;
で結局、  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;運用環境に関してはとりあえず自宅サーバで動くようにしてから考える  &lt;/li&gt;
  &lt;li&gt;twitterのAPIキーをユーザ自身が登録して、そのキーを利用しながらDB格納プロセスを起動するようにする  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という方針で作りました。
&lt;img src=&quot;/images/tweetwatch_screen.png&quot; alt=&quot;集計画面&quot; /&gt;  &lt;br /&gt;
DBにデータを格納するシェルスクリプトは、&lt;a href=&quot;http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/&quot;&gt;morizyun氏のコード&lt;/a&gt;を叩き台にしてWebサイトから制御するためのプロセス間通信用インターフェースを追加し、そのサーバーとなるシェルスクリプトに接続するクライアントアプリとなるユーザ向けのwebサイトを作る。そのwebサイトは&lt;a href=&quot;http://railstutorial.jp/&quot;&gt;Ruby on Rails チュートリアル&lt;/a&gt;でRSpecの勉強（写経）をしながら作ったものがあったのでそれを流用しています。&lt;br /&gt;
以降、DBにデータを格納する&lt;a href=&quot;/project/2014-06-06/tweetwatch_server/&quot;&gt;&lt;em&gt;サーバースクリプト（server側）&lt;/em&gt;&lt;/a&gt;とRails製&lt;a href=&quot;/project/2014-06-07/tweetwatch_client/&quot;&gt;&lt;em&gt;Webサイト（client側）&lt;/em&gt;&lt;/a&gt;に分けて紹介します。&lt;/p&gt;

&lt;hr /&gt;
</description>
                <link>http://happyclam.github.io/project/2014-05-30/tweetwatch</link>
                <guid>http://happyclam.github.io/project/2014-05-30/tweetwatch</guid>
                <pubDate>2014-05-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ボラティリティについて</title>
                <description>&lt;h3 id=&quot;ivhv&quot;&gt;インプライド・ボラティリティ（IV）とヒストリカル・ボラティリティ（HV）&lt;/h3&gt;
&lt;p&gt;　ボラティリティには２種類ありますが、ニュースの記者や市況解説者が「ボラティリティ」という言葉を理解していないまま使っていることが多いと感じるので、以前から一言言っておきたいと思っていたことを書いておこうと思います。&lt;br /&gt;
　市況解説の中でも現物市場ではなく特に先物市場の解説をしている人が、先物価格の値動きが荒かった日などに「今日はボラの大きな一日でした」と解説しているのを聞くと「(・_・)……ン?」となることがあります、そういう日でもインプライドボラティリティ(IV)が低い日も結構あるからです。オプションの買いで勝負する時はボラが高い時が有利、逆に売りはボラが低い時が有利なのですが、IVが低い日に「今日は（オプション買いに）手出ししなくてよかった」と思っているところに、市況解説で「ボラの高い一日でした」なんて言われると「(‾△‾;)エッ・・そうだっけ？」となるわけです。実際にIVが高かったかどうかはスマイルチャートなどで確認できます。&lt;br /&gt;
　&lt;a href=&quot;http://www.option-dojo.com/kn/225_latest.html&quot;&gt;直近1年のボラティリティー&lt;/a&gt;をみればよく分かりますが、ヒストリカル・ボラティリティ（HV）とインプライド・ボラティリティ（IV）の動きは必ずしも一致していません。原資産である先物の動きがそれ程なくても、オプションの値動きが激しい日もあるということです。それにオプションは先物と違い、満期(SQ)が近づくとボラ(IV)が高くなるという性質（時間価値の減少に伴うもの）もあります。また、日経２２５先物とそれを原資産とする派生商品である日経２２５オプションの関係だけでなく、現物株とそれを原資産とする派生商品（株オプ等）の間でも同じことが言えます。&lt;br /&gt;
　まぁIVとHVの違いは理解しているけど、ボラティリティと言う言葉は単に「値動き」とか「値幅」と同義で使っているだけなので、区別する必要はないと言われればそれまでなのですが。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;誤解を生む説明の仕方&lt;/h3&gt;
&lt;p&gt;　ネットや本ではよく&lt;strong&gt;「ボラティリティが高いとオプションのプレミアムが高くなる、ボラティリティが低いとオプションのプレミアムが低くなる」&lt;/strong&gt;と説明されています。でもこの文を読んでいる人を騙そうとする悪意があるかどうかは別にして、非常に誤解を生みやすい説明だと思います。なぜなら、&lt;strong&gt;ボラティリティが高いと&lt;/strong&gt;という前提条件がIVのことを指しているのかHVのことを指しているのかわかりません。&lt;br /&gt;
　もしIVのことを指しているとしたら、IVが高いとプレミアムが高くなるのはその通りですが、そのIVというものはオプションの価格から算出されているものだから当たり前のことを言っているに過ぎません。IVが高いとオプションのプレミアムが高くなるわけではなく、IVが高いってことはオプションが割高に買われているってことです。&lt;br /&gt;
　また、&lt;strong&gt;ボラティリティが高いと&lt;/strong&gt;という前提条件がHVのことを指しているのだとすると、HVが高いとオプションの&lt;strong&gt;理論価格&lt;/strong&gt;が高くなることは間違いないですが、オプションの&lt;strong&gt;実際の価格&lt;/strong&gt;が理論価格通りに高くなるとは限りません。HVが高いとオプションの価格（プレミアム）が高くなるのではなく、HVが高いとオプションの&lt;strong&gt;理論価格&lt;/strong&gt;が高くなると言うべきです。&lt;br /&gt;
　&lt;strong&gt;ボラティリティが高いと&lt;/strong&gt;という表現がIVのことを指しているとしてもHVのことを指しているとしても、いずれも不正確な文章だと言えます。IVとHVの違いを理解している人でもつい説明する手間を省いて、こういう表現をしがちなんだと思いますが、説明する側がよく理解していないケースも多いと思います。    &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;違いが分かる説明の仕方&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E3%83%9C%E3%83%A9%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3&quot;&gt;wikipediaによるボラティリティの説明&lt;/a&gt;は学問的で、これはこれでいいのかもしれません。それに「インプライド・ボラティリティとは&lt;strong&gt;現実のオプション市場でついたオプション価格から逆算されたボラティリティ&lt;/strong&gt;のことである」とこれ以上望めない簡潔な言葉で言い表されています。&lt;br /&gt;
しかし、これ&lt;br /&gt;
&lt;img src=&quot;http://upload.wikimedia.org/math/c/8/9/c89911f0951782890cbb855572aa9de7.png&quot; alt=&quot;wikipediaのHVの数式&quot; /&gt;&lt;br /&gt;
とか、&lt;br /&gt;
こういう&lt;br /&gt;
&lt;img src=&quot;http://upload.wikimedia.org/math/1/9/b/19beb2fcdc78f6d56e3e16ad3f04c624.png&quot; alt=&quot;wikipediaのIVの数式&quot; /&gt;&lt;br /&gt;
難しい数式が出てくるので、「要するにどちらも値動きの荒さ、変動率のことだろ？」と言う感じで思考を中断してしまいがちだと思うのです。オプションという商品を理解しているつもりだった自分も、&lt;a href=&quot;http://my-posi.herokuapp.com&quot;&gt;先物・オプション売買損益シミュレーションサイト&lt;/a&gt;を自分で作ってみるまではIVとHVの違いを明確に区別出来ていなくて、よく似たような物ぐらいに考えていました。２つの間には相関関係が非常に薄いにも関わらずです。&lt;br /&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
ヒストリカル・ボラティリティxとオプション理論価格yは以下のように表すことが出来て、  \\
y = ax\\
オプションの実際の価格がy_1であった時に、導き出されるものがインプライド・ボラティリティx_1である。  \\
x_1 = \frac{y_1}{a}\\
&lt;/script&gt;
という感じで簡略化した数式を書いてくれれば２つのボラティリティの関係が分かりやすいと思うんですけど、どうでしょうか？&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/miscellaneous/2014-05-27/my-posi_vola</link>
                <guid>http://happyclam.github.io/miscellaneous/2014-05-27/my-posi_vola</guid>
                <pubDate>2014-05-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DBのカラムに対応しないプロパティ</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;日付型のカラムのデータを年月だけの文字列にしてコンボボックスに表示したい&lt;/h3&gt;
&lt;p&gt;先物やオプションの建玉を入力する時には限月を選ぶ必要がありますが、必要なのは年と月(“2014/06”等の文字列)だけです。でもDBに”年/月”のフォーマットで文字列として格納するのはあまりにも汚い。DBのカラム属性は日付型にしておいた方が何かと便利、というかしておくべきでしょう（日数や時間の差を計算する時に困ります）。&lt;br /&gt;
&lt;img src=&quot;/images/dropdown_exp.png&quot; alt=&quot;限月の選択&quot; title=&quot;限月の選択&quot; /&gt;&lt;br /&gt;
こういう場合、昔PHPで仕事していた時には、文字列型と日付型を相互にフォーマット変換するコードをView上のあちこちに散りばめながら実現していた記憶があります。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;シンプルな実現方法&lt;/h3&gt;
&lt;p&gt;Position.expirationがDBのカラムに対応するプロパティで日付型です。そこにPosition.ym_expirationというDBにカラムが存在しない入出力用のプロパティを用意し、そのsetterとgetterを定義します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Model(Position)&lt;br /&gt;
getter(日付型のデータを、年/月のフォーマットの文字列に変換してして返す)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;  def ym_expiration
    return self.expiration.strftime(&quot;%Y/%m&quot;) if self.expiration
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;setter(年/月の文字列データを日付01を付加して日付型に変換して格納)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;  def ym_expiration=(ym_expiration)
    self.expiration = Date.strptime(ym_expiration + &quot;/01&quot;, &quot;%Y/%m/%d&quot;)
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Viewから呼ばれる、年/月の文字列データを返すメソッド&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;  def get_expiration_list
    :省略
    :
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;View(_edit_position.html.erb)&lt;br /&gt;
Viewでは入出力用に追加したym_expirationプロパティだけを使うようにすれば、あたかもDBに対応するカラムのように扱えます。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-ERB&quot;&gt;&amp;lt;td align=&quot;center&quot;&amp;gt;&amp;lt;%= f.select(&quot;ym_expiration&quot;, position.get_expiration_list, {:include_blank =&amp;gt; false}, {:class =&amp;gt; &quot;span6&quot;, :style =&amp;gt; &quot;width:90px;&quot;}) %&amp;gt;&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CakephpやPHP5以上ならたぶん同じことが出来ると思いますが、もうPHPに戻りたくないし調べる気にもなりません&lt;/p&gt;

&lt;hr /&gt;
</description>
                <link>http://happyclam.github.io/programming/2014-05-26/my-posi_tip1</link>
                <guid>http://happyclam.github.io/programming/2014-05-26/my-posi_tip1</guid>
                <pubDate>2014-05-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>先物・オプションのシミュレーションサイト</title>
                <description>&lt;p&gt;Project: 「&lt;a href=&quot;http://my-posi.herokuapp.com/&quot;&gt;&lt;strong&gt;みんなのポジション&lt;/strong&gt;&lt;/a&gt;」: &lt;a href=&quot;https://github.com/happyclam/my-posi&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;開発の動機&lt;/h3&gt;
&lt;p&gt;当時、利用している証券会社のシステムが物足りなく信用できないものであったため自作しました。でも自分で作成した後、まもなくネット証券側もシステムをリニューアルして、自分のものより遥に高機能なものに置き換わったのですが、損益グラフを表示した時にグラフのメモリ幅を変更出来ないため見にくいという不満があったりするので、その点でまだは自分のソフトの方が優れているかなと思っています。まぁオプション売買を活発にしている人はそれ程多くないと思いますので、証券会社も力を入れていないのだと思います。５社ほどで取引したことありますが、そもそもオプション売買のシミュレーション機能なんて無い証券会社もありました。&lt;br /&gt;
最近は自分もあまりオプション取引をしていないのでよく知りませんが、今ではWebベースでもWindowsネイティブソフト並にユーザインターフェースに凝ったソフトを提供している証券会社があるかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;機能&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;日経225先物、日経225先物ミニ、日経225オプション(CALL,PUT)の建玉を一つのポジション、複数のポジションをまとめたものをストラテジーとして、ユーザ毎の複数のストラテジーの保存。&lt;/li&gt;
  &lt;li&gt;複数の建玉の売買シミュレーションと損益推移（個別・合算）グラフを表示&lt;br /&gt;
※ブラックショールズモデルを利用したオプション理論価格計算に対応しているので、満期（SQ）時の損益だけでなく、現時点での原資産価格（日経225先物価格）毎の損益推移を表示出来ます&lt;/li&gt;
  &lt;li&gt;twitterを利用したユーザー認証とポジションをtwitterで呟く&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;er&quot;&gt;ER図&lt;/h3&gt;
&lt;object data=&quot;/pdf/ERD.pdf&quot; width=&quot;760&quot; height=&quot;480&quot;&gt;
&lt;p&gt;ご覧の環境では、object要素がサポートされていないようです。&lt;a href=&quot;/pdf/ERD.pdf&quot;&gt;PDFファイルをダウンロードしてください&lt;/a&gt;&lt;/p&gt;
&lt;/object&gt;

&lt;p&gt;UserモデルとStrategyモデルが1対多、StrategyモデルとPositionモデルが1対多で関連付けられている単純なテーブル構造です。&lt;br /&gt;
他のテーブルと関連付けられていないCandlestickモデルというのはネット上に転がっている先物価格のロウソク足用のcsvデータを流し込むためのテーブルで、ヒストリカル・ボラティリティ（HV）を計算するためだけに使用しています。HVの計算方法には色々あるようですが、自分が使用したのは&lt;a href=&quot;http://www.option-dojo.com/kn/225_vola.html&quot;&gt;ここ&lt;/a&gt;に記載されている方法に倣っています。&lt;br /&gt;
気が向いたときにcsvデータを手動で更新するという運用の仕方をしてました。画面から手入力するとその値を優先して使用するようにしているので、実際にはHVを手入力して使うことが多かったです。開発当時は無かったのですが、今なら日経平均ボラティリティインデックスがリアルタイムで更新されているのでその値を手入力する方がいいかもしれません。20%（日経平均VIが20ポイント）であれば0.2を入力します。このHVの値を使ってオプション理論価格を算出します。&lt;br /&gt;
※ボラティリティにはHVとは別にインプライド・ボラティリティ（IV）というものがありますが、ボラティリティに関しては別記事を書こうと思います。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;テーブル構造&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Userテーブル&lt;/em&gt;  &lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;内容&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;例&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;name&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;サイト内で使用する独自のユーザ名&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;provider&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;twitter認証APIで返される文字列&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;“twitter”&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;screen_name&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;twitter認証APIで返される文字列&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;“SappierBoy”&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;uid&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;twitter認証APIで返される文字列&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;“1111111111”&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Strategyテーブル&lt;/em&gt;  &lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;内容&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;例&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;draw_type&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;損益グラフを個別表示するか合算表示するか&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;1,未定義&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;interest&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;金利&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;0.02&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;name&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;ストラテジー名&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;“abc戦略”&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;range&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;グラフの幅デフォルト500とした相対数値で拡大・縮小&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;500&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;sigma&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;オプション理論価格計算に使用するボラティリティ(HV)&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;0.2&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Positionテーブル&lt;/em&gt;  &lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;内容&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;例&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;distinct&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;商品種別（日経225先物、日経225先物mini、CALLオプション、PUTオプション）&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;exercise&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;行使価格（オプションの場合のみ、先物の場合はnil）&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;0.02&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;expiration&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;限月（満期月）&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;“2014/06”&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;maturity&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;残存日数（1日に満たない場合も日数換算）&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;0.1～365&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;number&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;オプション理論価格計算に使用するボラティリティ&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;0.2&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;sale&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;売り、買いの区別&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;unit&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;商品単価&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Candlestickテーブル&lt;/em&gt;&lt;br /&gt;
※どこから先物価格のデータを取得するかでテーブル構造は変わるので省略します。必要なのはオプションの原資産となる先物価格の終値20日分です。私が利用していたのは&lt;a href=&quot;http://k-db.com/&quot;&gt;このサイト&lt;/a&gt;です。&lt;br /&gt;
以下のようにcsvデータをダウンロード  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;wget -O ./lib/futures.csv &quot;http://k-db.com/site/jikeiretsuF.aspx?c=101&amp;amp;year=0&amp;amp;download=csv&quot;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;csvデータから先物価格データを格納      &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rails runner Candlestick::biteoff
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-3&quot;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E4%B8%96%E7%95%8C%E4%B8%80%E3%82%84%E3%81%95%E3%81%97%E3%81%84%E9%87%91%E8%9E%8D%E5%B7%A5%E5%AD%A6%E3%81%AE%E6%9C%AC%E3%81%A7%E3%81%99-%E7%94%B0%E6%B8%95-%E7%9B%B4%E4%B9%9F/dp/4534040512/ref=sr_1_1?ie=UTF8&amp;amp;qid=1413415898&amp;amp;sr=8-1&amp;amp;keywords=%E3%80%8C%E4%B8%96%E7%95%8C%E4%B8%80%E3%82%84%E3%81%95%E3%81%97%E3%81%84%E9%87%91%E8%9E%8D%E5%B7%A5%E5%AD%A6%E3%81%AE%E6%9C%AC%E3%81%A7%E3%81%99%E3%80%8D&quot;&gt;「世界一やさしい金融工学の本です」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>http://happyclam.github.io/project/2014-05-24/my-posi</link>
                <guid>http://happyclam.github.io/project/2014-05-24/my-posi</guid>
                <pubDate>2014-05-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>rspecに納得できない</title>
                <description>&lt;p&gt;先日衝動買いした&lt;a href=&quot;http://www.amazon.co.jp/Instant-RSpec-Test-Driven-Development-How-ebook/dp/B00DMYO1QK&quot;&gt;Instant RSpec Test-Driven Development How-to [Kindle版]&lt;/a&gt;の最初に出てくるサンプルコード&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;#location_spec.rb
describe Location do
  describe &quot;#initialize&quot; do
    it &quot;sets the latitude and longitude&quot; do
      loc = Location.new(:latitude =&amp;gt; 38.911268,
                         :longitude =&amp;gt; -77.444243)
      loc.latitude.should == 38.911268
      loc.longitude.should == -77.444243
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;上記テストを通過させるために「自分が書いたコード」が以下のもの&lt;code&gt;rspec failed&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;   #my_answer.rb  
   class  Location  
       attr_accessor :latitude  
       attr_accessor :longitude  
       def initialize(lati=nil, long=nil)  
           @latitude = lati  
           @longitude = long  
       end  
   end  
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;「リファクタリング前のコード」として本で紹介されているコード&lt;code&gt;rspec passed&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;   #bad_answer.rb
   class  Location
       def initialize(args = {});end
       def latitude
           38.911268
       end
       def longitude
           -77.444243
       end
   end
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;「リファクタリング後のコード」として本で紹介されているコード&lt;code&gt;rspec passed&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-Ruby&quot;&gt;   #model_answer.rb
   class Location
       attr_accessor :latitude, :longitude
       def initialize(args = {})
           self.latitude = args[:latitude]
           self.longitude = args[:longitude]
       end
   end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストを通過させるためだけに書かれたような「リファクタリング前のコード」がエラーにならないのに、上記「自分のコード」がエラーになるのは納得がいかない。&lt;br /&gt;
自分のコードに何かエラーにしなければならない理由があるのか？自分にはわからないので誰か教えてください。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/programming/2014-05-17/inflexible-rspec</link>
                <guid>http://happyclam.github.io/programming/2014-05-17/inflexible-rspec</guid>
                <pubDate>2014-05-17T00:00:00+09:00</pubDate>
        </item>


</channel>
</rss>
