<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>自己満足プログラミング</title>
        <description>自己満足プログラミング - happyclam</description>
        <link>http://happyclam.github.io</link>
        <link>http://happyclam.github.io</link>
        <lastBuildDate>2014-01-14T23:43:14+09:00</lastBuildDate>
        <pubDate>2014-01-14T23:43:14+09:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Jekyll Bootstrapのテンプレート　</title>
                <description>&lt;p&gt;&lt;a href=&quot;http://melborne.github.io/2012/05/13/first-step-of-jekyll/&quot;&gt;「30分のチュートリアルでJekyllを理解する」&lt;/a&gt;を見て一通り理解できたので、見た目を格好良くしようと思い&lt;a href=&quot;http://themes.jekyllbootstrap.com/&quot; title=&quot;Jekyll-bootstrap&quot;&gt;Jekyll Bootstrap&lt;/a&gt;のテンプレートを適用後username.github.ioにpushしたんだけど表示されない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;まずgithubから &lt;br/&gt;
&lt;code&gt;The submodule 'xxxxx' was not properly initialized with a '.gitmodules' file.&lt;/code&gt;&lt;br/&gt;
というメールが来た。どうもsubmoduleというのがよく分からなかったのだけど&lt;a href=&quot;http://qiita.com/sotarok/items/0d525e568a6088f6f6bb&quot; title=&quot;Git submodule の基礎&quot;&gt;ここ&lt;/a&gt;を参考に解決&lt;br/&gt;
&lt;code&gt;jekyll build&lt;/code&gt;で静的ファイルを生成したはずだから、build後はテンプレートは必要ないのかと思ったけどsubmoduleとしてcommitしなければいけないらしい。今までgit使っていてsubmoduleなんて使ったこと無かったけど、submodule内のcommitは外のcommitとは別途実行する必要（当然といえば当然だけど）があるみたいで、なんだかややこしそうな仕組みだ。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;次に来たメールがこんなの&lt;br/&gt;
&lt;code&gt;The tag 'math' in 'xxxxx' is not a recognized Liquid tag.&lt;/code&gt;&lt;br/&gt;
&lt;a href=&quot;http://melborne.github.io/2012/05/13/first-step-of-jekyll/&quot; title=&quot;30分のチュートリアルでJekyllを理解する&quot;&gt;数式を表示するプラグイン（Mathjax.rb）&lt;/a&gt;を試しに使っていたのだが、テンプレートを適用したためテンプレート内に存在するdefault.htmlを修正する必要が出てきた。テンプレート内のファイルに変更を加えたらテンプレートをupdateしたときに問題が出るんじゃないの？と思いながらもテンプレート内のdefault.html&lt;a href=&quot;%22default.html%E3%81%8C%E8%A4%87%E6%95%B0%E3%81%82%E3%81%A3%E3%81%A6%E3%82%84%E3%82%84%E3%81%93%E3%81%97%E3%81%84%E3%81%A7%E3%81%99%E3%81%8C%E3%80%81%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E5%86%85%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B%E5%BF%85%E8%A6%81%E3%81%AF%E7%84%A1%E3%81%8F%E3%80%81_include/%E4%BB%A5%E4%B8%8B%E3%81%AB%E3%81%82%E3%82%8Bdefault.html%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8C%E3%81%B0%E3%81%84%E3%81%84%E3%82%88%E3%81%86%E3%81%A7%E3%81%99%E3%80%82%22&quot;&gt;^1&lt;/a&gt;にMathJax.jsを読み込むコードを追加&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ようやく表示出来るかとおもったら、また次のようなメールが&lt;br/&gt;
&lt;code&gt;page build failed&lt;/code&gt;&lt;br/&gt;
今回のメールは理由が書いていない。どうすりゃいいの？ローカルでは問題ないのに。&lt;br/&gt;
googleで検索すると&lt;a href=&quot;http://modalsoul.github.io/environment/2013/08/17/Github-pages-build-failure/&quot;&gt;ここ&lt;/a&gt;にいろんなケースが書いてあった。こんなこと全部はやってられるかって感じ。herokuでも感じていたけど、やりたいことと関係ないところで手間がかかるから、運用の手間は増えるけどEC2とかを使って全部自分でサーバー環境作るべきか？とか思案に耽ってしまった。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;気分を入れ替えてgithubのレポジトリを削除して作り直すことにした。そもそも&lt;a href=&quot;http://krakenbeal.blogspot.jp/2012/05/ruby-jekyll-jekyll-bootstrap.html&quot;&gt;このサイト&lt;/a&gt;を参考にjekyllのbuild環境を含めてレポジトリを作ったのだけど、githubにある「Automatic Page Generator」のボタンをクリックしてレポジトリを新しく作り直してみると、リポジトリには生成された静的コンテンツのみが含まれていた。ということはgithubのリポジトリにはjekyllで生成された結果ファイルのみを含めるべきなのか？まぁgeneratorとはそうやって使うのが普通だろうけど、herokuを使っている自分としては開発環境（というかファイル生成環境）毎pushするのかと思っていたので少々面食らった。githubからbuild errorの通知メールを送ってくれるということはgithub側で自動buildしてくれる仕組みはあるようだけど、ローカル環境でbuildした結果だけをpushしても問題はないようだ。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;結論。やったのは以下の３作業だけ。ネットで検索しているとgh-pagesブランチを作れとか書いてあるが、別ブランチを作ったらgithubからbuild errorのメールが届いたのでmasterブランチのままです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;1 githubのメニューからusername.github.ioという名前のrepositoryを新規作成&lt;br/&gt;
2 ローカル環境にcloneして、jekyll generatorで出力した_siteディレクトリ以下のファイルをcopyしてcommit&lt;br/&gt;
  &lt;code&gt;git clone https://github.com/username/username.github.io.git&lt;/code&gt;&lt;br/&gt;
<<<<<<< HEAD
  &lt;code&gt;cp -rp ../localrepository/_site/* .&lt;/code&gt;&lt;br/&gt;
=======
  &lt;code&gt;cp ../localrepository/_site/* .&lt;/code&gt;&lt;br/&gt;
>>>>>>> origin/master
  &lt;code&gt;git commit -a -m &quot;copy from _site directory of jekyll project&quot;&lt;/code&gt;&lt;br/&gt;
3 masterブランチとしてpush&lt;br/&gt;
  &lt;code&gt;git push origin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;  何かネットの情報に振り回されて余計な時間を喰ってしまった感じです。githubの仕様が変わったのか、今頃github-pagesに手を出す私は珍しいのか、ローカルにjekyllをインストールして使う人は少ないのか知りませんが、上に書いた手順を紹介しているサイトは見かけませんでした。このやり方で運用しようと思います。&lt;/p&gt;
</description>
                <link>http://happyclam.github.io/practice/2014-01-12/jekyll-bootstrap</link>
                <guid>http://happyclam.github.io/practice/2014-01-12/jekyll-bootstrap</guid>
                <pubDate>2014-01-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Jekyllの練習</title>
                <description>&lt;p&gt;jekyllで数式出力を試してみた。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
Formular\ from Wikipedia\\

\int_0^3 9x^2 + 2x + 4\, dx = 3x^3 + x^2 + 4x + C \Big\rbrack_0^3 = 102\\

e^{x+iy} = e^x(\cos y + i\sin y)\\

x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
  \\
Simple\ FDTD\ Algorithm\ and\ Devils\ in\ the\ Details \\
\begin{eqnarray}
\psi(x,t + \Delta t) &amp;=&amp; -\psi(x, t - \Delta t) + [2 + \frac{v^2\Delta t^2}{\Delta x ^2} d_x^2] \psi(x,t) \\
                       &amp;=&amp; -\psi(x, t - \Delta t) + 2\psi(x,t) + \frac{v^2\Delta t^2}{\Delta x ^2} d_x^2 \psi(x,t) \\
                       &amp;=&amp; -\psi(x, t - \Delta t) + 2\psi(x,t) + \frac{v^2\Delta t^2}{\Delta x ^2}
                       [ \psi(x - \Delta x, t) + \psi(x + \Delta x, t) - 2 \psi(x, t) ] \\
\end{eqnarray}

&lt;/script&gt;

</description>
                <link>http://happyclam.github.io/practice/2014-01-10/jekyll-practice</link>
                <guid>http://happyclam.github.io/practice/2014-01-10/jekyll-practice</guid>
                <pubDate>2014-01-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>shoesおもしろい</title>
                <description>&lt;h2&gt;shoesとは&lt;/h2&gt;

&lt;p&gt;shoesはrubyで作られたgui開発ツールです。&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/5485761.js?file=drawing.rb&quot;&gt; &lt;/script&gt;


&lt;h2&gt;Try Ruby&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, friend!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; Myname is #[@name}!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;happyclam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;happyclam&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;happyclam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; Hello, friend!&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; My name is happyclam!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



</description>
                <link>http://happyclam.github.io/practice/2014-01-09/ruby-is-great</link>
                <guid>http://happyclam.github.io/practice/2014-01-09/ruby-is-great</guid>
                <pubDate>2014-01-09T00:00:00+09:00</pubDate>
        </item>


</channel>
</rss>
