<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>自己満足プログラミング</title>
        <description>自己満足プログラミング - happyclam</description>
        <link>http://happyclam.github.io</link>
        <link>http://happyclam.github.io</link>
        <lastBuildDate>2014-06-17T09:16:22+09:00</lastBuildDate>
        <pubDate>2014-06-17T09:16:22+09:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>ツイートを監視して集計する（client側）</title>
                <description>&lt;h3&gt;サーバースクリプトの状態遷移&lt;/h3&gt;

&lt;p&gt;　言うまでもなくclient側と言ってもWebサーバ上で動いているわけなのでユーザから見ればサーバーとして機能しているわけですが、TwitterAPIを使ってデータをDBに保存するサーバースクリプトに対してclient側ということです。&lt;br/&gt;
state_machine gemを利用してサーバースクリプトの状態を管理しています。
&lt;img src=&quot;/images/tweetwatch.png&quot; alt=&quot;状態遷移図&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;状態遷移表&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; status\method    &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt;     start       &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt;     store       &lt;/th&gt;
&lt;th style=&quot;text-align:center;&quot;&gt;     stop        &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 停止中(down)      &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 待機中(prepared) &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;      -          &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;      -         &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 待機中(prepared)  &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;       -          &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 集計中(storing) &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 停止中(down)   &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 集計中(storing)   &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;       -          &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt;      -          &lt;/td&gt;
&lt;td style=&quot;text-align:center;&quot;&gt; 停止中(down)   &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;サーバー停止中のユーザー画面&lt;/em&gt;&lt;br/&gt;
&lt;img src=&quot;/images/state1.png&quot; alt=&quot;サーバー停止中&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;サーバー集計中のユーザー画面&lt;/em&gt;&lt;br/&gt;
&lt;img src=&quot;/images/state2.png&quot; alt=&quot;サーバー集計中&quot; /&gt;&lt;br/&gt;
　ユーザ向け画面では「停止中」と「集計中」の２つの状態しかないのですが、EventMachineを使用しているサーバースクリプトでは、接続確立が完了した状態（post_initイベントが発生後）にならないとコマンドラインで渡したパラメータが有効にならないので、サーバースクリプトを起動した直後の状態を「待機中」として管理しています。&lt;/li&gt;
&lt;/ul&gt;


&lt;!-- other list --&gt;


&lt;ul&gt;
&lt;li&gt;停止中 ----- サーバースクリプト停止中&lt;/li&gt;
&lt;li&gt;待機中 ----- サーバースクリプトが起動しているが、TwitterAPIを呼び出していない状態&lt;/li&gt;
&lt;li&gt;集計中 ----- TwitterAPIを呼び出しツイートデータをDBに保存している状態&lt;br/&gt;
※「集計中」から「待機中」には遷移できません（停止して再起動）。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;機能&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;server側スクリプトの制御（起動、終了、状態確認）&lt;br/&gt;
※遅いノートPC（Atom機）で試したところserver側スクリプト起動に時間がかかり、接続がタイムアウトすることがあったので５秒のsleepを入れています。&lt;/li&gt;
&lt;li&gt;server側のスクリプトがDBに保存したツイートデータを集計してグラフ表示する。&lt;br/&gt;
※Twitterのデータ構造はハッシュタグを本文とは別に保持しているようですが、SQLで集計する際にハッシュタグで集計するのはコストがかかるので、本文の内容でgroup byするという単純なやり方で妥協しています。詳細は別記事にするつもりです。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;ER図&lt;/h3&gt;

&lt;object data=&quot;/pdf/struct_tweetwatch.pdf&quot; width=&quot;600&quot; height=&quot;600&quot;&gt;
&lt;p&gt;ご覧の環境では、object要素がサポートされていないようです。&lt;a href=&quot;/pdf/struct_tweetwatch.pdf&quot;&gt;PDFファイルをダウンロードしてください&lt;/a&gt;&lt;/p&gt;
&lt;/object&gt;


&lt;ul&gt;
&lt;li&gt;Tweetテーブルへの書き込みはサーバースクリプトのみで、client側のRailsアプリからTweetテーブルへのアクセスはRead onlyです。&lt;/li&gt;
&lt;li&gt;Servモデルはユーザがサーバースクリプトを起動する時に指定したTwitter検索タグとサーバースクリプトの状態を管理します。&lt;/li&gt;
&lt;li&gt;ユーザは複数のTrackモデル（検索タグ）を保存できますが、サーバースクリプト起動時に指定出来るタグは一つだけです。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;　&lt;/p&gt;
</description>
                <link>http://happyclam.github.io/project/2014-06-07/tweetwatch_client</link>
                <guid>http://happyclam.github.io/project/2014-06-07/tweetwatch_client</guid>
                <pubDate>2014-06-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ツイートを監視して集計する（server側）</title>
                <description>&lt;h3&gt;EventMachineで簡単インターフェース&lt;/h3&gt;

&lt;p&gt;　初めて&lt;a href=&quot;http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/&quot;&gt;morizyun氏のこの記事&lt;/a&gt;を読んだときはEventMachineとかforemanとかって何をするものか知らなかったのですが、EventMachineというのは「&lt;a href=&quot;https://morizyun.github.io/blog/reactor-pattern-ruby/&quot;&gt;[Ruby] Reactorパターンについて&lt;/a&gt;」にも書いてある通り、ソケットの受信待機をして貰って簡単にReactorパターンを実現することが出来るツールってことのようです。だからわざわざ自分でプロセス間通信の手続きを書く必要がなくアプリケーションレベルのコマンドを用意してあげるだけで済むのではないか？と思いながら作ったら思惑通りにうまく動いたって感じです。実際に組み込む前には、以下のような単純なサンプルで確認しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby:serv_sample.rb&quot;&gt;#server側サンプル  
require &#39;eventmachine&#39;

class Serv &amp;lt; EM::Connection
  attr_accessor :track
  def post_init
    puts &quot;myserv: init&quot;
  end

  def receive_data(data)
    puts data
    send_data @track
    EM.stop if data =~ /stop/i
  end

  def connection_completed
    puts &quot;myserv: completed&quot;
  end

  def unbind
    puts &quot;myserv: unbind&quot;
  end
end

EM.run do
  EM.start_server(&quot;127.0.0.1&quot;, 10000, Serv) do |conn|
    conn.track = ARGV[0]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のようにコマンドラインパラメータを付加して起動し、&lt;br/&gt;
&lt;code&gt;ruby myserv.rb O.K.&lt;/code&gt;&lt;br/&gt;
クライアント接続時にServクラスのプロパティに保持されていることを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby:client.rb&quot;&gt;#client側サンプル
require &quot;net/telnet&quot;

begin
  localhost = Net::Telnet::new(&quot;Host&quot; =&amp;gt; &quot;localhost&quot;,
                             &quot;Port&quot; =&amp;gt; 10000,
                             &quot;Timeout&quot; =&amp;gt; 1,
                             &quot;Telnetmode&quot; =&amp;gt; false,
                             &quot;Output_log&quot; =&amp;gt; &quot;./temp0.log&quot;,
                             &quot;Prompt&quot; =&amp;gt; &quot;O.K.&quot;)
  localhost.cmd(&quot;search word&quot;) { |c| print c }
  localhost.close
  localhost = nil
  p &quot;end&quot;
rescue Net::ReadTimeout
  p &quot;readtimeout&quot;
  p $!.to_s
rescue
  p $!.to_s
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このserver側の処理を、twitterAPIを使ってDBに検索結果を保存するスクリプトに組み込んで、client側の処理をRails製のサイトに組み込めばいいわけです。&lt;br/&gt;
　あと、server側のスクリプトは、ユーザ毎に起動してユーザがWebサイトから制御しなければならないので、foremanは必要無さそうです。&lt;/p&gt;

&lt;h3&gt;サーバースクリプトへのパラメータの受け渡し&lt;/h3&gt;

&lt;p&gt;　EventMachine::Connectionを継承したクラスServにユーザ情報を保存するメンバ変数（プロパティ）を用意して、Webサイト（client側）からサーバースクリプトを起動する時にコマンドライン引数でそれらの値を渡してあげます。起動の際に「10000+ユーザID」をポート番号に指定することでWebサイト利用者とサーバースクリプト利用者を一致させています。EventMachineを使ったプログラム同士が変数を共有する仕組みのようなものがあるかもしれませんが、ステートレスなHTTPで動いているWebサイトから起動するのだから、コマンドラインで渡すのがちょうど良さそうです。&lt;br/&gt;
　twitterのStreamingAPIを使用する部分は&lt;a href=&quot;/project/2014-05-30/tweetwatch&quot;&gt;以前書いた記事&lt;/a&gt;で紹介したmorizyun氏のコードをServ.trackingメソッドに閉じ込めてほぼそのまま動かしています。twitter側でエラーが発生した場合このままでいいのかよく分かりませんが、エラーになればWebサイト側からサーバースクリプトを再起動してもらえばいいという考え方で作ってます。&lt;br/&gt;
　client側からserver側スクリプトに受け渡すパラメータはTwitterAPIを利用するために必要な認証key文字列（４種類）とユーザIDとTwitterのfilterAPIに渡す検索文字列（検索タグ）です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby:myserv.rb&quot;&gt;#実際のソースの一部
require &#39;eventmachine&#39;
require &#39;optparse&#39;

class Serv &amp;lt; EM::Connection
  attr_accessor :uid
  attr_accessor :track
  attr_accessor :c_key
  attr_accessor :c_secret
  attr_accessor :a_key
  attr_accessor :a_secret
  def receive_data(data)
    case data
    when /stop/i
      send_data &quot;O.K.&quot;
      EM.stop
    when /check/i
      send_data @track
    省略
      :

  def tracking(track, c_key, c_secret, a_key, a_secret, uid)
    stream = Twitter::JSONStream.connect(
  省略
    :

EM.run do
  EM.start_server(&quot;127.0.0.1&quot;, 10000 + params[&quot;p&quot;].to_i, Serv) do |conn|
    conn.track = params[&quot;t&quot;]
    conn.uid = params[&quot;p&quot;].to_i
    conn.c_key = params[&quot;c&quot;]
    conn.c_secret = params[&quot;k&quot;]
    conn.a_key = params[&quot;s&quot;]
    conn.a_secret = params[&quot;a&quot;]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://keijinsonyaban.blogspot.jp/2010/12/eventmachine.html&quot;&gt;【翻訳】EventMachine入門 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gihyo.jp/dev/serial/01/ruby/0032&quot;&gt;Reactorで非同期処理をやってみよう（2）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>http://happyclam.github.io/project/2014-06-06/tweetwatch_server</link>
                <guid>http://happyclam.github.io/project/2014-06-06/tweetwatch_server</guid>
                <pubDate>2014-06-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>モウセンゴケ買ってみた</title>
                <description>&lt;h3&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/B002DOEJ1W/ref=pd_lpo_sbs_dp_ss_3?pf_rd_p=466449256&amp;amp;pf_rd_s=lpo-top-stripe&amp;amp;pf_rd_t=201&amp;amp;pf_rd_i=B0029PVS32&amp;amp;pf_rd_m=AN1VRQENFRJN5&amp;amp;pf_rd_r=1PA8NW26VM11682HVNSS&quot;&gt;「コバエがホイホイ」&lt;/a&gt;の代わりになるかも&lt;/h3&gt;

&lt;p&gt;　&lt;a href=&quot;http://o.x0.com/m/35898&quot;&gt;トコトン掘り下げ隊！生き物にサンキュー！！【★巨大食虫植物ＳＰ】&lt;/a&gt;というテレビ番組で食虫植物が虫を捕えているのを見ながら、そう言えば毎年暑くなってくると&lt;a href=&quot;http://www.amazon.co.jp/gp/product/B002DOEJ1W/ref=pd_lpo_sbs_dp_ss_3?pf_rd_p=466449256&amp;amp;pf_rd_s=lpo-top-stripe&amp;amp;pf_rd_t=201&amp;amp;pf_rd_i=B0029PVS32&amp;amp;pf_rd_m=AN1VRQENFRJN5&amp;amp;pf_rd_r=1PA8NW26VM11682HVNSS&quot;&gt;コバエがホイホイ&lt;/a&gt;を２回ほど購入していることを思いだし、こいつらを飼っていれば金使わなくて済むじゃんと考えモウセンゴケを買うことにしました。&lt;br/&gt;
　コバエ退治が目的なのでハエトリソウだとスカスカで逃げられると思ったのでモウセンゴケに決めたんだけど、室内で飼うことを考えたら、サイズ的にも見てくれから判断してもモウセンゴケが一番良さそうです。Amazonで調べると実に種類が豊富。一番定番そうなドロセラ・カペンシスを購入したのですが、シャモジ型の葉のドロセラ・アングリカも欲しくなって、オマケにテレビで紹介されていなかったムシトリスミレと立て続けに購入してしまいました。
全然知らない世界でしたが、値段が結構お手頃なのも趣味にするには良さそうですね、今はセファロタス（和名：フクロユキノシタ）が欲しくなってきてます。すでに食虫植物に嵌ってるかも。&lt;br/&gt;
　今後ちゃんと飼育できるかどうかまだ分からないし、もし熱が冷めなければ、カテゴリ作って定期的に記事を書いていこうかなと思ってます。&lt;/p&gt;

&lt;h3&gt;飼育環境&lt;/h3&gt;

&lt;p&gt;　購入時に入っていたプラケースのまま様子を見てもよかったのかもしれませんが、既に購入した植物たちに愛着が湧いているので、プラケースじゃ可哀想、せめて素焼きの鉢に入れてあげようと思い早速植え替えることにしました。植物にとって入れ物がプラスチックから素焼きに変わったことでどれ程うれしいことなのか分かりませんが、少なくとも悪いことでは無いでしょう。鉢のまわりを水で浸す「&lt;ruby&gt;&lt;rb&gt;腰水&lt;/rb&gt;&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;こしみず&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;」という方法がいいらしいので写真のようにしました。意外に根が長かったのでこれぐらい細長い鉢のほうがよさそうです。&lt;br/&gt;
&lt;img src=&quot;/images/drosera_garbini.png&quot; alt=&quot;カペンシス&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.co.jp/umbra-%E3%82%A2%E3%83%B3%E3%83%96%E3%83%A9-%E3%80%90Umbra%E3%80%91%E3%82%AC%E3%83%AB%E3%83%93%E3%83%8B%E3%82%AB%E3%83%B3-GARBINI-%E3%83%A1%E3%82%BF%E3%83%AA%E3%83%83%E3%82%AF%E3%83%9B%E3%83%AF%E3%82%A4%E3%83%88/dp/B003JMQ0GO&quot;&gt;【Umbra】ガルビニカン GARBINI CAN　 メタリックホワイト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E5%9B%BD%E5%86%85%E4%B8%89%E6%B2%B3%E9%89%A2-%E3%83%8F%E3%83%BC%E3%83%A2%E3%83%8B%E3%83%BC-%E7%B4%A0%E7%84%BC-%EF%BC%93%E5%8F%B7-%EF%BC%8F%E6%A4%8D%E6%9C%A8%E9%89%A2/dp/B007QJCLWI/ref=sr_1_1?s=diy&amp;amp;ie=UTF8&amp;amp;qid=1401491200&amp;amp;sr=1-1&amp;amp;keywords=%E3%83%8F%E3%83%BC%E3%83%A2%E3%83%8B%E3%83%BC+%E7%B4%A0%E7%84%BC+%EF%BC%93%E5%8F%B7&quot;&gt;素焼 ３号 ／植木鉢&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;　モウセンゴケは酸性土を好むらしいので土は&lt;a href=&quot;http://www.amazon.co.jp/%E8%8A%B1%E3%81%94%E3%81%93%E3%82%8D-%E3%83%96%E3%83%AB%E3%83%BC%E3%83%99%E3%83%AA%E3%83%BC%E3%81%AE%E5%9C%9F-5l/dp/B000IA88KG&quot;&gt;これ&lt;/a&gt;にしました。ホームセンターに置いてある物は一番少ないものでも５リットル入りで、そんなに要らないと思ったのですが、玄関脇に放ったらかしで植えてある&lt;ruby&gt;&lt;rb&gt;山茶花&lt;/rb&gt;&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;サザンカ&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;も調べてみると酸性土を好むらしいので、余ったらそちらに使えばいいと思い決めました。&lt;br/&gt;
　今の心配は設置場所。&lt;ruby&gt;&lt;rb&gt;西陽&lt;/rb&gt;&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;にしび&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;しかあたらない場所なので、調子悪いようであれば室内で飼うことは諦めるかもしれません。&lt;/p&gt;
</description>
                <link>http://happyclam.github.io/miscellaneous/2014-05-31/drosera</link>
                <guid>http://happyclam.github.io/miscellaneous/2014-05-31/drosera</guid>
                <pubDate>2014-05-31T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ツイートを監視して集計する</title>
                <description>&lt;p&gt;Project: 「tweetwatch」: まだGitHubにはアップしていません&lt;/p&gt;

&lt;h3&gt;開発の動機&lt;/h3&gt;

&lt;p&gt;　今年の都知事選の頃、多くのフォロワーを抱えている人（以下a氏と表記）が&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Twitterで&lt;strong&gt;#都知事選&lt;/strong&gt;というタグをつけて自分が投票した候補者の名前を呟けば、それを集計してくれるアプリ作れないかな～&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;と物欲しそうに呟いていたのが目に止まりました。&lt;br/&gt;
Yahooのアンケートのように、誰がどれぐらい票を獲得しているかtwitterで独自に確認しようという意図のようです。
　プログラマたるもの、そこで「すぐ出来ますよ」とリプライするような軽率な行動をとってはいけません。職業プログラマなら尚更です。誰かが手を挙げるかもと思いながらしばらく様子を見ていましたが、その呟きに対して反応する人はいなかったようです。こういう場合、相手がどれほどのものを要求しているかわからないので迂闊に出来ますなんて言えませんが、StreamingAPI使えばとりあえず使える程度のものであれば、すぐ出来るんじゃないかと思い調べてみました。&lt;/p&gt;

&lt;h3&gt;とりあえずローカル環境で動くもの&lt;/h3&gt;

&lt;p&gt;　「StreamingAPI」で検索すると役に立ちそうなサイトはすぐに見つかりました→&lt;a href=&quot;http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/&quot;&gt;「Herokuの無料枠でTwitter Stream APIを常時監視 =&gt; DBに保存するRubyコード」&lt;/a&gt;&lt;br/&gt;
このmorizyunって人のサイトは調べ物をしている際にはよくお世話になっていますが、今回見つけた記事も自分の要望その物です。私はherokuは使いませんでしたがほぼこの記事のコードそのままがローカル環境で動作しました。ツイートの集計がしたいのであればDBに溜まったデータに対してSQLを打ち込めば好きな結果が得られます。a氏に教えてあげようかとも思いましたが、おそらくプログラミングやSQLも知らないa氏が実際に自分のPCで動かすためにはそうとうな時間をかけてサポートしてあげないと無理だろうと思って止めておきました。自分が良かれと思って教えても、逆に恨まれることになり兼ねません。そうなんです、自分でニタニタ楽しむためのソフトを作れたとしても、それをひと様に使ってもらおうとするとまた一段とハードルが高くなるんですねぇ（今回は自分で楽しむものさえパクリですが）。&lt;/p&gt;

&lt;h3&gt;ひと様が使えるようにするために&lt;/h3&gt;

&lt;p&gt;　最初はDBにデータを格納するだけのシェルスクリプトを起動しながら、ユーザー向けのwebインターフェースを提供してあげればいいだけだからそれほど手間はかからないと思いましたが、そうすると２プロセス動かすことになり、herokuの無料枠では済まなくなります。それに運用環境を何とか用意したとしても、自分のtwitterアカウントの認証キーをそのサービスで利用するとなると、一人しか利用できないwebサービスになってしまいます。twitter社にAPI利用料を支払えば解決ですが、そこまでする気もないので開発に取りかかるのは躊躇してました。&lt;br/&gt;
で結局、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;運用環境に関してはとりあえず自宅サーバで動くようにしてから考える&lt;/li&gt;
&lt;li&gt;twitterのAPIキーをユーザ自身が登録して、そのキーを利用しながらDB格納プロセスを起動するようにする&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;という方針で作りました。
&lt;img src=&quot;/images/tweetwatch_screen.png&quot; alt=&quot;集計画面&quot; /&gt;  &lt;br/&gt;
DBにデータを格納するシェルスクリプトは、&lt;a href=&quot;http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/&quot;&gt;morizyun氏のコード&lt;/a&gt;を叩き台にしてWebサイトから制御するためのプロセス間通信用インターフェースを追加し、そのサーバーとなるシェルスクリプトに接続するクライアントアプリとなるユーザ向けのwebサイトを作る。そのwebサイトは&lt;a href=&quot;http://railstutorial.jp/&quot;&gt;Ruby on Rails チュートリアル&lt;/a&gt;でRSpecの勉強（写経）をしながら作ったものがあったのでそれを流用しています。&lt;br/&gt;
以降、DBにデータを格納する&lt;em&gt;サーバースクリプト（server側）&lt;/em&gt;とRails製&lt;em&gt;Webサイト（client側）&lt;/em&gt;に分けて紹介します。&lt;/p&gt;

&lt;hr /&gt;
</description>
                <link>http://happyclam.github.io/project/2014-05-30/tweetwatch</link>
                <guid>http://happyclam.github.io/project/2014-05-30/tweetwatch</guid>
                <pubDate>2014-05-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ボラティリティについて</title>
                <description>&lt;h3&gt;インプライド・ボラティリティ（IV）とヒストリカル・ボラティリティ（HV）&lt;/h3&gt;

&lt;p&gt;　ボラティリティには２種類ありますが、ニュースの記者や市況解説者が「ボラティリティ」という言葉を理解していないまま使っていることが多いと感じるので、以前から一言言っておきたいと思っていたことを書いておこうと思います。&lt;br/&gt;
　市況解説の中でも現物市場ではなく特に先物市場の解説をしている人が、先物価格の値動きが荒かった日などに「今日はボラの大きな一日でした」と解説しているのを聞くと「(・_・)......ン?」となることがあります、そういう日でもインプライドボラティリティ(IV)が低い日も結構あるからです。オプションの買いで勝負する時はボラが高い時が有利、逆に売りはボラが低い時が有利なのですが、IVが低い日に「今日は（オプション買いに）手出ししなくてよかった」と思っているところに、市況解説で「ボラの高い一日でした」なんて言われると「(‾△‾;)エッ・・そうだっけ？」となるわけです。実際にIVが高かったかどうかはスマイルチャートなどで確認できます。&lt;br/&gt;
　&lt;a href=&quot;http://www.option-dojo.com/kn/225_latest.html&quot;&gt;直近1年のボラティリティー&lt;/a&gt;をみればよく分かりますが、ヒストリカル・ボラティリティ（HV）とインプライド・ボラティリティ（IV）の動きは必ずしも一致していません。原資産である先物の動きがそれ程なくても、オプションの値動きが激しい日もあるということです。それにオプションは先物と違い、満期(SQ)が近づくとボラ(IV)が高くなるという性質（時間価値の減少に伴うもの）もあります。また、日経２２５先物とそれを原資産とする派生商品である日経２２５オプションの関係だけでなく、現物株とそれを原資産とする派生商品（株オプ等）の間でも同じことが言えます。&lt;br/&gt;
　まぁIVとHVの違いは理解しているけど、ボラティリティと言う言葉は単に「値動き」とか「値幅」と同義で使っているだけなので、区別する必要はないと言われればそれまでなのですが。&lt;/p&gt;

&lt;h3&gt;誤解を生む説明の仕方&lt;/h3&gt;

&lt;p&gt;　ネットや本ではよく&lt;strong&gt;「ボラティリティが高いとオプションのプレミアムが高くなる、ボラティリティが低いとオプションのプレミアムが低くなる」&lt;/strong&gt;と説明されています。でもこの文を読んでいる人を騙そうとする悪意があるかどうかは別にして、非常に誤解を生みやすい説明だと思います。なぜなら、&lt;strong&gt;ボラティリティが高いと&lt;/strong&gt;という前提条件がIVのことを指しているのかHVのことを指しているのかわかりません。&lt;br/&gt;
　もしIVのことを指しているとしたら、IVが高いとプレミアムが高くなるのはその通りですが、そのIVというものはオプションの価格から算出されているものだから当たり前のことを言っているに過ぎません。IVが高いとオプションのプレミアムが高くなるわけではなく、IVが高いってことはオプションが割高に買われているってことです。&lt;br/&gt;
　また、&lt;strong&gt;ボラティリティが高いと&lt;/strong&gt;という前提条件がHVのことを指しているのだとすると、HVが高いとオプションの&lt;strong&gt;理論価格&lt;/strong&gt;が高くなることは間違いないですが、オプションの&lt;strong&gt;実際の価格&lt;/strong&gt;が理論価格通りに高くなるとは限りません。HVが高いとオプションの価格（プレミアム）が高くなるのではなく、HVが高いとオプションの&lt;strong&gt;理論価格&lt;/strong&gt;が高くなると言うべきです。&lt;br/&gt;
　&lt;strong&gt;ボラティリティが高いと&lt;/strong&gt;という表現がIVのことを指しているとしてもHVのことを指しているとしても、いずれも不正確な文章だと言えます。IVとHVの違いを理解している人でもつい説明する手間を省いて、こういう表現をしがちなんだと思いますが、説明する側がよく理解していないケースも多いと思います。&lt;/p&gt;

&lt;h3&gt;違いが分かる説明の仕方&lt;/h3&gt;

&lt;p&gt;　&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E3%83%9C%E3%83%A9%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3&quot;&gt;wikipediaによるボラティリティの説明&lt;/a&gt;は学問的で、これはこれでいいのかもしれません。それに「インプライド・ボラティリティとは&lt;strong&gt;現実のオプション市場でついたオプション価格から逆算されたボラティリティ&lt;/strong&gt;のことである」とこれ以上望めない簡潔な言葉で言い表されています。&lt;br/&gt;
しかし、これ&lt;br/&gt;
&lt;img src=&quot;http://upload.wikimedia.org/math/c/8/9/c89911f0951782890cbb855572aa9de7.png&quot; alt=&quot;wikipediaのHVの数式&quot; /&gt;とか、&lt;br/&gt;
こういう&lt;br/&gt;
&lt;img src=&quot;http://upload.wikimedia.org/math/1/9/b/19beb2fcdc78f6d56e3e16ad3f04c624.png&quot; alt=&quot;wikipediaのIVの数式&quot; /&gt;難しい数式が出てくるので、「要するにどちらも値動きの荒さ、変動率のことだろ？」と言う感じで思考を中断してしまいがちだと思うのです。オプションという商品を理解しているつもりだった自分も、&lt;a href=&quot;http://my-posi.herokuapp.com&quot;&gt;先物・オプション売買損益シミュレーションサイト&lt;/a&gt;を自分で作ってみるまではIVとHVの違いを明確に区別出来ていなくて、よく似たような物ぐらいに考えていました。２つの間には相関関係が非常に薄いにも関わらずです。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
ヒストリカル・ボラティリティxとオプション理論価格yは以下のように表すことが出来て、  \\
y = ax\\
オプションの実際の価格がy_1であった時に、導き出されるものがインプライド・ボラティリティx_1である。  \\
x_1 = \frac{y_1}{a}\\
&lt;/script&gt;


&lt;p&gt;という感じで簡略化した数式を書いてくれれば２つのボラティリティの関係が分かりやすいと思うんですけど、どうでしょうか？&lt;/p&gt;
</description>
                <link>http://happyclam.github.io/miscellaneous/2014-05-27/my-posi_vola</link>
                <guid>http://happyclam.github.io/miscellaneous/2014-05-27/my-posi_vola</guid>
                <pubDate>2014-05-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DBのカラムに対応しないプロパティ</title>
                <description>&lt;h3&gt;日付型のカラムのデータを年月だけの文字列にしてコンボボックスに表示したい&lt;/h3&gt;

&lt;p&gt;先物やオプションの建玉を入力する時には限月を選ぶ必要がありますが、必要なのは年と月(&quot;2014/06&quot;等の文字列)だけです。でもDBに&quot;年/月&quot;のフォーマットで文字列として格納するのはあまりにも汚い。DBのカラム属性は日付型にしておいた方が何かと便利、というかしておくべきでしょう（日数や時間の差を計算する時に困ります）。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/images/dropdown_exp.png&quot; title=&quot;限月の選択&quot; alt=&quot;限月の選択&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;こういう場合、昔PHPで仕事していた時には、文字列型と日付型を相互にフォーマット変換するコードをView上のあちこちに散りばめながら実現していた記憶があります。&lt;/p&gt;

&lt;h3&gt;シンプルな実現方法&lt;/h3&gt;

&lt;p&gt;Position.expirationがDBのカラムに対応するプロパティで日付型です。そこにPosition.ym_expirationというDBにカラムが存在しない入出力用のプロパティを用意し、そのsetterとgetterを定義します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Model(Position)&lt;br/&gt;
getter(日付型のデータを、年/月のフォーマットの文字列に変換してして返す)&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code class=&quot;ruby:position.rb&quot;&gt;  def ym_expiration
    return self.expiration.strftime(&quot;%Y/%m&quot;) if self.expiration
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;setter(年/月の文字列データを日付01を付加して日付型に変換して格納)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby:position.rb&quot;&gt;  def ym_expiration=(ym_expiration)
    self.expiration = Date.strptime(ym_expiration + &quot;/01&quot;, &quot;%Y/%m/%d&quot;)
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Viewから呼ばれる、年/月の文字列データを返すメソッド&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby:position.rb&quot;&gt;  def get_expiration_list
    :省略
    :
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;View(_edit_position.html.erb)&lt;br/&gt;
Viewでは入出力用に追加したym_expirationプロパティだけを使うようにすれば、あたかもDBに対応するカラムのように扱えます。&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;code class=&quot;ruby:_edit_position.html.erb&quot;&gt;&amp;lt;td align=&quot;center&quot;&amp;gt;&amp;lt;%= f.select(&quot;ym_expiration&quot;, position.get_expiration_list, {:include_blank =&amp;gt; false}, {:class =&amp;gt; &quot;span6&quot;, :style =&amp;gt; &quot;width:90px;&quot;}) %&amp;gt;&amp;lt;/td&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CakephpやPHP5以上ならたぶん同じことが出来ると思いますが、もうPHPに戻りたくないし調べる気にもなりません&lt;/p&gt;

&lt;hr /&gt;
</description>
                <link>http://happyclam.github.io/programming/2014-05-26/my-posi_tip1</link>
                <guid>http://happyclam.github.io/programming/2014-05-26/my-posi_tip1</guid>
                <pubDate>2014-05-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>先物・オプションのシミュレーションサイト</title>
                <description>&lt;p&gt;Project: 「&lt;a href=&quot;http://my-posi.herokuapp.com/&quot;&gt;&lt;strong&gt;みんなのポジション&lt;/strong&gt;&lt;/a&gt;」: &lt;a href=&quot;https://github.com/happyclam/my-posi&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;開発の動機&lt;/h3&gt;

&lt;p&gt;当時、利用している証券会社のシステムが物足りなく信用できないものであったため自作しました。でも自分で作成した後、まもなくネット証券側もシステムをリニューアルして、自分のものより遥に高機能なものに置き換わったのですが、損益グラフを表示した時にグラフのメモリ幅を変更出来ないため見にくいという不満があったりするので、その点でまだは自分のソフトの方が優れているかなと思っています。まぁオプション売買を活発にしている人はそれ程多くないと思いますので、証券会社も力を入れていないのだと思います。５社ほどで取引したことありますが、そもそもオプション売買のシミュレーション機能なんて無い証券会社もありました。&lt;br/&gt;
最近は自分もあまりオプション取引をしていないのでよく知りませんが、今ではWebベースでもWindowsネイティブソフト並にユーザインターフェースに凝ったソフトを提供している証券会社があるかもしれません。&lt;/p&gt;

&lt;h3&gt;機能&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;日経225先物、日経225先物ミニ、日経225オプション(CALL,PUT)の建玉を一つのポジション、複数のポジションをまとめたものをストラテジーとして、ユーザ毎の複数のストラテジーの保存。&lt;/li&gt;
&lt;li&gt;複数の建玉の売買シミュレーションと損益推移（個別・合算）グラフを表示&lt;br/&gt;
※ブラックショールズモデルを利用したオプション理論価格計算に対応しているので、満期（SQ）時の損益だけでなく、現時点での原資産価格（日経225先物価格）毎の損益推移を表示出来ます&lt;/li&gt;
&lt;li&gt;twitterを利用したユーザー認証とポジションをtwitterで呟く&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;ER図&lt;/h3&gt;

&lt;object data=&quot;/pdf/ERD.pdf&quot; width=&quot;760&quot; height=&quot;480&quot;&gt;
&lt;p&gt;ご覧の環境では、object要素がサポートされていないようです。&lt;a href=&quot;/pdf/ERD.pdf&quot;&gt;PDFファイルをダウンロードしてください&lt;/a&gt;&lt;/p&gt;
&lt;/object&gt;


&lt;p&gt;UserモデルとStrategyモデルが1対多、StrategyモデルとPositionモデルが1対多で関連付けられている単純なテーブル構造です。&lt;br/&gt;
他のテーブルと関連付けられていないCandlestickモデルというのはネット上に転がっている先物価格のロウソク足用のcsvデータを流し込むためのテーブルで、ヒストリカル・ボラティリティ（HV）を計算するためだけに使用しています。HVの計算方法には色々あるようですが、自分が使用したのは&lt;a href=&quot;http://www.option-dojo.com/kn/225_vola.html&quot;&gt;ここ&lt;/a&gt;に記載されている方法に倣っています。&lt;br/&gt;
気が向いたときにcsvデータを手動で更新するという運用の仕方をしてました。画面から手入力するとその値を優先して使用するようにしているので、実際にはHVを手入力して使うことが多かったです。開発当時は無かったのですが、今なら日経平均ボラティリティインデックスがリアルタイムで更新されているのでその値を手入力する方がいいかもしれません。20%（日経平均VIが20ポイント）であれば0.2を入力します。このHVの値を使ってオプション理論価格を算出します。&lt;br/&gt;
※ボラティリティにはHVとは別にインプライド・ボラティリティ（IV）というものがありますが、ボラティリティに関しては別記事を書こうと思います。&lt;/p&gt;

&lt;h3&gt;テーブル構造&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Userテーブル&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; 名称         &lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; 内容                                           &lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; 例            &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; name         &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; サイト内で使用する独自のユーザ名                 &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;               &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; provider     &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; twitter認証APIで返される文字列                  &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; &quot;twitter&quot;     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; screen_name  &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; twitter認証APIで返される文字列                  &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; &quot;SappierBoy&quot;  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; uid          &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; twitter認証APIで返される文字列                  &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; &quot;1111111111&quot;  &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Strategyテーブル&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; 名称         &lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; 内容                                                &lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; 例            &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; draw_type    &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 損益グラフを個別表示するか合算表示するか              &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 1,未定義      &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; interest     &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 金利                                                &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 0.02          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; name         &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; ストラテジー名                                       &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; &quot;abc戦略&quot;     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; range        &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; グラフの幅デフォルト500とした相対数値で拡大・縮小      &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 500          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; sigma        &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; オプション理論価格計算に使用するボラティリティ(HV)     &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 0.2          &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Positionテーブル&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; 名称         &lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; 内容                                           &lt;/th&gt;
&lt;th style=&quot;text-align:left;&quot;&gt; 例            &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; distinct     &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 商品種別（日経225先物、日経225先物mini、CALLオプション、PUTオプション） &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;       &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; exercise     &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 行使価格（オプションの場合のみ、先物の場合はnil） &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 0.02          &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; expiration   &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 限月（満期月）                                  &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; &quot;2014/06&quot;     &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; maturity     &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 残存日数（1日に満たない場合も日数換算）          &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 0.1～365      &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; number       &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; オプション理論価格計算に使用するボラティリティ    &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 0.2           &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; sale         &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 売り、買いの区別                                &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;               &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; unit         &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt; 商品単価                                        &lt;/td&gt;
&lt;td style=&quot;text-align:left;&quot;&gt;               &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Candlestickテーブル&lt;/em&gt;&lt;br/&gt;
※どこから先物価格のデータを取得するかでテーブル構造は変わるので省略します。必要なのはオプションの原資産となる先物価格の終値20日分です。私が利用していたのは&lt;a href=&quot;http://k-db.com/&quot;&gt;このサイト&lt;/a&gt;です。&lt;br/&gt;
以下のようにcsvデータをダウンロード&lt;br/&gt;
&lt;code&gt;
wget -O ./lib/futures.csv &quot;http://k-db.com/site/jikeiretsuF.aspx?c=101&amp;amp;year=0&amp;amp;download=csv&quot;  
&lt;/code&gt;&lt;br/&gt;
csvデータから先物価格データを格納    &lt;br/&gt;
&lt;code&gt;  
rails runner Candlestick::biteoff
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E4%B8%96%E7%95%8C%E4%B8%80%E3%82%84%E3%81%95%E3%81%97%E3%81%84%E9%87%91%E8%9E%8D%E5%B7%A5%E5%AD%A6%E3%81%AE%E6%9C%AC%E3%81%A7%E3%81%99-%E7%94%B0%E6%B8%95-%E7%9B%B4%E4%B9%9F/dp/4534040512]&quot;&gt;「世界一やさしい金融工学の本です」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>http://happyclam.github.io/project/2014-05-24/my-posi</link>
                <guid>http://happyclam.github.io/project/2014-05-24/my-posi</guid>
                <pubDate>2014-05-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>rspecに納得できない</title>
                <description>&lt;p&gt;先日衝動買いした&lt;a href=&quot;http://www.amazon.co.jp/Instant-RSpec-Test-Driven-Development-How-ebook/dp/B00DMYO1QK&quot;&gt;Instant RSpec Test-Driven Development How-to [Kindle版]&lt;/a&gt;の最初に出てくるサンプルコード&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby:location_spec.rb&quot;&gt;describe Location do
  describe &quot;#initialize&quot; do
    it &quot;sets the latitude and longitude&quot; do
      loc = Location.new(:latitude =&amp;gt; 38.911268,
                         :longitude =&amp;gt; -77.444243)
      loc.latitude.should == 38.911268
      loc.longitude.should == -77.444243
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li&gt;上記テストを通過させるために「自分が書いたコード」が以下のもの&lt;code&gt;rspec failed&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;pre&gt;&lt;code class=&quot;ruby:my_answer.rb  &quot;&gt;   class  Location  
       attr_accessor :latitude  
       attr_accessor :longitude  
       def initialize(lati=nil, long=nil)  
           @latitude = lati  
           @longitude = long  
       end  
   end  
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;「リファクタリング前のコード」として本で紹介されているコード&lt;code&gt;rspec passed&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;pre&gt;&lt;code class=&quot;ruby:bad_answer.rb&quot;&gt;   class  Location
       def initialize(args = {});end
       def latitude
           38.911268
       end
       def longitude
           -77.444243
       end
   end
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;「リファクタリング後のコード」として本で紹介されているコード&lt;code&gt;rspec passed&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;pre&gt;&lt;code class=&quot;ruby:model_answer.rb&quot;&gt;   class Location
       attr_accessor :latitude, :longitude
       def initialize(args = {})
           self.latitude = args[:latitude]
           self.longitude = args[:longitude]
       end
   end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テストを通過させるためだけに書かれたような「リファクタリング前のコード」がエラーにならないのに、上記「自分のコード」がエラーになるのは納得がいかない。&lt;br/&gt;
自分のコードに何かエラーにしなければならない理由があるのか？自分にはわからないので誰か教えてください。&lt;/p&gt;
</description>
                <link>http://happyclam.github.io/programming/2014-05-17/inflexible-rspec</link>
                <guid>http://happyclam.github.io/programming/2014-05-17/inflexible-rspec</guid>
                <pubDate>2014-05-17T00:00:00+09:00</pubDate>
        </item>


</channel>
</rss>
