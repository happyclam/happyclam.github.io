<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>自己満足プログラミング</title>
        <description>自己満足プログラミング - happyclam</description>
        <link>http://happyclam.github.io</link>
        <link>http://happyclam.github.io</link>
        <lastBuildDate>2014-10-06T19:12:14+09:00</lastBuildDate>
        <pubDate>2014-10-06T19:12:14+09:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>三目並べ（tic tac toe）で遊んでみた（続き）</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;先読み手数を制限しても必勝の結論は出ないはず&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/software/2014-09-23/tictactoe_arrange/&quot;&gt;前回の記事&lt;/a&gt;で自分が作ったプログラムは千日手対応をしていないから先手必勝の結論が出ても信用できないって書きましたが、よく考えてみたら千日手対応していなくても先手必勝の評価が出てくるってことは、ArrangeLineってゲームが先手必勝であるか検証に使った自分のプログラムがバグっているかのどちらかであると気づきました。評価関数が返す値は一つの局面に関して勝ちか負けか引き分けかの三種類にしか分けていないので、千日手の局面は引き分けの一局面として評価しているはずで、引き分けに成り得るなら後手は引き分けになる手を選択し先手勝ちの評価にはならない。スタンダードの三目並べを調べた場合と違って、11手読みという手数を限定して先読みをしているわけだからそんなこともあるかと流してしまったけど、読み切っていないから勝ちか負けか決められない（引き分けになる）という評価が返ってくることはあっても、引き分けがあり得るのに必勝・必敗の評価を返してくるというのはバグっている可能性が高いのではないか。でも一応スタンダードな三目並べでは問題なさそうだし、バグの見当が付かなかったのでまずは先に千日手対応をしてみることにしました。&lt;br /&gt;
　その前にArrangeLineをダウンロードして自分のプログラムと対戦させて確認したのですが、ArrangeLineのLevel2で自分のプログラムが先手なのに千日手になり決着が付かないケースがありました。実際に千日手になることを確認していたためArrangeLineは双方最善手を打てば千日手になるゲームだと思ってしまったのですが、繰返しますが千日手になるのであればやっぱり先手必勝の結論が出るのはおかしい。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;千日手対応&lt;/h3&gt;
&lt;p&gt;　先読みの最中に過去に現れた局面が一定周期で続いて現れるかどうかを判定するってプログラムが重くなりそうだし、難しそうな気がして対応する気がしなかったのですが、よく考えてみると先読みの最中である必要は無く、実際に打った一手だけを局面毎に保存しておいて、先読みを開始する一手目の時だけ過去に同一局面があったかどうかを調べるだけで済みそうです。これなら重くなることもありません。&lt;br /&gt;
　※&lt;a href=&quot;/software/2014-09-23/tictactoe_arrange/&quot;&gt;前回の記事&lt;/a&gt;で必ず千日手になることを証明するのは難しいと書いたのは、完全読み切りが出来ない場合（将棋もその一つ）はたしかにその通りですが、先手必勝あるいは後手必勝という結論を返してくるということは完全読み切りが出来ているということなので、その時点で千日手は結論に関係無かったと言うことです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  #過去に同一局面があったかどうか判定
  def check_dup(sengo)
    temp = self.dup
    temp.unshift(sengo)
    return @duplication.has_key?(temp.hash)
  end
  #局面データのハッシュ値だけ保存
  def set_dup(sengo)
    temp = self.dup
    temp.unshift(sengo)
    @duplication[(temp).hash] = temp
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　局面データと手番データからハッシュ値を生成して保存するメソッドと、そのハッシュ値を検索するメソッドを追加。&lt;br /&gt;
　過去に評価した局面を再現したりその時の評価値を再利用したりするわけでは無く、過去に同一局面があったかどうかを判断するだけなので保存するのはハッシュ値だけでもいいのですが、一応局面と手番のデータを保存しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        if board.check_dup(turn)
          temp_v = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　そして局面を評価した後に過去に現れた局面なら強制的に評価値を引き分け（DRAW=0）にする処理を追加しただけです。引き分けでなく同じ局面を再現させたら負けとすることも考えられますが、それだとArrangeLineと対戦させたときにこのソフト側だけが不利なルールで戦うことになるのでよくありません。その他にも評価値を少し下げるとかいろいろ奥が深そうですが、将棋のように何らかの千日手に関するルールが無い限りは引き分けの評価（0）でよさそうです。&lt;br /&gt;
　ということで、同一局面を出現させたら引き分けという評価を返す状態で、前回の記事同様に一手打った状態から検証プログラムを動かしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; |1|2|3|
 |4|5|6|
 |7|X|9|
2手目: 1 評価値: 9
2手目: 2 評価値: 9
2手目: 3 評価値: 9
2手目: 4 評価値: 9
2手目: 5 評価値: 9
2手目: 6 評価値: 9
2手目: 7 評価値: 9
2手目: 9 評価値: 9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　前回と同じく初手に辺の部分に打てばやっぱり先手必勝になるという結果になります。そして実際のandroidアプリと対戦させて見たところ、以前は先手なのに必ず千日手になっていたケースでも千日手を避けるようになり、先手の場合に限っては必ず勝利することが出来るようです。なのでArrangeLineは先手必勝のゲームと言っていいでしょう。もし何か間違いに気づいた人がいれば連絡して下さい。景品を差し上げます…ウソです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;自作プログラムの対戦状況&lt;/em&gt;  &lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;先手・後手\ArrangeLineのLevel&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Level 1&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Level 2&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Level 3&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;自作プログラムが先手&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;自作プログラムが後手&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;初手が辺&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;負け&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;^&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;初手が辺以外&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;勝ち&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;千日手&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　ArrangeLineは乱数を使っているようなのでこの表の結果はいつも同じではないはずですが、自作プログラムが先手の場合はいつも勝ちます。それと千日手対応したのに千日手になることがあるのは自作のプログラムが後手で、負けるはずなのにArrangeLine側が初手で辺の部分（2,4,6,8）を取らなかったために起きる現象です。自作ソフト側としては後手なので勝てないから千日手に持っていくしか無い状況ってことです。これは&lt;a href=&quot;/software/2014-09-23/tictactoe_arrange/&quot;&gt;前回の記事&lt;/a&gt;で初手から検証した時に以下の結果になったことと符合します。初手で辺の部分を取らない場合は、勝てるとは限らないということです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; |1|2|3|
 |4|5|6|
 |7|8|9|
<<<<<<< HEAD
1手目: 1 評価値: 0
1手目: 2 評価値: 9
1手目: 3 評価値: 0
1手目: 4 評価値: 9
1手目: 5 評価値: 0
1手目: 6 評価値: 9
1手目: 7 評価値: 0
1手目: 8 評価値: 9
1手目: 9 評価値: 0
=======
1手目 1: 評価値: 0
1手目 2: 評価値: 9
1手目 3: 評価値: 0
1手目 4: 評価値: 9
1手目 5: 評価値: 0
1手目 6: 評価値: 9
1手目 7: 評価値: 0
1手目 8: 評価値: 9
1手目 9: 評価値: 0
>>>>>>> origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;先手・後手が決まった段階で勝負は既に決まっている&lt;/h3&gt;
&lt;p&gt;　androidアプリのArrangeLine側は乱数を使っているようなので必ず再現するわけではないのですが、私のプログラムが先手の場合は必ず勝つのですが、後手の場合は最短の5手で負ける場合があります。
&lt;img src=&quot;/images/arrangeline.png&quot; alt=&quot;負け画像&quot; /&gt;
先手がリーチ（あと一手でラインが揃う）状態になっても揃うことを防ごうとしないことがあるのです。最初はバグか？と思いましたが、これもよく考えてみると私のソフト側は後手で尚且つ初手で辺の部分を取られていると、どう足掻いても負けることがわかっているので勝つことを諦めているわけです。&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;以前の記事&lt;/a&gt;に通常ルールの三目並べソフトが初手に有利なはずの真ん中を取らないことを書きましたが、初手にどこを取っても引き分けになることを読み切っている（初手にどこを選んでも引き分けの評価値が返ってくる）ので、1（左上隅）の場所から順に読み始めて最後に評価した9の場所（右下隅）を取る現象と同じです。ArrangeLineでも初手に辺の部分を取られているとその後どういう変化をしようが負けることがわかっている（先手勝ちの評価値MAX_VALUE=9が返ってくる）ため、相手がリーチをかけていようがいまいが関係なくたまたま最後に評価した場所を選んでしまいます。一回リーチを防いでも負けることが分かってるのですから…。&lt;br /&gt;
　この現象を防ぐにはどうすればいいのか、前にも書きましたが将棋にしろオセロにしろ局面の形勢判断用の評価関数と読み切り用（将棋で言えば詰将棋用）の評価関数を分けて使用するか、リーチを優先的に防ぐ処理（将棋で言えば王手放置を避ける）を用意すればいいのでしょうが、相手が間違えない限り手数を伸ばすだけで、勝敗は既に決まっています。将棋と違って完全読切りが完了しているゲームでこの処理を入れるのは虚しいだけでしょう。ただ、このArrangeLineに関して言えばandroid端末用のゲームなので完全読切りするにはマシンパワーの制限で難しいからそれなりに形勢判断用の評価関数を工夫する意味はあると思います。自分はあまり興味湧きませんが…&lt;br /&gt;
　今回の記事の中で「よく考えてみると」と何度も書いてますが、この手のソフトは自分の意図通りに動いているのかうまくいっていないのか結構悩まされます。最後の例でもそうですが、考えて納得して改良したあとにいきなり5手で負けたりするとさっぱり意味が分からなくなりました。でも、特別なアルゴリズムを使わなくても完全読み切りが出来るわけですから、将棋なんかに較べたら作り易いゲームではあると思います。今回、千日手回避のために他にもいろいろ試行錯誤したのでそれらの手法を使って将棋作りに活かしてみようと思っています。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/software/2014-10-04/arrange_line</link>
                <guid>http://happyclam.github.io/software/2014-10-04/arrange_line</guid>
                <pubDate>2014-10-04T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>三目並べ（tic tac toe）で遊んでみた</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;いろんなテストケース&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;以前作った三目並べのプログラム&lt;/a&gt;でいろいろ遊んでみました。&lt;a href=&quot;https://github.com/happyclam/tictactoe_ruby&quot;&gt;githubに公開&lt;/a&gt;しているので暇な人はソースをいじって試すこともできます。但し、短いソースとはいえ自分でコードを読んで編集する必要があります。もともとは対戦用プログラムとして作ったものですが、テスト用に9ヶ所の升目を順に取っていってその時の評価値を表示するように作った関数を使って、いろんなケースでプログラムの検証をしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NOUGHT = -1
CROSS = 1
DRAW = 0
MAX_VALUE = 9
MIN_VALUE = -9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　上記のように定数を定義しています。CROSSは×（バツ）NOUGHTは◯（マル）でCROSSが先手です。評価関数は先手勝ち（MAX_VALUE）、後手勝ち（MIN_VALUE）、引き分け（DRAW）の3値の内どれかを返すようになっています。&lt;br /&gt;
　テスト用の関数は先手から交互に1～9の升目を取っていって、その時に先読み関数から返ってくる評価値を順に画面に表示していくようになってます。三目並べはパスが無いので奇数手目は先手×で偶数手目は後手◯になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo@bar:~$ ruby play.rb 

 |1|2|3|
 |4|5|6|
 |7|8|9|
1手目: 1 評価値: 0
1手目: 2 評価値: 0
1手目: 3 評価値: 0
1手目: 4 評価値: 0
1手目: 5 評価値: 0
1手目: 6 評価値: 0
1手目: 7 評価値: 0
1手目: 8 評価値: 0
1手目: 9 評価値: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　1手目に1の場所（先手は×）を取れば0の評価値が返ってきたという意味ですが、どこの場所を取っても評価値0が返ってきてます。どこの場所を取っても引き分けになると言うことを示していますが、これではプログラムがうまく動いているかどうかわかりません。初手に先手が5を取った局面から先読み開始してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; |1|2|3|
 |4|X|6|
 |7|8|9|
2手目: 1 評価値: 0
2手目: 2 評価値: 9
2手目: 3 評価値: 0
2手目: 4 評価値: 9
2手目: 6 評価値: 9
2手目: 7 評価値: 0
2手目: 8 評価値: 9
2手目: 9 評価値: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　2手目に後手◯が奇数の場所1、3、7、9（隅）を取った場合の評価値はすべて0になっています。お互いに最善手を選択すれば引き分けになるということです。2手目に後手○が2、4、6、8の辺部分を取るとすべて最大値（9）の評価が返ってきています、その後双方が最善を尽くせば先手が勝つということです。最小値（-9）が返ってくれば後手が勝つという意味です。&lt;br /&gt;
　そういえば三目並べでは初手で真ん中を取って、相手が2手目で隅（角）以外の部分を取ると先手が勝つことを思い出しました。念のため確認してみましょう。&lt;br /&gt;
　初手で真ん中を取り、2手目で辺を取った場合と隅を取った場合を順に確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1手目5、2手目に辺（8）の場合：
       
 |1|2|3|
 |4|X|6|
 |7|O|9|
3手目: 1 評価値: 9
3手目: 2 評価値: 0
3手目: 3 評価値: 9
3手目: 4 評価値: 9
3手目: 6 評価値: 9
3手目: 7 評価値: 9
3手目: 9 評価値: 9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　3手目に先手が2の場所を取った場合以外は先手が勝つ（評価値が9）となります。MIN-MAX法（αβ法）は互いに最善手を打つことが前提となっていますので、2手目で後手◯が辺を取った後、先手が最善手を打てば勝つことが出来るのですが、間違えて2の場所を取ると勝てないことを示しています。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;　ちなみに2手目に辺を取るとなぜ後手◯が負けるのかというと、先手が3手目に隅を取れば下図のように２ヶ所同時に、あと一つで揃う局面に出来るからです。後手は２ヶ所同時に防ぐことが出来ません。

|X| |O|
| |X| |
|X|O| |
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;1手目5、2手目に隅（3）の場合：

 |1|2|O|
 |4|X|6|
 |7|8|9|
3手目: 1 評価値: 0
3手目: 2 評価値: 0
3手目: 4 評価値: 0
3手目: 6 評価値: 0
3手目: 7 評価値: 0
3手目: 8 評価値: 0
3手目: 9 評価値: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　すべてのケースで引き分けになることを示していて、最初のテスト結果と符合しますので、一応プログラムは正常に動作しているようです。&lt;br /&gt;
　あと、&lt;a href=&quot;/software/2014-09-16/ab_method/&quot;&gt;前回の記事&lt;/a&gt;にも書きましたが、αβ法がうまく機能していれば最終的な評価値の結果がMIN-MAX法と一致するはずです。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      if (temp_v &amp;gt;= value &amp;amp;&amp;amp; turn == CROSS) 
        value = temp_v 
        locate = i
#        break if threshold &amp;lt; temp_v
      elsif (temp_v &amp;lt;= value &amp;amp;&amp;amp; turn == NOUGHT)
        value = temp_v 
        locate = i
#        break if threshold &amp;gt; temp_v
      end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　上記のようにプログラム中の枝刈り部分のコード２行をコメントにして、上記のテスト結果と同じ結果が得られましたので枝刈りも正常に機能しているようです。ちなみに評価関数が呼び出される回数を数えて見たところ、すべての手を読み切るまでにMIN-MAX法では255,168回、αβ法では100,645回でした。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;ちょっと変わった三目並べ&lt;/h3&gt;
&lt;p&gt;　Twitter使っていると&lt;a href=&quot;https://androider.jp/official/app/4f0d853da0473562/&quot;&gt;「ちょっと変わった三目並べ Arrange Line」&lt;/a&gt;というアプリを見かけたのでルールを確認してみると、なんと今弄っている三目並べをほとんどそのまま流用出来そうじゃないですか？なんか神様から使命を授かったような気になったので作って見ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Board.initializeに追加
    @c_q = Array.new
    @c_bk = Array.new
    @n_q = Array.new
    @n_bk = Array.new
#Board.initに追加    
    @c_q.clear
    @c_bk.clear
    @n_q.clear
    @n_bk.clear
#Boardクラスに追加
  def set(i, v)
    if self[i]
      raise &quot;Error!&quot;
    else
      self[i] = v
    end
    if v == CROSS
      @c_q &amp;lt;&amp;lt; i
      if @c_q.size &amp;gt; 3
        idx = @c_q.shift
        @c_bk.push([idx, self[idx]])
        self[idx] = nil
      end
    elsif v == NOUGHT
      @n_q &amp;lt;&amp;lt; i
      if @n_q.size &amp;gt; 3
        idx = @n_q.shift
        @n_bk.push([idx, self[idx]])
        self[idx] = nil
      end
    end
  end

  def unset(v)
    if v == CROSS
      if @c_bk.size &amp;gt; 0
        h = Hash[*(@c_bk.pop)]
        temp = h.each{|k, v| self[k] = v}
        @c_q.unshift(temp.keys[0])
      end
      idx = @c_q.pop
    elsif v == NOUGHT
      if @n_bk.size &amp;gt; 0
        h = Hash[*(@n_bk.pop)]
        temp = h.each{|k, v| self[k] = v}
        @n_q.unshift(temp.keys[0])
      end
      idx = @n_q.pop
    end
    self[idx] = nil
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　評価関数や画面出力部分はまったく変更する必要は無く、Boardクラスに指し手を記憶するための配列を追加し、setメソッドとunsetメソッドを追加して、今まで&lt;code&gt;board[n] = CROSS&lt;/code&gt;等、配列に値を代入していたところを&lt;code&gt;board.set(n, CROSS)&lt;/code&gt;のように変更し、&lt;code&gt;board[n] = nil&lt;/code&gt;としていたところを&lt;code&gt;board.unset(CROSS)&lt;/code&gt;に変えるだけです。&lt;br /&gt;
　で、初手から読み切りさせて見たところ、敢えなくスタックオーバーフロー。でもこれは将棋でいうところの千日手になるケースがあるのだろうと思ったので、先読み手数を制限して9手読み、10手読みと試していきました。すると、10手読みのところまでは三目並べと同じように全部0の評価だったのですが、11手読みまで増やすと以下のような結果が出ました。  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt; |1|2|3|
 |4|5|6|
 |7|8|9|
1手目: 1 評価値: 0
1手目: 2 評価値: 9
1手目: 3 評価値: 0
1手目: 4 評価値: 9
1手目: 5 評価値: 0
1手目: 6 評価値: 9
1手目: 7 評価値: 0
1手目: 8 評価値: 9
1手目: 9 評価値: 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　初手に偶数の場所つまり辺の部分に先手が着手すれば先手が勝つことが出来ると言ってます。普通の三目並べと違って真ん中を取るのはよくないようです。&lt;br /&gt;
　あと、10手読みまでは三目並べと同じように評価0ばかりだったと言っても、三目並べの場合は完全に読み切った上で引き分けになることを示しているのですが、この新しいルールの三目並べは先読み手数を制限しているので、制限手数内で先読みした限りでは勝負がつかないということを示しているだけです。&lt;br /&gt;
　次に辺の部分に初手を打てば勝てるということなのでその局面から先読み開始してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; |1|2|3|
 |4|5|6|
 |7|X|9|
2手目: 1 評価値: 9
2手目: 2 評価値: 9
2手目: 3 評価値: 9
2手目: 4 評価値: 9
2手目: 5 評価値: 9
2手目: 6 評価値: 9
2手目: 7 評価値: 9
2手目: 9 評価値: 9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;　全部先手勝ちとなりました。これで「ちょっと変わった三目並べ（Arrage Line）」というゲームは先手必勝のゲームであることが確認出来たと早合点して&lt;a href=&quot;https://twitter.com/SappierBoy/status/512377344582225920&quot;&gt;Twitterにも呟いてしまった&lt;/a&gt;んですが、千日手（同じ手の繰り返しで局面が進まない状態）に対応していないのでなんとも言えません。どうもこのゲームは互いに最善手を打ちつづけると千日手になるような気もしますが、それを証明するのは結構難しそうです。&lt;br /&gt;
　本来の三目並べやオセロゲームは指し手が盤上を埋めていき、選択肢がだんだん減っていくので読みやすくなっていきますが、このArrangeLineや将棋は盤上のスペースを埋めていくわけでは無いので、先読みプログラムを作る方は大変です。結局、前回の記事同様先読みプログラム作りの大変さを再認識する結果になってしまいました。おもしろい題材なのでArrangeLineについてはまた何か発見があれば記事を書いてみようと思います。&lt;/p&gt;

&lt;hr /&gt;

</description>
                <link>http://happyclam.github.io/software/2014-09-23/tictactoe_arrange</link>
                <guid>http://happyclam.github.io/software/2014-09-23/tictactoe_arrange</guid>
                <pubDate>2014-09-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>MIN-MAX法とαβ法</title>
                <description>&lt;h3 id=&quot;min-max&quot;&gt;MIN-MAX法&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/tree_min-max.png&quot; alt=&quot;min-max法&quot; style=&quot;width: 800px; vertical-align:middle;&quot; /&gt;
　MIN-MAX法とは、オセロゲームなどのある局面で先手、後手、どちらが有利か判断する評価関数を用意し、先手、後手が互いに最善手を打つと仮定して先読みを行うアルゴリズムです。先手をプラス方向の値（MAX値）後手をマイナス方向の値（MIN値）で評価することが多いようです。&lt;br /&gt;
　上の図はオセロゲームで3手読みをする場合の例ですが、◯図形はオセロの一局面（ノード）で□内の数字が3手目を打ったときの評価値になります。3手目と書いてあるノードは先手が打つことが出来るすべての手を順番に評価していくためのループで、2手目となっているノードが後手が打つことが出来るすべての手を順番に評価していくためのループです。実際のプログラムではこのツリー構造を左から右の順に局面を評価していくことになります。&lt;br /&gt;
　全体図は1手目を先手が打った場合に後手が2手目を打つことが可能な手が2通りあり、その後先手が打てる手がそれぞれ3通り、2通りあることを表しています。まず左側のtreeを見ていくと、3手目に先手が打った局面で評価関数を呼ぶと15、22、-5という3つの評価値が得られたということです。で、先手は自分にとって最善手である一番評価値が高い22の局面を選び、取りあえずその評価値と指し手を記憶しておきます。次のノードで同様に3手目まで手を進めて14、25、9、33という4つの評価値を得て先手が選んだ最大値33と先ほどの評価値22を比較して、後手は自分に取って最善手である小さい方の22を選ぶという具合です。先手（3手目）では最大値、後手（2手目）では最小値を選択するというやり方で進めて、評価値が18という左側のtreeの2手目の評価が完了します。次に、右側のtreeでも先手（3手目）は最大値、後手（2手目）は最小値を選び-11という評価値が残ります。最終的には18と-11を比較して先手は大きい方の18を選び、1手目の先手の評価が完了します。&lt;br /&gt;
　最終的に指し手を決めるまでに、3手目の局面の数の分だけ評価関数を呼び出したことになるので、1手目の評価が完了するまでに14局面評価したことになります。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;αβ法&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/tree_ab-method.png&quot; alt=&quot;αβ法&quot; style=&quot;width: 800px; vertical-align:middle;&quot; /&gt;
　αβ法はMIN-MAX法と同じ結果を得られるにもかかわらず、局面を枝刈りすることで時間短縮が出来るというすばらしいアルゴリズムです。なぜ局面の枝刈り（評価の回数を減らす）をしながら同じ結果が得られるのか見ていきましょう。&lt;br /&gt;
　まずMIN-MAX法と同様に左の3つの評価値から22という評価値が得られます。この22を基準値として読み進めると14、25という評価値を得ますがこの25という評価値を得た時点で、このノードは選ばれないことがわかります。なぜなら一つ上の後手のノードでは常に最小値を選ぶからです。この先読み進めて25より大きい評価値を得られたとしても一つ上の後手のノードで、22より大きな値が選ばれることはないので、ここで読みを打ち切っても問題ない（MIN-MAX法と同様の結果が得られる）わけです。これをβカットと言うそうです。その後同じく22を基準値として、次のノードに移り18という評価値を得ますが、18は22より小さいのでそのまま読み進みます。そして18と-12の大きい方である18が選ばれ、後手のノードで18と基準値の22を比較し小さい方の18が選ばれます。これで2手目の候補手が一つ決まりました。&lt;br /&gt;
　次に右サイドのtreeに移りますが、1手目の候補手から読み直すので、基準値は無く新たに末端ノードの3手目を順に評価することになります。得られた8と16を比較して先手（3手目）では最大値である16が選ばれます。16という後手の候補手が一つ得られたわけですが、後手の候補手はより小さい評価値が選ばれるわけですから、今のノードから分岐する3手目をいくら読み進んでいっても16以上になることはないということがわかります。そして一つ上の1手目の先手のノードでは先程の評価値18と比較して大きな方が選ばれることが分かっているわけです。つまり18より小さい評価値が後手（2手目）の候補手に一つでも現れた時点で、この後手のノードから分岐する先の手は読む必要がないことがわかります。これをαカットと言うそうです。ということで先程の18と今読みを打ち切った16を比較して、MIN-MAX法と同じ18が選ばれます。&lt;br /&gt;
　この例ではMIN-MAX法と比較して評価関数を呼び出す回数を5回減らすことが出来ただけで、それほど有り難みが伝わらないかもしれませんが、例えば一局面で選択できる手が3手だったとして3手先まで読むとMIN-MAX法だと&lt;script type=&quot;math/tex&quot;&gt;3^3&lt;/script&gt;回（27回）評価関数を呼ぶことになりますが、評価する局面の順番が理想的な場合αβ法だと&lt;script type=&quot;math/tex&quot;&gt;3^\frac{3}{2}&lt;/script&gt;回（約6回）で済むそうです。&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;前回記事&lt;/a&gt;で紹介した&lt;a href=&quot;https://github.com/happyclam/tictactoe_ruby&quot;&gt;三目並べのプログラム&lt;/a&gt;の例の場合、まさにこれぐらいの高い効果が得られたと思います。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;オセロと将棋の違い&lt;/h3&gt;
&lt;p&gt;　今までにいろんなプログラミング言語でオセロを作った経験があるのですが、オセロを作った同じやり方で三目並べを作るとうまく出来ませんでした。三目並べを作った顛末は&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;ここ&lt;/a&gt;に書いていますが、どのような問題があったかというと、オセロの局面の評価は末端ノード（葉）で行うため、三目並べで同様の作り方をすると途中でラインが揃って勝負がついているにも関わらず先読みを続けてしまうという不都合が起こり、間違った結果が返ってきます。各ノードで局面の評価を先にしてから先読みを続けるかどうか判断するという作り方にしなければなりません。その違いに気づくまで私は結構悩みました。&lt;br /&gt;
　将棋も三目並べと同じでゲームがいきなり終了する（詰み）ことがあるので、有限手数先を読みそこで評価する作り方をしているとあり得ない局面を読んでいて間違った評価をすることになります。では、オセロはゲームがいきなり終了することは無いのかというとそうでもなく、頻度は低いと思いますがオセロにもパーフェクトで勝負がつくケースというのがあるので、その対策は必要です。でも自分がオセロプログラムを作った経験から言うと、特にパーフェクト負けへの対応をしていなくても自然と回避されるケースが多いと思います。巷に出回っているオセロのソフトも偶々うまくいっているというケースが多いのではないでしょうか。&lt;br /&gt;
　もう20年以上前のことですが、自分が作ったオセロプログラムがどれほどの強さなのか他のプログラムと手動で対戦させていた頃、とても強くて自分が作ったソフトは歯が立たないフリーソフトがあったんですが、そのソフトに自分の作ったソフトが何度か序盤（オセロ盤に打つ場所がいっぱい残っている状態）でパーフェクト勝ちをしたことを思い出しました。その強いオセロソフトはパーフェクト負けへの対応をしていなかったのでしょう。三目並べを作って見るまではオセロも三目並べも将棋も同じようなゲームだと思っていたのに、そんな違いがあることに今更ながら驚きました。ちょっと大袈裟かもしれませんが自分にとっては新発見でした。  &lt;/p&gt;

</description>
                <link>http://happyclam.github.io/software/2014-09-16/ab_method</link>
                <guid>http://happyclam.github.io/software/2014-09-16/ab_method</guid>
                <pubDate>2014-09-16T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>将棋はやっぱり深く読まなくてはダメ</title>
                <description>&lt;h3 id=&quot;tictactoe&quot;&gt;三目並べ（tictactoe）作成後&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;前回の記事&lt;/a&gt;で自分で作った将棋ソフトが弱い原因を確認するために三目並べ（tictactoe）プログラムを作ったことを書きましたが、一応その後の結果を書いておこうと思います&lt;br /&gt;
　&lt;a href=&quot;https://github.com/happyclam/tictactoe_ruby&quot;&gt;三目並べプログラム&lt;/a&gt;で先読み関数には問題ないと確認出来たので、将棋プログラムの先読み部分もそれと同じように修正してみました。将棋の前にオセロプログラムも作って確認したのですがここではその話は置いておきます。それと、三目並べと同じように修正したと言っても将棋には盤上の駒を動かす場合と持ち駒を打つ場合があったり、相手の駒を取ったりするので、三目並べと同じにはならないのですが、どういうパラメータを与えるかとかどこで評価関数を呼んでどこで再帰関数から抜けるのかとかそういう部分を同じにしたということです。将棋プログラムでは、評価関数を呼び出す場所を先読み再帰関数の先頭にしてみたりforループの中にしたり、評価部分の等号・不等号の違いや評価する局面の枝刈りをする場所変えたりいろいろ試行錯誤しているうちに正確に先読み・枝刈りが出来ているかどうかわからなくなってきたので、三目並べで確認したかったんです。&lt;br /&gt;
　この類のゲームを作ったことがある人なら分かると思いますが、自分の書いたプログラムが膨大な局面の評価値のtree構造をどのように遷移して結論を出したのか確認するのは結構面倒です。評価の遷移を出力して確認するためのテストコードを書くのが王道かもしれませんが、それより簡単そうで面白そうなので三目並べを作って確認し、それと同じ作りにしてしまおうということです。&lt;br /&gt;
　で、結論はどうだったかというと、先読み部分を三目並べと同じように変更しても将棋ソフトは全然強くなりませんでした。結局、先読み部分には大きな問題はなく、ソフトが弱い原因は先読み手順以外の部分（評価関数や読む深さ）にあるということがはっきりしたわけです。今の評価関数は駒の重み（飛車=85点、竜=100点、玉=9999点、金=50点、歩=10点…等）の合計値を使って局面を評価しているだけなので、いい結果が望めないのは当然といえばそうなのですが、&lt;a href=&quot;/project/2014-08-05/tictactoe/&quot;&gt;前回の記事&lt;/a&gt;で書いたように、駒の重みだけの評価関数でオセロを作った場合には非常に強いソフトになるのに将棋だとなんでこんなに弱いのか納得出来なかったので念のため確かめたって感じです。&lt;br /&gt;
　仕方がないので疑問手を指した局面で、何でこんな手を指すのか地道にコードを追っていって調べたところ何となくオセロとの違いが分かってきましたので、実際にソフトが指した手を示しながら説明したいと思います。&lt;br /&gt;
　というか本当に強い将棋ソフトを作りたいのなら、今のご時世ならソースコードが公開されているらしいBonanzaのソースコードを調べてそれに倣うのが一番手っ取り早いと思いますが、それでは面白く無いのであくまで自己流でやってます。  &lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;テスト局面の例&lt;/h3&gt;
&lt;p&gt;　本将棋もどうぶつ将棋もプレイ出来るような作りにしているのですが、本将棋（９×９）だと確認が大変なのでミニ将棋（５×５）で確認しました。  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ケース１&lt;br /&gt;
&lt;img src=&quot;/images/scr1-1.png&quot; alt=&quot;局面1-1&quot; /&gt;
　先手＝ソフト、後手＝人間で上の図の初期配置から先読みをせずに、というか１手先を読む設定でソフトに初手を指させると「１二飛」と指します&lt;br /&gt;
&lt;img src=&quot;/images/scr1-2.png&quot; alt=&quot;局面1-2&quot; /&gt;
　ソフトは自分が一手指した局面で評価（自分の駒の重みの合計点ー相手の駒の重みの合計点）を計算しますので、この局面では歩を一枚得をした状態なので自分が有利と判断します。次の一手で後手に飛車を取り返されて大損するにもかかわらずです。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ケース２&lt;br /&gt;
局面２ー１:&lt;br /&gt;
&lt;img src=&quot;/images/scr2-1.png&quot; alt=&quot;局面2-1&quot; /&gt;
　先手＝ソフト、後手＝人間で、既に後手有利な局面ですが、ここで５一の飛車を使うために４三角と指します。&lt;br /&gt;
局面２ー２:&lt;br /&gt;
&lt;img src=&quot;/images/scr2-2.png&quot; alt=&quot;局面2-2&quot; /&gt;
　もし、ソフトが角を取れば４五飛車の一手詰という仕掛けです。3手先を読む設定にしたソフトで、この局面で指させると下図のように堂々と４三金と角を取ってしまいます。&lt;br /&gt;
局面２ー３:
&lt;img src=&quot;/images/scr2-3.png&quot; alt=&quot;局面2-3&quot; /&gt;
　ソフトからすると４三金（1手目）、４五飛（2手目）と進んでも４五同玉（3手目）とすれば自分が有利と計算することになるからです。&lt;br /&gt;
局面２ー４:
&lt;img src=&quot;/images/scr2-4.png&quot; alt=&quot;局面2-4&quot; /&gt;
　４五同玉と取った時点の駒の重みの合計点は飛車の分が加算されて先手のソフト側の点数がかなり高くなります。この飛車を取ることが出来るというところまで読んで「局面２ー２」の時点で４三金と角を取る手を選んでしまうわけです。その次の一手で後手に４五同馬と玉を取られるにもかかわらずです。ソフトを4手先を読む設定にすれば、その先で自玉が取られて合計点が大幅に減ることが分かるので「局面２ー２」で４三金とは指しません。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;オセロとの違い&lt;/h3&gt;
&lt;p&gt;　ケース１では飛車が取られる、ケース２では玉が取られるという、序盤であれ終盤であれ一手違うだけで評価値が激変するのが将棋のオセロに無い特徴だと思います。将棋以外のゲームでも勝ちか負けかという局面では評価値が激変するのは当然ですが、将棋は一手毎に駒を打つ場所が少なくなるオセロや囲碁と違って、徐々にゲームの終わりが近づいているわけではありません。いつ終了するか（いつ玉が詰まされるか）わかっていないので常に局面を厳しく評価する必要があるのです。オセロの評価関数は序盤でいい加減な評価関数を使用していたとしても、ゲームの終盤で残り15手とか20手になったときに最後まで読み切ることが可能なので強いソフトが比較的簡単に作れるのでしょう。三目並べも同様です。将棋の場合、読み切りと言えば詰みを探すということになりますが、初手から詰みを探しても時間の無駄ですし、オセロのように一手毎に終わりが近づいているわけではないので、残り何手になったら詰みを探すという作りにも出来ません。常に局面を正確に評価し、詰みがある局面ではそれを逃さないような作りにする必要があります。&lt;br /&gt;
　それともう一つオセロや三目並べは、手が進むに連れて徐々に手の選択肢が少なくなるので深く読むことが容易になっていきますが、将棋にはそういうことがありません。むしろ持ち駒が増えると読む手が増えていきます。&lt;br /&gt;
　ということで、まずはもっと深く読むことが必要だと思うので、クラスの構成やデータ構造も見直して作り直そうかと思っています。駒の働きや玉の固さなども考慮した凝った評価関数を作るとなると、結局速度が必要になるのでデータ構造も出来るだけ単純にすべきなのですが、そもそもRubyで実効速度は期待出来ないと思っていたし、ミニ将棋ならオセロより駒の数も少ないし特に凝ったことしなくても自然と強いソフトになるだろうなんて甘い見通しだったのがいけなかったようです。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;おまけ&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;http://sdin.jp/browser/board/55shogi/&quot;&gt;SDIN将棋のサイト&lt;/a&gt;で自分が作ったソフトとCPU対戦したところ、4手読みの設定でいい加減な評価関数でもレベル２には常に勝てるようです。レベル３には勝てませんので、これに勝つことを当面の目標にしてみます。&lt;br /&gt;
　それと、つい最近まで開発の動機なども含めてgithubのwikiに書いて「Shoes de shogi」という名前でgithubで公開していたのですが、とりあえずもう少し強くできるまで一時的に削除することにしました。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/software/2014-09-09/pre_shogi</link>
                <guid>http://happyclam.github.io/software/2014-09-09/pre_shogi</guid>
                <pubDate>2014-09-09T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>三目並べ（tictactoe）</title>
                <description>&lt;p&gt;Project: 「&lt;strong&gt;三目並べ&lt;/strong&gt;」: &lt;a href=&quot;https://github.com/happyclam/tictactoe_ruby&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;開発の動機&lt;/h3&gt;
&lt;p&gt;　Ruby用のGUI開発ツールShoesを使って一通り機能を備えた将棋ソフトを作ってみたのですが、思っていた以上に弱い。大昔にオセロのソフトを作ったことがあるのですが、min-max法とαβ法を使えば普通の人では勝てないぐらいのものが簡単に作れました。オセロでは四隅を取ると有利になるので、隅のコマは点数を高くして、その隣の位置は点数を低くするという、コマを置く盤面の位置に重み付けすることで局面を評価するよくある評価関数を使えば十分でした。&lt;br /&gt;
　だから将棋の場合もそれぞれの駒に重み付けをして評価関数を作れば、オセロに比べると読む局面の数が多くなるとはいえ、それなりに強いものが出来ると思っていたのにあまりにも弱かったのです。そこで評価関数は置いといて局面の先読み部分がうまくいってるのか確認するために、まずはより単純なゲームである三目並べで確認しようと思ったのが作成のきっかけです。三目並べ（tictactoe）なら初手からゲーム終了まで読みきれるので先読み関数に問題がないかどうか判断しやすいと思ったからです。  &lt;/p&gt;

&lt;h3 id=&quot;min-max&quot;&gt;min-max法&lt;/h3&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#777&quot;&gt;#先手×は最大値、後手○は最小値を選択するように再帰しながら局面を先読み&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;lookahead&lt;/span&gt;(board, turn, cnt)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; turn == &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;CROSS&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;      value = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;MIN_VALUE&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;      value = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;MAX_VALUE&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;    locate = &lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;    board.each_with_index {|b, i|
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;next&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; b
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;      board[i] = turn
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;      temp_v = evaluation(board)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;      teban = (turn == &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;CROSS&lt;/span&gt;) ? &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;NOUGHT&lt;/span&gt; : &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;CROSS&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (temp_v != &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;MAX_VALUE&lt;/span&gt; &amp;amp;&amp;amp; temp_v != &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;MIN_VALUE&lt;/span&gt; &amp;amp;&amp;amp; cnt &amp;lt; &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;SIZE&lt;/span&gt; - &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#777&quot;&gt;#指定した深さまで再帰呼出し&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;        temp_v, temp_locate = lookahead(board, teban, cnt + &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;      board[i] = &lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#777&quot;&gt;#先手×の番と後手○の番で、同じ深さでの最小、最大の評価値をvalueに保存&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (temp_v &amp;gt; value &amp;amp;&amp;amp; turn == &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;CROSS&lt;/span&gt;) || (temp_v &amp;lt; value &amp;amp;&amp;amp; turn == &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;NOUGHT&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;        value = temp_v 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;        locate = i
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;    }
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#同じ深さでの最小、最大の評価値を返す&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; value, locate
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;αβ法&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;min-max法に、親局面の評価値を子局面に伝えるための引数（α値＝下限値、β値＝上限値）を追加&lt;/li&gt;
  &lt;li&gt;引数で渡された親局面の評価値と現局面を比較して、現局面が選択されることがないことがわかったら、先読みを中断してreturnする（αカットとβカット）&lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#777&quot;&gt;#現局面の評価値を子局面に渡しながら再帰関数で局面を先読み&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;lookahead&lt;/span&gt;(board, turn, cnt, threshold)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; turn == &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;CROSS&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;      value = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;MIN_VALUE&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;      value = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;MAX_VALUE&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;    locate = &lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;    board.each_with_index {|b, i|
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;next&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; b
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;      board[i] = turn
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;      temp_v = evaluation(board)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;      teban = (turn == &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;CROSS&lt;/span&gt;) ? &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;NOUGHT&lt;/span&gt; : &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;CROSS&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (temp_v != &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;MAX_VALUE&lt;/span&gt; &amp;amp;&amp;amp; temp_v != &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;MIN_VALUE&lt;/span&gt; &amp;amp;&amp;amp; cnt &amp;lt; &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;SIZE&lt;/span&gt; - &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;        temp_v, temp_locate = lookahead(board, teban, cnt + &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;, temp_v)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;      board[i] = &lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#777&quot;&gt;#先手×の番&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (temp_v &amp;gt; value &amp;amp;&amp;amp; turn == &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;CROSS&lt;/span&gt;) 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        value = temp_v 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;        locate = i
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#777&quot;&gt;#上限値を上回ったら先読み中止（βカット）&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; value, locate &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; threshold &amp;lt; temp_v
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#777&quot;&gt;#後手○の番&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;elsif&lt;/span&gt; (temp_v &amp;lt; value &amp;amp;&amp;amp; turn == &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;NOUGHT&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt;        value = temp_v 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;        locate = i
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n28&quot; name=&quot;n28&quot;&gt;28&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#777&quot;&gt;#下限値を下回ったら先読み中止（αカット）&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n29&quot; name=&quot;n29&quot;&gt;29&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; value, locate &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; threshold &amp;gt; temp_v
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n30&quot; name=&quot;n30&quot;&gt;30&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;      &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n31&quot; name=&quot;n31&quot;&gt;31&lt;/a&gt;&lt;/span&gt;    }
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n32&quot; name=&quot;n32&quot;&gt;32&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#同じ深さでの最小、最大の評価値を返す&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n33&quot; name=&quot;n33&quot;&gt;33&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; value, locate
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n34&quot; name=&quot;n34&quot;&gt;34&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n35&quot; name=&quot;n35&quot;&gt;35&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n36&quot; name=&quot;n36&quot;&gt;36&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n37&quot; name=&quot;n37&quot;&gt;37&lt;/a&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;※min-max法に僅かなコードを追加しただけで素晴らしい効果が得られました。&lt;a href=&quot;http://www.vaio.sony.co.jp/Products/P1/spec_vom1.html&quot;&gt;vaio type p (VGN-P90S)&lt;/a&gt;という非力なPCで比較したところ、単なるmin-max法で完全読み切りに３０秒ほどかかったのに、αβ法なら５秒で完了しました。評価関数が、勝ち、負け、引き分けの３値しかない単純なものだったせいもありますがすごいです。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;検証と意外だったこと&lt;/h3&gt;
&lt;p&gt;　先読みがうまく機能しているかは、初手をどこに打ってゲーム開始しても引き分けという結果が返ってくることや、先手・後手でそれぞれ何度か三目並べで遊んでみて確認した程度ですが、それで十分でしょう。&lt;br /&gt;
　でも作ってみて意外だったのは初手から完全読み切りするわけだから、ソフトに初手を指させたら当然真ん中に×をつける（打つ？指す？）と思っていたのに真ん中には打ってこなかったことです。人間ならすぐに一番勝つ可能性が高い真ん中を取るはずですが、ソフトは双方が最善手を指せば引き分けになることを読み切っているので、結局どこに打っても同じと判断するわけです。評価関数が勝ち、負け、引き分けの三値しか返さない関数なので、初手に真ん中に打てばラインを揃える可能性が一番高いとはいえ、引き分けには違いないので区別しないのだと一応納得しました。&lt;br /&gt;
　念の為、真ん中は２点、隅は１点、その他は０点という場所による重み付けをしてその点数による評価関数を作って、それを使えば真ん中に打つことは確認しましたが、そんな評価関数では当然弱いソフトになりました。それ以外にも何とか初手に真ん中を選択しながら、強い評価関数はどうすればいいか考えてみましたが、シンプルでいい方法は思いつきませんでした。&lt;br /&gt;
　結局オセロでも将棋でもそうですが、局面の形成判断をする評価関数と読み切り用の評価関数は分けて作るのがいいのかもしれません。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/project/2014-08-05/tictactoe</link>
                <guid>http://happyclam.github.io/project/2014-08-05/tictactoe</guid>
                <pubDate>2014-08-05T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>BlueToothマウス</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;携帯する気は無いが、マウスのケーブルは細い方がいい&lt;/h3&gt;
&lt;p&gt;　まだ一年程しか使っていなかったマウスが壊れました。ケーブルが平べったいタイプでUSB端子をマウスの中に収納できるタイプのもの。ケーブルが巻き取れるタイプのものは携帯用の小さなマウスばかりですが、USB端子も本体に収納出来るようになっているため比較的マウス本体も大きめの作りでまぁまぁ気に入っていたのに短い命でした。このタイプのマウスでもう一つお気に入りのマウスを持っているのですが、それはビックカメラ製の今はもう製造していないであろう珍しいもの（だと思います）。10年以上前に新横浜のビックカメラで買ったものですが、ELECOM等のOEM製品だと思いますが、どういう経緯で自社ブランドで販売したのか知りませんが、確かにビックカメラ製と銘打っていたと記憶しています。あの時まとめて買いだめしておけばよかったと思います。&lt;br /&gt;
&lt;img src=&quot;/images/biccamera_mouse.png&quot; alt=&quot;ビックカメラ製マウス&quot; /&gt;
　大きいマウスの方が使いやすいのですが、ケーブルが太いと、わずかではあるけどケーブルに操作を持っていかれる時があるので好きではありません。だからと言ってケーブルの無い無線方式だと何となく信頼できないというか、安心できないというかイザというとき困るんじゃないかとか、CPU切替器も使っているのでちゃんと動くかどうかわからないという不安が先走って、未だに無線方式のものは使わずにいます。マウスに関してはキーボードほど使い勝手にこだわりは無いのでそろそろ無線を試してもいいかもと思いながらも、あくまで細いケーブルの大きなマウスを求めていろんな店舗を見て回ることにしました。  &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;予定していた行動とまったく違うことすることってありますよね&lt;/h3&gt;
&lt;p&gt;　細く平たいケーブルのマウスか、それが無ければ無線マウスを買うつもりで家を出たのに、家に持ち帰ったのはBuffalo製の&lt;a href=&quot;http://buffalo.jp/product/input/mouse/bsmbb17/&quot;&gt;BlueToothマウス&lt;/a&gt;でした。細いケーブルのマウスは携帯用の小さいものしか無く、目当てのものが売っていなかったのが最大の原因ですが、無線のマウスは専用のレシーバが必要なのが何となく嫌で躊躇していたところにそれ以外の選択肢が目についてしまったのです。プログラマっていうのはXXX社製専用というのが何となく美しくないと感じてしまうものです、そう、縛られるのが嫌いなのでしょう。BlueToothマウスもBlueTooth機能を備えていないPCで使う場合はドングルというレシーバが必要なわけですが、マウスと同じメーカーでなくても使えます。マウスと同じメーカーの対になったレシーバしか使えないという不自由さが気に入らないのでしょう（家でしか使わないならそれで十分なのに…）。そういえば昔買ってほとんど使わずじまいのドングルが家に何個かあるなぁと思い出してしまったことも購入に踏み切った原因だと思います。  &lt;/p&gt;

&lt;h3 id=&quot;ubuntu1204&quot;&gt;Ubuntu12.04では使えない？&lt;/h3&gt;
&lt;p&gt;　家では主にUbuntu12.04を使っているのですが、そのままでは認識すらしてくれませんでした。Windows7のノートPCでは２つのドングル（&lt;a href=&quot;http://www.planex.co.jp/product/bluetooth/bt-microedr2x/&quot;&gt;BT-MicroEDR2X&lt;/a&gt;、&lt;a href=&quot;http://www.planex.co.jp/product/bluetooth/bt-01ude.shtml&quot;&gt;BT-01UDE&lt;/a&gt;）で確認したので故障ではありません。dbusを最新のものに入れ替えたらデバイス検索でBSMBB17を検出してはくれたものの動作しませんでした。そこで以前から更新しようと思っていながら放ったらかしにしていたUbuntu14.04へのアップグレード（do-release-upgradeコマンド一発）をやってみたらすぐに認識することが出来、使えました。メデタシメデタシ。って結局マウスが壊れたおかげで以前から懸案だったUbuntuアップグレード作業をすることが出来たことが収穫って感じです。マウスが壊れたところから神様のお導きだったのかもしれません。&lt;br /&gt;
&lt;a href=&quot;http://buffalo.jp/product/input/mouse/bsmbb17/&quot;&gt;&lt;img src=&quot;/images/bsmbb17_mouse.png&quot; alt=&quot;BSMBB17&quot; /&gt;&lt;/a&gt;
　で、肝心のBlueToothマウスの使い勝手ですが、頻繁に動作が引っかかる感じでとても使い続ける気にはなりませんでした。自分的にはBlueToothマウスはまだまだ実用には堪えられないって感じです。あくまでlinuxで使う場合の話ですが…。結局マウスはしばらく買わずに、とっておきのビックカメラ製のものを使うことにします。チャンチャン。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/hardware/2014-07-12/bt_mouse</link>
                <guid>http://happyclam.github.io/hardware/2014-07-12/bt_mouse</guid>
                <pubDate>2014-07-12T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>production環境でjQueryが発動しない</title>
                <description>&lt;h3 id=&quot;deployment&quot;&gt;自宅サーバーにdeployment&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;/project/2014-05-30/tweetwatch&quot;&gt;TweetWatch&lt;/a&gt;がとりあえず完成したので、自鯖（Apatch）で動かしてみたらjQueryの一部（画面描画時&lt;code&gt;$(document).ready()&lt;/code&gt;の処理だけ）が上手く動かなかったので動くようになったまでの顛末を書きます（Rails 4.0.2, ruby 2.0.0p353）。&lt;br /&gt;
コードは以下の通りです&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#app/assets/javascripts/users.js
$(document).ready(function(){
    $.ajax({
        url: &#39;/tweets/check&#39;, 
        data: {},
        dataType: &quot;script&quot;
    }).done(function(data, status, xhr) {
    }).fail(function(xhr, status, error) {
        alert(&#39;Error Occured(&#39; + error + &#39;)&#39;);
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;処理の内容はあまり関係ないと思いますが、jqueryからcontrollerのメソッドを呼び出し、サーバースクリプトが動いているかどうかをチェックして画面にstatusを表示する処理をしています。このusers.jsがdevelopment環境では動くのにproduction環境では動かないという現象に悩まされました。動くようになるまでに辿った作業を順に箇条書きにしてみると以下のようになります。  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;p&gt;1. Apache+Passenger環境でうまく動かないので、以下の設定でwebrickでproduction環境を試す。特にwebrick用の設定とも言える&lt;code&gt;serve_static_assets = true&lt;/code&gt;がdevelopment環境との大きな違い&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;pre&gt;&lt;code&gt;
    #config/environments/production.rb
    config.assets.compile = false
    config.assets.js_compressor = :uglifier
    config.serve_static_assets = true
    config.assets.digest = true
    config.assets.debug = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;rake assets:precompile RAILS_ENV=production&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;rails s -e production&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;p&gt;2. 変化が無かったのでjquery-turbolinks gemを追加してみる&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;pre&gt;&lt;code&gt;
    #Gemfile
    gem &#39;jquery-turbolinks&#39;  &amp;lt;- 追加
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    #app/assets/javascripts/application.js
//= require jquery
//= require jquery_ujs
//= require bootstrap
//= require users.js
//= require turbolinks
//= require jquery.turbolinks     &amp;lt;- 追加
//= require highcharts/highcharts
//= require highcharts/highcharts-more
//= require highcharts/highstock
//= require_tree .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;rake assets:precompile RAILS_ENV=production&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;rails s -e production&lt;/code&gt;
&lt;/p&gt;
※&amp;lt;a href=https://github.com/kossnocorp/jquery.turbolinks/blob/master/README.md&amp;gt;jquery-turbolinksのドキュメント
&lt;/dd&gt;
&lt;br /&gt;
&lt;dt&gt;&lt;p&gt;3. jquery-turbolinks gemを追加してもダメだったので、今度は逆にturbolinksを無効にしてみる&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;pre&gt;&lt;code&gt;
    #Gemfile
#    gem &#39;turbolinks&#39;         &amp;lt;- コメント化
#    gem &#39;jquery-turbolinks&#39;  &amp;lt;- コメント化
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
    #app/assets/javascripts/application.js
//= require jquery
//= require jquery_ujs
//= require bootstrap
//= require users.js
//= require turbolinks            &amp;lt;- この行を削除
//= require jquery.turbolinks     &amp;lt;- この行を削除
//= require highcharts/highcharts
//= require highcharts/highcharts-more
//= require highcharts/highstock
//= require_tree .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;bundle install&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    #app/views/layouts/application.html.erb
    #変更前
  &amp;lt;%= stylesheet_link_tag    &quot;application&quot;, media: &quot;all&quot;, &quot;data-turbolinks-track&quot; =&amp;gt; true %&amp;gt;
  &amp;lt;%= javascript_include_tag &quot;application&quot;, &quot;data-turbolinks-track&quot; =&amp;gt; true %&amp;gt;
    #変更後
  &amp;lt;%= stylesheet_link_tag    &quot;application&quot;, media: &quot;all&quot; %&amp;gt;
  &amp;lt;%= javascript_include_tag &quot;application&quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;rake assets:precompile RAILS_ENV=production&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;rails s -e production&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;p&gt;4. turbolinksは関係なかったので、関係ないと思ったけど今度はcoffee scriptに変えてみる&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;span&gt;jqueryとturbolinks両イベント対応の書き方&lt;/span&gt;
&lt;pre&gt;&lt;code&gt;
#app/assets/javascripts/user.js.coffee
$(document).on &#39;ready page:load&#39;, -&amp;gt;
  url = &#39;/tweets/check&#39;
  dfd = $.ajax
    url: url
    format: &#39;script&#39;
    data: {}
    method: &#39;get&#39;
  promise = dfd.promise()
  promise.done((data, status, xhr) -&amp;gt;
  )
  promise.fail((xhr, status, error) -&amp;gt;
    alert(error)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;span&gt;jqueryイベントとturbolinksイベントを分けた書き方&lt;/span&gt;
&lt;pre&gt;&lt;code&gt;
#app/assets/javascripts/user.js.coffee
ready = -&amp;gt;
  url = &#39;/tweets/check&#39;
  dfd = $.ajax
    url: url
    format: &#39;script&#39;
    data: {}
    method: &#39;get&#39;
  promise = dfd.promise()
  promise.done((data, status, xhr) -&amp;gt;
  )
  promise.fail((xhr, status, error) -&amp;gt;
    alert(error)
  )

$(document).ready(ready)
$(document).on(&#39;page:load&#39;, ready)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;rake assets:precompile RAILS_ENV=production&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;rails s -e production&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;p&gt;5. どっちのcoffee scriptでもダメなので、こんどは正常に動作しているdevelopment環境の設定をproduction環境と同じにして確認。&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;pre&gt;&lt;code&gt;
    #config/environments/development.rb
    config.assets.compile = false
    config.assets.js_compressor = :uglifier
    config.serve_static_assets = true
    config.assets.digest = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;デフォルトでは書かれていない上記設定をdevelopment環境の設定ファイルに追加して&lt;code&gt;rails s -e development&lt;/code&gt;すると、めでたく？production環境と同じくページload時のjqueryだけが発動しない現象が再現しました。結局config.assets.compileがtrueかfalseかで動作が変わるようです。念のためdevelopment環境でconfig.assets.compileの値だけを書き換えて現象の発生の有無を確認しました。&lt;br /&gt;
　でも本番（production）環境でconfig.assets.compile = trueにして運用することは、重くなるので普通はしないと思いますし、結局config.assets.compile = falseのままではturbolinksの有効・無効に関係なく、このjqueryを発動させることは出来ませんでした。
&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;p&gt;6. 何か方法はないかとテンプレートファイルに直接jqueryを直書きしてみたところ&lt;/p&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;pre&gt;&lt;code&gt;
#app/views/users/show.html.erb
&amp;lt;%= javascript_tag do %&amp;gt;
$(document).ready(function(){
    $.ajax({
        url: &#39;/tweets/check&#39;, 
        data: {},
        dataType: &quot;script&quot;
    }).done(function(data, status, xhr) {
    }).fail(function(xhr, status, error) {
        alert(&#39;Error Occured(&#39; + error + &#39;)&#39;);
    });
});
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでdevelopment環境でもproduction環境でもページ読み込み時のjqueryが正常に動作しました。&lt;br /&gt;
config.assets.compile = falseでdevelopment,production両方の環境で動きます。いろいろ環境を弄りましたが元の環境からjqueryをテンプレートに直書きするように変えるだけで他は変更しなくてよかったみたいです。turbolinksが有効でも無効でも大丈夫です
&lt;/p&gt;
&lt;/dd&gt;

&lt;/dl&gt;

&lt;p&gt;&lt;em&gt;結論&lt;/em&gt;&lt;br /&gt;
「$document.readyイベントを使うjqueryが動作しない時は、テンプレートに直書きしてみる。」&lt;br /&gt;
※ネットの情報を漁っていると、jquery-turbolinks gemを使えば解決するというものが多いのですが、$document.readyイベントに関してはそういうわけにはいかないようです。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/programming/2014-07-07/rails_env</link>
                <guid>http://happyclam.github.io/programming/2014-07-07/rails_env</guid>
                <pubDate>2014-07-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ツイートを監視して集計する（client側）</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;サーバースクリプトの状態遷移&lt;/h3&gt;
&lt;p&gt;　言うまでもなくclient側と言ってもWebサーバ上で動いているわけなのでユーザから見ればサーバーとして機能しているわけですが、TwitterAPIを使ってデータをDBに保存するサーバースクリプトに対してclient側ということです。&lt;br /&gt;
state_machine gemを利用してサーバースクリプトの状態を管理しています。
&lt;img src=&quot;/images/tweetwatch.png&quot; alt=&quot;状態遷移図&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;状態遷移表&lt;/em&gt;  &lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;status\method&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;start&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;store&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;stop&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;停止中(down)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;待機中(prepared)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;待機中(prepared)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;集計中(storing)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;停止中(down)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;集計中(storing)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;停止中(down)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;サーバー停止中のユーザー画面&lt;/em&gt;&lt;br /&gt;
&lt;img src=&quot;/images/state1.png&quot; alt=&quot;サーバー停止中&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;サーバー集計中のユーザー画面&lt;/em&gt;&lt;br /&gt;
&lt;img src=&quot;/images/state2.png&quot; alt=&quot;サーバー集計中&quot; /&gt;&lt;br /&gt;
　ユーザ向け画面では「停止中」と「集計中」の２つの状態しかないのですが、EventMachineを使用しているサーバースクリプトでは、接続確立が完了した状態（post_initイベントが発生後）にならないとコマンドラインで渡したパラメータが有効にならないので、サーバースクリプトを起動した直後の状態を「待機中」として管理しています。&lt;br /&gt;
&lt;!-- other list --&gt;&lt;/li&gt;
  &lt;li&gt;停止中 —– サーバースクリプト停止中&lt;/li&gt;
  &lt;li&gt;待機中 —– サーバースクリプトが起動しているが、TwitterAPIを呼び出していない状態&lt;/li&gt;
  &lt;li&gt;集計中 —– TwitterAPIを呼び出しツイートデータをDBに保存している状態&lt;br /&gt;
※「集計中」から「待機中」には遷移できません（停止して再起動）。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;機能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;server側スクリプトの制御（起動、終了、状態確認）&lt;br /&gt;
※遅いノートPC（Atom機）で試したところserver側スクリプト起動に時間がかかり、接続がタイムアウトすることがあったので５秒のsleepを入れています。&lt;/li&gt;
  &lt;li&gt;server側のスクリプトがDBに保存したツイートデータを集計してグラフ表示する。&lt;br /&gt;
※Twitterのデータ構造はハッシュタグを本文とは別に保持しているようですが、SQLで集計する際にハッシュタグで集計するのはコストがかかるので、本文の内容でgroup byするという単純なやり方で妥協しています。詳細は別記事にするつもりです。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;er&quot;&gt;ER図&lt;/h3&gt;
&lt;object data=&quot;/pdf/struct_tweetwatch.pdf&quot; width=&quot;600&quot; height=&quot;600&quot;&gt;
&lt;p&gt;ご覧の環境では、object要素がサポートされていないようです。&lt;a href=&quot;/pdf/struct_tweetwatch.pdf&quot;&gt;PDFファイルをダウンロードしてください&lt;/a&gt;&lt;/p&gt;
&lt;/object&gt;

&lt;ul&gt;
  &lt;li&gt;Tweetテーブルへの書き込みはサーバースクリプトのみで、client側のRailsアプリからTweetテーブルへのアクセスはRead onlyです。  &lt;/li&gt;
  &lt;li&gt;Servモデルはユーザがサーバースクリプトを起動する時に指定したTwitter検索タグとサーバースクリプトの状態を管理します。  &lt;/li&gt;
  &lt;li&gt;ユーザは複数のTrackモデル（検索タグ）を保存できますが、サーバースクリプト起動時に指定出来るタグは一つだけです。  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/project/2014-06-07/tweetwatch_client</link>
                <guid>http://happyclam.github.io/project/2014-06-07/tweetwatch_client</guid>
                <pubDate>2014-06-07T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ツイートを監視して集計する（server側）</title>
                <description>&lt;h3 id=&quot;eventmachine&quot;&gt;EventMachineで簡単インターフェース&lt;/h3&gt;
&lt;p&gt;　初めて&lt;a href=&quot;http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/&quot;&gt;morizyun氏のこの記事&lt;/a&gt;を読んだときはEventMachineとかforemanとかって何をするものか知らなかったのですが、EventMachineというのは「&lt;a href=&quot;https://morizyun.github.io/blog/reactor-pattern-ruby/&quot;&gt;[Ruby] Reactorパターンについて&lt;/a&gt;」にも書いてある通り、ソケットの受信待機をして貰って簡単にReactorパターンを実現することが出来るツールってことのようです。だからわざわざ自分でプロセス間通信の手続きを書く必要がなくアプリケーションレベルのコマンドを用意してあげるだけで済むのではないか？と思いながら作ったら思惑通りにうまく動いたって感じです。実際に組み込む前には、以下のような単純なサンプルで確認しました。  &lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#777&quot;&gt;#server側サンプル  &lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;eventmachine&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;Serv&lt;/span&gt; &amp;lt; &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;EM&lt;/span&gt;::&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Connection&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;  attr_accessor &lt;span style=&quot;color:#A60&quot;&gt;:track&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;post_init&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    puts &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myserv: init&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;receive_data&lt;/span&gt;(data)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;    puts data
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;    send_data &lt;span style=&quot;color:#33B&quot;&gt;@track&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;EM&lt;/span&gt;.stop &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; data =~ &lt;span style=&quot;background-color:hsla(300,100%,50%,0.06)&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#808&quot;&gt;stop&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#C2C&quot;&gt;i&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;connection_completed&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;    puts &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myserv: completed&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;unbind&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;    puts &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;myserv: unbind&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;EM&lt;/span&gt;.run &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;EM&lt;/span&gt;.start_server(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;10000&lt;/span&gt;, &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Serv&lt;/span&gt;) &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt; |conn|
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;    conn.track = &lt;span style=&quot;color:#069&quot;&gt;ARGV&lt;/span&gt;[&lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n28&quot; name=&quot;n28&quot;&gt;28&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n29&quot; name=&quot;n29&quot;&gt;29&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;以下のようにコマンドラインパラメータを付加して起動し、  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;ruby myserv.rb O.K.&lt;/code&gt;&lt;br /&gt;
クライアント接続時にServクラスのプロパティに保持されていることを確認する。&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#777&quot;&gt;#client側サンプル&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;net/telnet&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;  localhost = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Net&lt;/span&gt;::&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Telnet&lt;/span&gt;::new(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Host&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;localhost&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;                             &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Port&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;color:#00D&quot;&gt;10000&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;                             &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Timeout&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;                             &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Telnetmode&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;                             &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Output_log&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;./temp0.log&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;                             &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Prompt&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;O.K.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;  localhost.cmd(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;search word&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) { |c| print c }
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;  localhost.close
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;  localhost = &lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;  p &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;end&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;rescue&lt;/span&gt; &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Net&lt;/span&gt;::&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;ReadTimeout&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;  p &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;readtimeout&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;  p &lt;span style=&quot;color:#d70&quot;&gt;$!&lt;/span&gt;.to_s
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;rescue&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;  p &lt;span style=&quot;color:#d70&quot;&gt;$!&lt;/span&gt;.to_s
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;このserver側の処理を、twitterAPIを使ってDBに検索結果を保存するスクリプトに組み込んで、client側の処理をRails製のサイトに組み込めばいいわけです。&lt;br /&gt;
　あと、server側のスクリプトは、ユーザ毎に起動してユーザがWebサイトから制御しなければならないので、foremanは必要無さそうです。  &lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;サーバースクリプトへのパラメータの受け渡し&lt;/h3&gt;
&lt;p&gt;　EventMachine::Connectionを継承したクラスServにユーザ情報を保存するメンバ変数（プロパティ）を用意して、Webサイト（client側）からサーバースクリプトを起動する時にコマンドライン引数でそれらの値を渡してあげます。起動の際に「10000+ユーザID」をポート番号に指定することでWebサイト利用者とサーバースクリプト利用者を一致させています。EventMachineを使ったプログラム同士が変数を共有する仕組みのようなものがあるかもしれませんが、ステートレスなHTTPで動いているWebサイトから起動するのだから、コマンドラインで渡すのがちょうど良さそうです。&lt;br /&gt;
　twitterのStreamingAPIを使用する部分は&lt;a href=&quot;/project/2014-05-30/tweetwatch&quot;&gt;以前書いた記事&lt;/a&gt;で紹介したmorizyun氏のコードをServ.trackingメソッドに閉じ込めてほぼそのまま動かしています。twitter側でエラーが発生した場合このままでいいのかよく分かりませんが、エラーになればWebサイト側からサーバースクリプトを再起動してもらえばいいという考え方で作ってます。&lt;br /&gt;
　client側からserver側スクリプトに受け渡すパラメータはTwitterAPIを利用するために必要な認証key文字列（４種類）とユーザIDとTwitterのfilterAPIに渡す検索文字列（検索タグ）です。&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#777&quot;&gt;#実際のソースの一部&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;eventmachine&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;optparse&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;Serv&lt;/span&gt; &amp;lt; &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;EM&lt;/span&gt;::&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Connection&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;  attr_accessor &lt;span style=&quot;color:#A60&quot;&gt;:uid&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;  attr_accessor &lt;span style=&quot;color:#A60&quot;&gt;:track&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;  attr_accessor &lt;span style=&quot;color:#A60&quot;&gt;:c_key&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;  attr_accessor &lt;span style=&quot;color:#A60&quot;&gt;:c_secret&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;  attr_accessor &lt;span style=&quot;color:#A60&quot;&gt;:a_key&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;  attr_accessor &lt;span style=&quot;color:#A60&quot;&gt;:a_secret&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;receive_data&lt;/span&gt;(data)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;case&lt;/span&gt; data
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;when&lt;/span&gt; &lt;span style=&quot;background-color:hsla(300,100%,50%,0.06)&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#808&quot;&gt;stop&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#C2C&quot;&gt;i&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;      send_data &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;O.K.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;EM&lt;/span&gt;.stop
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;when&lt;/span&gt; &lt;span style=&quot;background-color:hsla(300,100%,50%,0.06)&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#808&quot;&gt;check&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#C2C&quot;&gt;i&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;      send_data &lt;span style=&quot;color:#33B&quot;&gt;@track&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;    省略
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;      :
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;tracking&lt;/span&gt;(track, c_key, c_secret, a_key, a_secret, uid)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;    stream = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Twitter&lt;/span&gt;::&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;JSONStream&lt;/span&gt;.connect(
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;  省略
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;    :
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;EM&lt;/span&gt;.run &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n28&quot; name=&quot;n28&quot;&gt;28&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;EM&lt;/span&gt;.start_server(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;127.0.0.1&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#00D&quot;&gt;10000&lt;/span&gt; + params[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;].to_i, &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Serv&lt;/span&gt;) &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt; |conn|
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n29&quot; name=&quot;n29&quot;&gt;29&lt;/a&gt;&lt;/span&gt;    conn.track = params[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;t&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n30&quot; name=&quot;n30&quot;&gt;30&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    conn.uid = params[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;].to_i
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n31&quot; name=&quot;n31&quot;&gt;31&lt;/a&gt;&lt;/span&gt;    conn.c_key = params[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;c&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n32&quot; name=&quot;n32&quot;&gt;32&lt;/a&gt;&lt;/span&gt;    conn.c_secret = params[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;k&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n33&quot; name=&quot;n33&quot;&gt;33&lt;/a&gt;&lt;/span&gt;    conn.a_key = params[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n34&quot; name=&quot;n34&quot;&gt;34&lt;/a&gt;&lt;/span&gt;    conn.a_secret = params[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;a&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n35&quot; name=&quot;n35&quot;&gt;35&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n36&quot; name=&quot;n36&quot;&gt;36&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;参考サイト&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://keijinsonyaban.blogspot.jp/2010/12/eventmachine.html&quot;&gt;【翻訳】EventMachine入門 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gihyo.jp/dev/serial/01/ruby/0032&quot;&gt;Reactorで非同期処理をやってみよう（2）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>http://happyclam.github.io/project/2014-06-06/tweetwatch_server</link>
                <guid>http://happyclam.github.io/project/2014-06-06/tweetwatch_server</guid>
                <pubDate>2014-06-06T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ツイートを監視して集計する</title>
                <description>&lt;p&gt;Project: 「tweetwatch」: &lt;a href=&quot;https://github.com/happyclam/tweetwatch&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;開発の動機&lt;/h3&gt;
&lt;p&gt;　今年の都知事選の頃、多くのフォロワーを抱えている人（以下a氏と表記）が
&amp;gt;Twitterで&lt;strong&gt;#都知事選&lt;/strong&gt;というタグをつけて自分が投票した候補者の名前を呟けば、それを集計してくれるアプリ作れないかな～&lt;/p&gt;

&lt;p&gt;と物欲しそうに呟いていたのが目に止まりました。&lt;br /&gt;
Yahooのアンケートのように、誰がどれぐらい票を獲得しているかtwitterで独自に確認しようという意図のようです。
　プログラマたるもの、そこで「すぐ出来ますよ」とリプライするような軽率な行動をとってはいけません。職業プログラマなら尚更です。誰かが手を挙げるかもと思いながらしばらく様子を見ていましたが、その呟きに対して反応する人はいなかったようです。こういう場合、相手がどれほどのものを要求しているかわからないので迂闊に出来ますなんて言えませんが、StreamingAPI使えばとりあえず使える程度のものであれば、すぐ出来るんじゃないかと思い調べてみました。  &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;とりあえずローカル環境で動くもの&lt;/h3&gt;
&lt;p&gt;　「StreamingAPI」で検索すると役に立ちそうなサイトはすぐに見つかりました→&lt;a href=&quot;http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/&quot;&gt;「Herokuの無料枠でTwitter Stream APIを常時監視 =&amp;gt; DBに保存するRubyコード」&lt;/a&gt;&lt;br /&gt;
このmorizyunって人のサイトは調べ物をしている際にはよくお世話になっていますが、今回見つけた記事も自分の要望その物です。私はherokuは使いませんでしたがほぼこの記事のコードそのままがローカル環境で動作しました。ツイートの集計がしたいのであればDBに溜まったデータに対してSQLを打ち込めば好きな結果が得られます。a氏に教えてあげようかとも思いましたが、おそらくプログラミングやSQLも知らないa氏が実際に自分のPCで動かすためにはそうとうな時間をかけてサポートしてあげないと無理だろうと思って止めておきました。自分が良かれと思って教えても、逆に恨まれることになり兼ねません。そうなんです、自分でニタニタ楽しむためのソフトを作れたとしても、それをひと様に使ってもらおうとするとまた一段とハードルが高くなるんですねぇ（今回は自分で楽しむものさえパクリですが）。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;ひと様が使えるようにするために&lt;/h3&gt;
&lt;p&gt;　最初はDBにデータを格納するだけのシェルスクリプトを起動しながら、ユーザー向けのwebインターフェースを提供してあげればいいだけだからそれほど手間はかからないと思いましたが、そうすると２プロセス動かすことになり、herokuの無料枠では済まなくなります。それに運用環境を何とか用意したとしても、自分のtwitterアカウントの認証キーをそのサービスで利用するとなると、一人しか利用できないwebサービスになってしまいます。twitter社にAPI利用料を支払えば解決ですが、そこまでする気もないので開発に取りかかるのは躊躇してました。&lt;br /&gt;
で結局、  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;運用環境に関してはとりあえず自宅サーバで動くようにしてから考える  &lt;/li&gt;
  &lt;li&gt;twitterのAPIキーをユーザ自身が登録して、そのキーを利用しながらDB格納プロセスを起動するようにする  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という方針で作りました。
&lt;img src=&quot;/images/tweetwatch_screen.png&quot; alt=&quot;集計画面&quot; /&gt;  &lt;br /&gt;
DBにデータを格納するシェルスクリプトは、&lt;a href=&quot;http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/&quot;&gt;morizyun氏のコード&lt;/a&gt;を叩き台にしてWebサイトから制御するためのプロセス間通信用インターフェースを追加し、そのサーバーとなるシェルスクリプトに接続するクライアントアプリとなるユーザ向けのwebサイトを作る。そのwebサイトは&lt;a href=&quot;http://railstutorial.jp/&quot;&gt;Ruby on Rails チュートリアル&lt;/a&gt;でRSpecの勉強（写経）をしながら作ったものがあったのでそれを流用しています。&lt;br /&gt;
以降、DBにデータを格納する&lt;a href=&quot;/project/2014-06-06/tweetwatch_server/&quot;&gt;&lt;em&gt;サーバースクリプト（server側）&lt;/em&gt;&lt;/a&gt;とRails製&lt;a href=&quot;/project/2014-06-07/tweetwatch_client/&quot;&gt;&lt;em&gt;Webサイト（client側）&lt;/em&gt;&lt;/a&gt;に分けて紹介します。&lt;/p&gt;

&lt;hr /&gt;
</description>
                <link>http://happyclam.github.io/project/2014-05-30/tweetwatch</link>
                <guid>http://happyclam.github.io/project/2014-05-30/tweetwatch</guid>
                <pubDate>2014-05-30T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ボラティリティについて</title>
                <description>&lt;h3 id=&quot;ivhv&quot;&gt;インプライド・ボラティリティ（IV）とヒストリカル・ボラティリティ（HV）&lt;/h3&gt;
&lt;p&gt;　ボラティリティには２種類ありますが、ニュースの記者や市況解説者が「ボラティリティ」という言葉を理解していないまま使っていることが多いと感じるので、以前から一言言っておきたいと思っていたことを書いておこうと思います。&lt;br /&gt;
　市況解説の中でも現物市場ではなく特に先物市場の解説をしている人が、先物価格の値動きが荒かった日などに「今日はボラの大きな一日でした」と解説しているのを聞くと「(・_・)……ン?」となることがあります、そういう日でもインプライドボラティリティ(IV)が低い日も結構あるからです。オプションの買いで勝負する時はボラが高い時が有利、逆に売りはボラが低い時が有利なのですが、IVが低い日に「今日は（オプション買いに）手出ししなくてよかった」と思っているところに、市況解説で「ボラの高い一日でした」なんて言われると「(‾△‾;)エッ・・そうだっけ？」となるわけです。実際にIVが高かったかどうかはスマイルチャートなどで確認できます。&lt;br /&gt;
　&lt;a href=&quot;http://www.option-dojo.com/kn/225_latest.html&quot;&gt;直近1年のボラティリティー&lt;/a&gt;をみればよく分かりますが、ヒストリカル・ボラティリティ（HV）とインプライド・ボラティリティ（IV）の動きは必ずしも一致していません。原資産である先物の動きがそれ程なくても、オプションの値動きが激しい日もあるということです。それにオプションは先物と違い、満期(SQ)が近づくとボラ(IV)が高くなるという性質（時間価値の減少に伴うもの）もあります。また、日経２２５先物とそれを原資産とする派生商品である日経２２５オプションの関係だけでなく、現物株とそれを原資産とする派生商品（株オプ等）の間でも同じことが言えます。&lt;br /&gt;
　まぁIVとHVの違いは理解しているけど、ボラティリティと言う言葉は単に「値動き」とか「値幅」と同義で使っているだけなので、区別する必要はないと言われればそれまでなのですが。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;誤解を生む説明の仕方&lt;/h3&gt;
&lt;p&gt;　ネットや本ではよく&lt;strong&gt;「ボラティリティが高いとオプションのプレミアムが高くなる、ボラティリティが低いとオプションのプレミアムが低くなる」&lt;/strong&gt;と説明されています。でもこの文を読んでいる人を騙そうとする悪意があるかどうかは別にして、非常に誤解を生みやすい説明だと思います。なぜなら、&lt;strong&gt;ボラティリティが高いと&lt;/strong&gt;という前提条件がIVのことを指しているのかHVのことを指しているのかわかりません。&lt;br /&gt;
　もしIVのことを指しているとしたら、IVが高いとプレミアムが高くなるのはその通りですが、そのIVというものはオプションの価格から算出されているものだから当たり前のことを言っているに過ぎません。IVが高いとオプションのプレミアムが高くなるわけではなく、IVが高いってことはオプションが割高に買われているってことです。&lt;br /&gt;
　また、&lt;strong&gt;ボラティリティが高いと&lt;/strong&gt;という前提条件がHVのことを指しているのだとすると、HVが高いとオプションの&lt;strong&gt;理論価格&lt;/strong&gt;が高くなることは間違いないですが、オプションの&lt;strong&gt;実際の価格&lt;/strong&gt;が理論価格通りに高くなるとは限りません。HVが高いとオプションの価格（プレミアム）が高くなるのではなく、HVが高いとオプションの&lt;strong&gt;理論価格&lt;/strong&gt;が高くなると言うべきです。&lt;br /&gt;
　&lt;strong&gt;ボラティリティが高いと&lt;/strong&gt;という表現がIVのことを指しているとしてもHVのことを指しているとしても、いずれも不正確な文章だと言えます。IVとHVの違いを理解している人でもつい説明する手間を省いて、こういう表現をしがちなんだと思いますが、説明する側がよく理解していないケースも多いと思います。    &lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;違いが分かる説明の仕方&lt;/h3&gt;
&lt;p&gt;　&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E3%83%9C%E3%83%A9%E3%83%86%E3%82%A3%E3%83%AA%E3%83%86%E3%82%A3&quot;&gt;wikipediaによるボラティリティの説明&lt;/a&gt;は学問的で、これはこれでいいのかもしれません。それに「インプライド・ボラティリティとは&lt;strong&gt;現実のオプション市場でついたオプション価格から逆算されたボラティリティ&lt;/strong&gt;のことである」とこれ以上望めない簡潔な言葉で言い表されています。&lt;br /&gt;
しかし、これ&lt;br /&gt;
&lt;img src=&quot;http://upload.wikimedia.org/math/c/8/9/c89911f0951782890cbb855572aa9de7.png&quot; alt=&quot;wikipediaのHVの数式&quot; /&gt;とか、&lt;br /&gt;
こういう&lt;br /&gt;
&lt;img src=&quot;http://upload.wikimedia.org/math/1/9/b/19beb2fcdc78f6d56e3e16ad3f04c624.png&quot; alt=&quot;wikipediaのIVの数式&quot; /&gt;難しい数式が出てくるので、「要するにどちらも値動きの荒さ、変動率のことだろ？」と言う感じで思考を中断してしまいがちだと思うのです。オプションという商品を理解しているつもりだった自分も、&lt;a href=&quot;http://my-posi.herokuapp.com&quot;&gt;先物・オプション売買損益シミュレーションサイト&lt;/a&gt;を自分で作ってみるまではIVとHVの違いを明確に区別出来ていなくて、よく似たような物ぐらいに考えていました。２つの間には相関関係が非常に薄いにも関わらずです。&lt;br /&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
ヒストリカル・ボラティリティxとオプション理論価格yは以下のように表すことが出来て、  \\
y = ax\\
オプションの実際の価格がy_1であった時に、導き出されるものがインプライド・ボラティリティx_1である。  \\
x_1 = \frac{y_1}{a}\\
&lt;/script&gt;
という感じで簡略化した数式を書いてくれれば２つのボラティリティの関係が分かりやすいと思うんですけど、どうでしょうか？&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/miscellaneous/2014-05-27/my-posi_vola</link>
                <guid>http://happyclam.github.io/miscellaneous/2014-05-27/my-posi_vola</guid>
                <pubDate>2014-05-27T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>DBのカラムに対応しないプロパティ</title>
                <description>&lt;h3 id=&quot;section&quot;&gt;日付型のカラムのデータを年月だけの文字列にしてコンボボックスに表示したい&lt;/h3&gt;
&lt;p&gt;先物やオプションの建玉を入力する時には限月を選ぶ必要がありますが、必要なのは年と月(“2014/06”等の文字列)だけです。でもDBに”年/月”のフォーマットで文字列として格納するのはあまりにも汚い。DBのカラム属性は日付型にしておいた方が何かと便利、というかしておくべきでしょう（日数や時間の差を計算する時に困ります）。&lt;br /&gt;
&lt;em&gt;**
&lt;img src=&quot;/images/dropdown_exp.png&quot; alt=&quot;限月の選択&quot; title=&quot;限月の選択&quot; /&gt;
**&lt;/em&gt;
こういう場合、昔PHPで仕事していた時には、文字列型と日付型を相互にフォーマット変換するコードをView上のあちこちに散りばめながら実現していた記憶があります。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;シンプルな実現方法&lt;/h3&gt;
&lt;p&gt;Position.expirationがDBのカラムに対応するプロパティで日付型です。そこにPosition.ym_expirationというDBにカラムが存在しない入出力用のプロパティを用意し、そのsetterとgetterを定義します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Model(Position)&lt;br /&gt;
getter(日付型のデータを、年/月のフォーマットの文字列に変換してして返す)&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;ym_expiration&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#069&quot;&gt;self&lt;/span&gt;.expiration.strftime(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;%Y/%m&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;) &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color:#069&quot;&gt;self&lt;/span&gt;.expiration
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;setter(年/月の文字列データを日付01を付加して日付型に変換して格納)&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;ym_expiration=&lt;/span&gt;(ym_expiration)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#069&quot;&gt;self&lt;/span&gt;.expiration = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Date&lt;/span&gt;.strptime(ym_expiration + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/01&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;%Y/%m/%d&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Viewから呼ばれる、年/月の文字列データを返すメソッド&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;get_expiration_list&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#A60&quot;&gt;:省略&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    :
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;View(_edit_position.html.erb)&lt;br /&gt;
Viewでは入出力用に追加したym_expirationプロパティだけを使うようにすれば、あたかもDBに対応するカラムのように扱えます。&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;td&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;align&lt;/span&gt;=&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;center&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;background-color:hsla(0,0%,0%,0.07);color:black&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;&amp;lt;%=&lt;/span&gt; f.select(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ym_expiration&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, position.get_expiration_list, {&lt;span style=&quot;color:#A60&quot;&gt;:include_blank&lt;/span&gt; =&amp;gt; &lt;span style=&quot;color:#069&quot;&gt;false&lt;/span&gt;}, {&lt;span style=&quot;color:#A60&quot;&gt;:class&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;span6&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#A60&quot;&gt;:style&lt;/span&gt; =&amp;gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;width:90px;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;}) &lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;CakephpやPHP5以上ならたぶん同じことが出来ると思いますが、もうPHPに戻りたくないし調べる気にもなりません&lt;/p&gt;

&lt;hr /&gt;
</description>
                <link>http://happyclam.github.io/programming/2014-05-26/my-posi_tip1</link>
                <guid>http://happyclam.github.io/programming/2014-05-26/my-posi_tip1</guid>
                <pubDate>2014-05-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>先物・オプションのシミュレーションサイト</title>
                <description>&lt;p&gt;Project: 「&lt;a href=&quot;http://my-posi.herokuapp.com/&quot;&gt;&lt;strong&gt;みんなのポジション&lt;/strong&gt;&lt;/a&gt;」: &lt;a href=&quot;https://github.com/happyclam/my-posi&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;開発の動機&lt;/h3&gt;
&lt;p&gt;当時、利用している証券会社のシステムが物足りなく信用できないものであったため自作しました。でも自分で作成した後、まもなくネット証券側もシステムをリニューアルして、自分のものより遥に高機能なものに置き換わったのですが、損益グラフを表示した時にグラフのメモリ幅を変更出来ないため見にくいという不満があったりするので、その点でまだは自分のソフトの方が優れているかなと思っています。まぁオプション売買を活発にしている人はそれ程多くないと思いますので、証券会社も力を入れていないのだと思います。５社ほどで取引したことありますが、そもそもオプション売買のシミュレーション機能なんて無い証券会社もありました。&lt;br /&gt;
最近は自分もあまりオプション取引をしていないのでよく知りませんが、今ではWebベースでもWindowsネイティブソフト並にユーザインターフェースに凝ったソフトを提供している証券会社があるかもしれません。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;機能&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;日経225先物、日経225先物ミニ、日経225オプション(CALL,PUT)の建玉を一つのポジション、複数のポジションをまとめたものをストラテジーとして、ユーザ毎の複数のストラテジーの保存。&lt;/li&gt;
  &lt;li&gt;複数の建玉の売買シミュレーションと損益推移（個別・合算）グラフを表示&lt;br /&gt;
※ブラックショールズモデルを利用したオプション理論価格計算に対応しているので、満期（SQ）時の損益だけでなく、現時点での原資産価格（日経225先物価格）毎の損益推移を表示出来ます&lt;/li&gt;
  &lt;li&gt;twitterを利用したユーザー認証とポジションをtwitterで呟く&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;er&quot;&gt;ER図&lt;/h3&gt;
&lt;object data=&quot;/pdf/ERD.pdf&quot; width=&quot;760&quot; height=&quot;480&quot;&gt;
&lt;p&gt;ご覧の環境では、object要素がサポートされていないようです。&lt;a href=&quot;/pdf/ERD.pdf&quot;&gt;PDFファイルをダウンロードしてください&lt;/a&gt;&lt;/p&gt;
&lt;/object&gt;

&lt;p&gt;UserモデルとStrategyモデルが1対多、StrategyモデルとPositionモデルが1対多で関連付けられている単純なテーブル構造です。&lt;br /&gt;
他のテーブルと関連付けられていないCandlestickモデルというのはネット上に転がっている先物価格のロウソク足用のcsvデータを流し込むためのテーブルで、ヒストリカル・ボラティリティ（HV）を計算するためだけに使用しています。HVの計算方法には色々あるようですが、自分が使用したのは&lt;a href=&quot;http://www.option-dojo.com/kn/225_vola.html&quot;&gt;ここ&lt;/a&gt;に記載されている方法に倣っています。&lt;br /&gt;
気が向いたときにcsvデータを手動で更新するという運用の仕方をしてました。画面から手入力するとその値を優先して使用するようにしているので、実際にはHVを手入力して使うことが多かったです。開発当時は無かったのですが、今なら日経平均ボラティリティインデックスがリアルタイムで更新されているのでその値を手入力する方がいいかもしれません。20%（日経平均VIが20ポイント）であれば0.2を入力します。このHVの値を使ってオプション理論価格を算出します。&lt;br /&gt;
※ボラティリティにはHVとは別にインプライド・ボラティリティ（IV）というものがありますが、ボラティリティに関しては別記事を書こうと思います。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;テーブル構造&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Userテーブル&lt;/em&gt;  &lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;内容&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;例&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;name&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;サイト内で使用する独自のユーザ名&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;provider&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;twitter認証APIで返される文字列&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;“twitter”&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;screen_name&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;twitter認証APIで返される文字列&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;“SappierBoy”&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;uid&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;twitter認証APIで返される文字列&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;“1111111111”&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Strategyテーブル&lt;/em&gt;  &lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;内容&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;例&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;draw_type&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;損益グラフを個別表示するか合算表示するか&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;1,未定義&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;interest&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;金利&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;0.02&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;name&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;ストラテジー名&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;“abc戦略”&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;range&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;グラフの幅デフォルト500とした相対数値で拡大・縮小&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;500&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;sigma&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;オプション理論価格計算に使用するボラティリティ(HV)&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;0.2&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Positionテーブル&lt;/em&gt;  &lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;名称&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;内容&lt;/th&gt;
          &lt;th style=&quot;text-align: left&quot;&gt;例&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;distinct&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;商品種別（日経225先物、日経225先物mini、CALLオプション、PUTオプション）&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;exercise&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;行使価格（オプションの場合のみ、先物の場合はnil）&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;0.02&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;expiration&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;限月（満期月）&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;“2014/06”&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;maturity&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;残存日数（1日に満たない場合も日数換算）&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;0.1～365&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;number&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;オプション理論価格計算に使用するボラティリティ&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;0.2&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;sale&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;売り、買いの区別&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;unit&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt;商品単価&lt;/td&gt;
          &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Candlestickテーブル&lt;/em&gt;&lt;br /&gt;
※どこから先物価格のデータを取得するかでテーブル構造は変わるので省略します。必要なのはオプションの原資産となる先物価格の終値20日分です。私が利用していたのは&lt;a href=&quot;http://k-db.com/&quot;&gt;このサイト&lt;/a&gt;です。&lt;br /&gt;
以下のようにcsvデータをダウンロード  &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;wget -O ./lib/futures.csv &quot;http://k-db.com/site/jikeiretsuF.aspx?c=101&amp;amp;year=0&amp;amp;download=csv&quot;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;csvデータから先物価格データを格納      &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rails runner Candlestick::biteoff
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-3&quot;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.amazon.co.jp/%E4%B8%96%E7%95%8C%E4%B8%80%E3%82%84%E3%81%95%E3%81%97%E3%81%84%E9%87%91%E8%9E%8D%E5%B7%A5%E5%AD%A6%E3%81%AE%E6%9C%AC%E3%81%A7%E3%81%99-%E7%94%B0%E6%B8%95-%E7%9B%B4%E4%B9%9F/dp/4534040512]&quot;&gt;「世界一やさしい金融工学の本です」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>http://happyclam.github.io/project/2014-05-24/my-posi</link>
                <guid>http://happyclam.github.io/project/2014-05-24/my-posi</guid>
                <pubDate>2014-05-24T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>rspecに納得できない</title>
                <description>&lt;p&gt;先日衝動買いした&lt;a href=&quot;http://www.amazon.co.jp/Instant-RSpec-Test-Driven-Development-How-ebook/dp/B00DMYO1QK&quot;&gt;Instant RSpec Test-Driven Development How-to [Kindle版]&lt;/a&gt;の最初に出てくるサンプルコード&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#777&quot;&gt;#location_spec.rb&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;describe &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Location&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;  describe &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;#initialize&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;    it &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;sets the latitude and longitude&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;      loc = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Location&lt;/span&gt;.new(&lt;span style=&quot;color:#A60&quot;&gt;:latitude&lt;/span&gt; =&amp;gt; &lt;span style=&quot;color:#60E&quot;&gt;38.911268&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;                         &lt;span style=&quot;color:#A60&quot;&gt;:longitude&lt;/span&gt; =&amp;gt; &lt;span style=&quot;color:#60E&quot;&gt;-77.444243&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;      loc.latitude.should == &lt;span style=&quot;color:#60E&quot;&gt;38.911268&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;      loc.longitude.should == &lt;span style=&quot;color:#60E&quot;&gt;-77.444243&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;  &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;上記テストを通過させるために「自分が書いたコード」が以下のもの&lt;code&gt;rspec failed&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#777&quot;&gt;#my_answer.rb  &lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;class&lt;/span&gt;  &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;Location&lt;/span&gt;  
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;       attr_accessor &lt;span style=&quot;color:#A60&quot;&gt;:latitude&lt;/span&gt;  
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;       attr_accessor &lt;span style=&quot;color:#A60&quot;&gt;:longitude&lt;/span&gt;  
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;       &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;initialize&lt;/span&gt;(lati=&lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt;, long=&lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt;)  
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;           &lt;span style=&quot;color:#33B&quot;&gt;@latitude&lt;/span&gt; = lati  
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;           &lt;span style=&quot;color:#33B&quot;&gt;@longitude&lt;/span&gt; = long  
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;       &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;  
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;「リファクタリング前のコード」として本で紹介されているコード&lt;code&gt;rspec passed&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#777&quot;&gt;#bad_answer.rb&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;class&lt;/span&gt;  &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;Location&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;       &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;initialize&lt;/span&gt;(args = {});&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;       &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;latitude&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;           &lt;span style=&quot;color:#60E&quot;&gt;38.911268&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;       &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;       &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;longitude&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;           &lt;span style=&quot;color:#60E&quot;&gt;-77.444243&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;       &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;「リファクタリング後のコード」として本で紹介されているコード&lt;code&gt;rspec passed&lt;/code&gt;  &lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#777&quot;&gt;#model_answer.rb&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;Location&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;       attr_accessor &lt;span style=&quot;color:#A60&quot;&gt;:latitude&lt;/span&gt;, &lt;span style=&quot;color:#A60&quot;&gt;:longitude&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;       &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;initialize&lt;/span&gt;(args = {})
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;           &lt;span style=&quot;color:#069&quot;&gt;self&lt;/span&gt;.latitude = args[&lt;span style=&quot;color:#A60&quot;&gt;:latitude&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;           &lt;span style=&quot;color:#069&quot;&gt;self&lt;/span&gt;.longitude = args[&lt;span style=&quot;color:#A60&quot;&gt;:longitude&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;       &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;テストを通過させるためだけに書かれたような「リファクタリング前のコード」がエラーにならないのに、上記「自分のコード」がエラーになるのは納得がいかない。&lt;br /&gt;
自分のコードに何かエラーにしなければならない理由があるのか？自分にはわからないので誰か教えてください。&lt;/p&gt;

</description>
                <link>http://happyclam.github.io/programming/2014-05-17/inflexible-rspec</link>
                <guid>http://happyclam.github.io/programming/2014-05-17/inflexible-rspec</guid>
                <pubDate>2014-05-17T00:00:00+09:00</pubDate>
        </item>


</channel>
</rss>
